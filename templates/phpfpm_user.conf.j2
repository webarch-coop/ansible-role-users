; Ansible provisioned
[{{ user.key }}]
user = {{ user.key }} 
group = {{ user.value.users_group | default(user.key) }}
{% if users_chroot is defined and users_chroot == True and users_chroot_dir is defined and users_chroot_dir.stat.exists and user.value.users_groups is defined and "chroot" in user.value.users_groups %}
chroot = {{ chroot_users_dir | default('/users') }}/{{ user.key }}
listen = {{ chroot_users_dir | default('/users') }}/{{ user.key }}{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/php-fpm.sock
access.log = {{ chroot_users_dir | default('/users') }}/{{ user.key }}{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/logs/php-fpm.access.log
slowlog = {{ chroot_users_dir | default('/users') }}/{{ user.key }}{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/logs/php-fpm.slow.log
php_admin_value[error_log] = {{ chroot_users_dir | default('/users') }}/{{ user.key }}{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/logs/fpm-php.error.log
{% else %}
listen = {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/php-fpm.sock
access.log = {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/logs/php-fpm.access.log
slowlog = {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/logs/php-fpm.slow.log
php_admin_value[error_log] = {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/logs/fpm-php.error.log
{% endif %}
listen.owner = root
listen.group = {{ user.key }}
listen.mode = 0660
;listen.acl_users =
;listen.acl_groups =
listen.allowed_clients = 127.0.0.1
; Error log level. Possible values: alert, error, warning, notice, debug. Default value: notice. 
php_admin_value[log_level] = {{ user.value.users_phpfpm_log_level | default('notice') }} 

env[TMP] = {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp
env[TMPDIR] = {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp
env[TEMP] = {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp

chdir = {{ user.value.users_home | default(users_basedir + '/' + user.key) }}

; PHP settings passed with php_value or php_flag will overwrite php.ini values
; but defining disable_functions or disable_classes will not overwrite
; previously defined php.ini values, but will append the new value instead. 
;
; https://www.php.net/install.fpm.configuration
;
{% if user.value.users_phpfpm_disable_functions is defined and user.value.users_phpfpm_disable_functions != [] %} 
; disable_functions set from user.value.users_phpfpm_disable_functions
php_admin_value[disable_functions] = "{% for func in user.value.users_phpfpm_disable_functions %}{{ func }}{% if not loop.last %},{% endif %}{% endfor %}"
{% elif users_phpfpm_disable_functions is defined and users_phpfpm_disable_functions != [] %}
; disable_functions set from users_phpfpm_disable_functions
php_admin_value[disable_functions] = "{% for func in users_phpfpm_disable_functions %}{{ func }}{% if not loop.last %},{% endif %}{% endfor %}"
{% else %}
; disable_functions not set as neither user.value.users_phpfpm_disable_functions or
; users_phpfpm_disable_functions are set
php_admin_value[disable_functions] = 
{% endif %}
php_admin_value[open_basedir] = "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_sites_dir }}/:{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp/:/usr/share/php"
php_admin_value[session.save_path] = {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp
php_admin_value[upload_tmp_dir] = {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp
php_admin_value[sys_temp_dir] = {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp
php_admin_value[soap.wsdl_cache_dir] = {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp
php_admin_value[uploadprogress.file.contents_template] = {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp/upload_contents_%s
php_admin_value[uploadprogress.file.filename_template] = {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp/upt_%s.txt
php_admin_value[sendmail_path] = /usr/sbin/sendmail -t -i -f{{ user.key }}@{{ inventory_hostname }}
php_admin_value[sendmail_from] = {{ user.key }}@{{ inventory_hostname }}
php_admin_value[mail.log] = {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/logs/php-fpm.mail.log

pm = {{ user.value.users_phpfpm_pm | default('ondemand') }}
pm.max_children = {{ user.value.users_phpfpm_max_children | default('2') }}
{% if user.value.users_phpfpm_pm == "dynamic" %}
pm.start_servers = {{ user.value.users_phpfpm_pm_start_servers | default('1') }}
pm.min_spare_servers = {{ user.value.users_phpfpm_pm_min_spare_servers | default('1') }}
pm.max_spare_servers = {{ user.value.users_phpfpm_pm_max_spare_servers | default('1') }}
{% endif %}
pm.process_idle_timeout = 10s;
pm.max_requests = 1000
pm.status_path = /phpfpm-{{ user.key }}-status
;ping.path = /ping

access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"
request_slowlog_timeout = 30
request_terminate_timeout = {{ user.value.users_phpfpm_request_terminate_timeout | default(users_phpfpm_request_terminate_timeout) }}

; Redirect worker stdout and stderr into main error log. If not set, stdout and
; stderr will be redirected to /dev/null according to FastCGI specs.
; Note: on highloaded environement, this can cause some delay in the page
; process time (several ms).
; Default Value: no
;catch_workers_output = yes

; Decorate worker output with prefix and suffix containing information about
; the child that writes to the log and if stdout or stderr is used as well as
; log level and time. This options is used only if catch_workers_output is yes.
; Settings to "no" will output data as written to the stdout or stderr.
; Default value: yes
;decorate_workers_output = no

; Clear environment in FPM workers
; Prevents arbitrary environment variables from reaching FPM worker processes
; by clearing the environment in workers before env vars specified in this
; pool configuration are added.
; Setting to "no" will make all environment variables available to PHP code
; via getenv(), $_ENV and $_SERVER.
; Default Value: yes
;clear_env = no
clear_env = yes

; Limits the extensions of the main script FPM will allow to parse. This can
; prevent configuration mistakes on the web server side. You should only limit
; FPM to .php extensions to prevent malicious users to use other extensions to
; execute php code.
; Note: set an empty value to allow all extensions.
; Default Value: .php
;security.limit_extensions = .php .php3 .php4 .php5 .php7
security.limit_extensions = .php

; Pass environment variables like LD_LIBRARY_PATH. All $VARIABLEs are taken from
; the current environment.
; Default Value: clean env
;env[HOSTNAME] = $HOSTNAME
env[PATH] = /usr/local/bin:/usr/bin:/bin

; Additional php.ini defines, specific to this pool of workers. These settings
; overwrite the values previously defined in the php.ini. The directives are the
; same as the PHP SAPI:
;   php_value/php_flag             - you can set classic ini defines which can
;                                    be overwritten from PHP call 'ini_set'.
;   php_admin_value/php_admin_flag - these directives won't be overwritten by
;                                     PHP call 'ini_set'
; For php_*flag, valid values are on, off, 1, 0, true, false, yes or no.

; Defining 'extension' will load the corresponding shared extension from
; extension_dir. Defining 'disable_functions' or 'disable_classes' will not
; overwrite previously defined php.ini values, but will append the new value
; instead.

; Note: path INI options can be relative and will be expanded with the prefix
; (pool, global or /usr)

; Default Value: nothing is defined by default except the values in php.ini and
;                specified at startup with the -d argument
;php_admin_value[sendmail_path] = /usr/sbin/sendmail -t -i -f www@my.domain.com
;php_flag[display_errors] = off
;php_admin_value[error_log] = /var/log/fpm-php.www.log
;php_admin_flag[log_errors] = on
;php_admin_value[memory_limit] = 32M

; vim: set ft=dosini:
