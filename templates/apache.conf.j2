# Ansible provisioned
{% for vhost,vhost_config in item.value.users_apache_virtual_hosts.items() %}

# {{ vhost }}
<VirtualHost *:80>
  ServerName {{ vhost_config.users_apache_server_name }}
{% if vhost_config.users_apache_server_aliases is defined %}
  ServerAlias{% for alias in vhost_config.users_apache_server_aliases %} {{ alias }}{% endfor %}
{% endif %}

  RedirectMatch 301 ^(?!/\.well-known/acme-challenge/).* https://{{ vhost_config.users_apache_server_name }}$0
</VirtualHost>

<VirtualHost *:443>
{% if apache_mods_enabled is defined and "suexec" in apache_mods_enabled %}
<IfModule suexec_module>
  SuexecUserGroup {{ item.key }} {{ item.key }}
</IfModule>
{% endif %}
{% if apache_mods_enabled is defined and "mpm_itk" in apache_mods_enabled %}
<IfModule mpm_itk_module>
  AssignUserID {{ item.key }}
  MaxClientsVHost {{ apache_mpm_itk_max_clients_vhost | default('50') }}
</IfModule>
{% endif %}

  ServerName {{ vhost_config.users_apache_server_name }}
{% if vhost_config.users_apache_server_aliases is defined %}
  ServerAlias{% for alias in vhost_config.users_apache_server_aliases %} {{ alias }}{% endfor %}
{% endif %}

{% if users_cert is defined %}
  SSLEngine on
{% if users_cert == "user" %}
  SSLCertificateFile            {{ le_dir }}/{{ item.key }}.{{ inventory_hostname }}.cert.pem
  SSLCertificateKeyFile         {{ le_dir }}/{{ item.key }}.{{ inventory_hostname }}.key.pem
  SSLCertificateChainFile       {{ le_dir }}/{{ item.key }}.{{ inventory_hostname }}.ca.pem
{% endif %}
{% if users_cert == "vhost" %}
  SSLCertificateFile            {{ le_dir }}/{{ vhost_config.users_apache_server_name }}.cert.pem
  SSLCertificateKeyFile         {{ le_dir }}/{{ vhost_config.users_apache_server_name }}.key.pem
  SSLCertificateChainFile       {{ le_dir }}/{{ vhost_config.users_apache_server_name }}.ca.pem
{% endif %}
{% endif %}

{% if item.value.users_email is defined and item.value.users_email != "" %}
  ServerAdmin "{{ item.value.users_email }}"
{% endif %}
{% if vhost_config.users_apache_robots is defined and vhost_config.users_apache_robots == "deny" %}
  IncludeOptional /etc/apache2/conf-available/robots-deny.conf
{% endif %}
  DocumentRoot "{{ item.value.users_home | default(users_basedir + '/' + item.key) }}/{{ users_sites_dir }}/{{ vhost }}"
  <Directory "{{ item.value.users_home | default(users_basedir + '/' + item.key) }}/{{ users_sites_dir }}/{{ vhost }}">
{% if vhost_config.users_apache_type is defined and vhost_config.users_apache_type == "php" %}
{% if vhost_config.users_apache_options is defined %}
    Options {% for option in vhost_config.users_apache_options %}{{ option }}{% endfor %}

{% else %}
    Options -Indexes +SymlinksIfOwnerMatch -MultiViews +IncludesNOEXEC -ExecCGI
{% endif %}
    DirectoryIndex index.php index.html index.shtml index.htm index.xhtml wsh.shtml
    AllowOverride AuthConfig FileInfo Indexes Limit Options=Indexes,SymLinksIfOwnerMatch,MultiViews,IncludesNOEXEC Nonfatal=Override
    # https://wiki.apache.org/httpd/PHP-FPM#Proxy_via_handler
    <IfModule proxy_fcgi_module>
      <IfModule setenvif_module>
        SetEnvIfNoCase ^Authorization$ "(.+)" HTTP_AUTHORIZATION=$1
      </IfModule>
      <FilesMatch "\.php$">
        <If "-f %{REQUEST_FILENAME}">
{% if "chroot" not in item.value.users_groups %}
          SetHandler "proxy:unix:/run/php/php{{ users_phpfpm_version }}-fpm.sock|fcgi://localhost/"

{% else %}
          # SetHandler "proxy:unix:{{ item.value.users_home | default(users_basedir + '/' + item.key) }}/php-fpm.sock|fcgi://localhost/"
          SetHandler "proxy:unix:{{ chroot_users_dir | default('/users') }}/{{ item.key }}{{ item.value.users_home | default(users_basedir + '/' + item.key) }}/php-fpm.sock|fcgi://localhost/"
{% endif %}
        </If>
      </FilesMatch>
    </IfModule>
{% elif vhost_config.users_apache_type is defined and vhost_config.users_apache_type == "cgi" %}
    Options -Indexes +SymlinksIfOwnerMatch -MultiViews +IncludesNOEXEC +ExecCGI
    DirectoryIndex index.html index.php index.shtml index.xhtml index.cgi index.pl index.htm wsh.shtml
    AllowOverride AuthConfig FileInfo Indexes Limit Options=ExecCGI,SymLinksIfOwnerMatch,MultiViews,IncludesNOEXEC Nonfatal=Override
    <IfModule fcgid_module>
      <IfModule mime_module>
        <FilesMatch "[^.]+\.cgi$">
          SetHandler fcgid-script
        </FilesMatch>
        <FilesMatch "[^.]+\.pl$">
          SetHandler fcgid-script
        </FilesMatch>
      </IfModule>
    </IfModule>
{% else %}
    Options -Indexes +SymlinksIfOwnerMatch -MultiViews +IncludesNOEXEC -ExecCGI
    DirectoryIndex index.html index.shtml index.htm index.xhtml wsh.shtml
    AllowOverride AuthConfig FileInfo Indexes Limit Options=Indexes,SymLinksIfOwnerMatch,MultiViews,IncludesNOEXEC Nonfatal=Override
{% endif %}
{% if vhost_config.users_htauth_users is defined and vhost_config.users_htauth_users != [] %}
{% if vhost_config.users_htauth_name is defined %}
    AuthName "{{ vhost_config.users_htauth_name }}"
{% else %}
    AuthName "Authorised Users Only"
{% endif %}
    AuthType Basic
    AuthUserFile {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/.htpasswd/{{ vhost_config.users_apache_server_name }}
    Require valid-user
{% else %}
    Require all granted
{% endif %}
{%if vhost_config.users_apache_expires is defined and vhost_config.users_apache_expires == "medium" %}
  IncludeOptional /etc/apache2/conf-available/expires-medium.conf
{%elif vhost_config.users_apache_expires is defined and vhost_config.users_apache_expires == "strict" %}
  IncludeOptional /etc/apache2/conf-available/expires-strict.conf
{% endif %}
  </Directory>
  CustomLog /var/log/apache2/{{ item.key }}_access.log bandwidth
  LogLevel error
  ErrorLog  {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/logs/apache.error.log
  CustomLog {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/logs/apache.access.log combinedio
</VirtualHost>
{% endfor %}

# vim: set ft=apache:
