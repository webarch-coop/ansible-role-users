---
# One cert per VirtualHost
- name: Let's Encrypt cert role included
  include_role:
    name: acmesh
    tasks_from: letsencrypt
  vars:
    common_name: "{{ vhost.value.users_apache_server_name }}"
    subject_alt_names: "{{ vhost.value.users_apache_server_aliases }}"
  loop: "{{ item.value.users_apache_virtual_hosts | dict2items }}"
  loop_control:
    loop_var: vhost
  when: users_cert == "vhost"
  tags:
    - apache

# One cert per user
- block:

    - name: Set fact for commonName
      set_fact:
        common_name: "{{ item.key }}.{{ inventory_hostname }}"

    - name: Populate list of ServerName's for the user
      set_fact:
        server_names: "{{ vhost.value.users_apache_server_name }}"
      loop: "{{ item.value.users_apache_virtual_hosts | dict2items }}"
      loop_control:
        loop_var: vhost
      tags:
        - apache

    - name: Populate list ServerAliases' for the user
      set_fact:
        server_aliases: "{{ vhost.value.users_apache_server_aliases|default([]) }}"
      loop: "{{ item.value.users_apache_virtual_hosts | dict2items }}"
      loop_control:
        loop_var: vhost
      tags:
        - apache

    - debug:
        msg: "server_names: {{ server_names }}"

    - debug:
        msg: "server_aliases: {{ server_aliases }}"

    - name: Set a fact for all the ServerName's and ServerAliases
      set_fact:
        subject_alt_name: "{{ server_names }} + {{ server_aliases }}"

#    - name: Set facts for subjectAltNames
#      set_fact:
#        san: "{{ vhost.value.users_apache_server_name }} + {{ vhost.value.users_apache_server_aliases|default([]) }}"
#        # san: "{{ vhost.value.users_apache_server_aliases|default([]) + [ vhost.value.users_apache_server_name ] }}"
#      loop: "{{ item.value.users_apache_virtual_hosts | dict2items }}"
#      register: sans
#      loop_control:
#        loop_var: vhost
#      tags:
#        - apache
#
#    - debug:
#        msg: "san is set to: {{ san }}"
#
#    - debug:
#        var: san
#
#    - debug:
#        msg: "sans is set to: {{ sans }}"
#
#    - debug:
#        var: sans
#
#    - debug:
#        msg: "flattened sans.results: {{ sans.results | map(attribute='ansible_facts.san') | list }}"
#
#    - name: Set a variable for all the subjectAltNames
#      set_fact:
#        subject_alt_names: "{{ sans.results | map(attribute='ansible_facts.san') | list }}"

    - debug:
        msg: "subject_alt_names is set to: {{ subject_alt_names }}"

    - debug:
        msg: "common_name is set to: {{ common_name }}"

    - fail:
        msg: debug stop

    - name: Let's Encrypt cert role included
      include_role:
        name: acmesh
        tasks_from: letsencrypt
      tags:
        - apache

  when: users_cert == 'user'

- name: "Apache {{ item.key }} sites-available file present"
  template:
    src: templates/apache.conf.j2
    dest: "/etc/apache2/sites-available/{{ item.key }}.conf"
  tags:
    - apache

- name: "Apache {{ item.key }}/sites directory present"
  file:
    path: "{{ item.value.users_home | default('/home/' + item.key) }}/sites"
    state: directory
    owner: "{{ item.key }}"
    # group: "{{ apache_user | default('www-data') }}"
    group: "{{ item.value.users_group | default(item.key) }}"
    mode: 0750
  tags:
    - apache

- name: "Apache DocumentRoot present"
  file:
    path: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost }}"
    state: directory
    owner: "{{ item.key }}"
    # group: "{{ apache_user | default('www-data') }}"
    group: "{{ item.value.users_group | default(item.key) }}"
    mode: 0750
  loop: "{{ item.value.users_apache_virtual_hosts.keys() | list }}"
  loop_control:
    loop_var: vhost
  tags:
    - apache

- name: "Apache log directory {{ item.value.users_home | default('/home/' + item.key) }}/logs present"
  file:
    path: "{{ item.value.users_home | default('/home/' + item.key) }}/logs"
    state: directory
    owner: root
    group: "{{ item.key }}"
    mode: 0750
  tags:
    - apache

- name: "Apache {{ item.key }} sites-enabled symlink present"
  command: "a2ensite {{ item.key }}"
  register: users_a2ensite
  changed_when: '"already enabled" not in users_a2ensite.stdout'
  tags:
    - apache

- name: WP install
  include_tasks: wordpress.yml
  loop: "{{ item.value.users_apache_virtual_hosts | dict2items }}"
  when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "wordpress" )
  loop_control:
    loop_var: vhost
  tags:
    - apache
