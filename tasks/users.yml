# Copyright 2018-2024 Chris Croome
#
# This file is part of the Webarchitects Users Ansible role.
#
# The Webarchitects Users Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Users Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Users Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Users tasks
  block:

    - name: Check that usernames are between 2 and 17 ascii letters, numbers and dashes
      ansible.builtin.assert:
        that:
          - user.key is regex("^[a-zA-Z0-9-]{2,17}$")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: "Usernames can only be between 2 and 17 ascii letters, numbers and dashes"
      loop: "{{ users | dict2items }}"
      loop_control:
        loop_var: user
        label: "{{ user.key }}"

    - name: Debug meta/user_argument_specs.yml
      ansible.builtin.debug:
        msg: "{{ lookup('ansible.builtin.file', 'meta/user_argument_specs.yml') | from_yaml }}"
        verbosity: 2

    - name: Debug users dict
      ansible.builtin.debug:
        var: user.value
        verbosity: 2
      loop: "{{ users | dict2items }}"
      loop_control:
        loop_var: user
        label: "{{ user.key }}"

    - name: Check individual user variables using meta/user_argument_specs.yml
      ansible.builtin.validate_argument_spec:
        argument_spec: "{{ lookup('ansible.builtin.file', 'meta/user_argument_specs.yml') | from_yaml }}"
        provided_arguments: "{{ user.value }}"
      loop: "{{ users | dict2items }}"
      loop_control:
        loop_var: user
        label: "{{ user.key }}"

    - name: Loop through the users to include meta/apache_virtual_host_argument_specs.yml for Apache VirtualHost dictionaries
      ansible.builtin.include_tasks: validate_vhost.yml
      when: user.value.users_apache_virtual_hosts is defined
      loop: "{{ users | dict2items }}"
      loop_control:
        loop_var: user
        label: "{{ user.key }}"

    - name: System setup and checks
      ansible.builtin.include_tasks: system.yml

    - name: Check config only
      block:

        - name: Run checks on users
          ansible.builtin.include_tasks: user_check.yml
          when: >-
            ( user.value.users_state is not defined ) or
            ( user.value.users_state != "absent" ) or
            ( user.value.users_state != "ignore" )
          loop: "{{ users | dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        - name: End as checks completed
          ansible.builtin.meta: end_play

      when: ( users_update_strategy is defined ) and ( users_update_strategy == "check" )

    - name: Set an empty users_update array
      ansible.builtin.set_fact:
        users_update: []
      when: users_update is not defined

    - name: Update Apache config for users present
      block:

        - name: Include Apache user tasks
          ansible.builtin.include_tasks: apache_user_vhosts_present.yml
          loop: "{{ users | dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"
          when:
            - ( user.key != "root" ) and ( "apache2" in ansible_local.dpkg.installed )
            - ( user.value.users_state is defined ) and ( user.value.users_state == "present" )
            - ( user.value.users_apache_virtual_hosts is defined ) and ( user.value.users_apache_virtual_hosts | type_debug == "dict" )

      when:
        - ( users_update_strategy is defined ) and ( users_update_strategy == "apache" )
        - ( users_apache is defined ) and ( users_apache | bool )

    - name: Update PHP-FPM config for users present
      block:

        - name: Include PHP-FPM user config tasks
          ansible.builtin.include_tasks: phpfpm_user_present.yml
          loop: "{{ users | dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"
          when:
            - ( user.key != "root" )
            - ( user.value.users_groups is defined ) and ( "phpfpm" in user.value.users_groups )
            - ( user.value.users_state is defined ) and ( user.value.users_state == "present" )

      when:
        - users_update_strategy is defined
        - users_update_strategy == "phpfpm"
        - users_phpfpm_versions is defined
        - users_phpfpm_default_version is defined

    - name: Update SSH keys for users present
      block:

        - name: Include SSH keys tasks
          ansible.builtin.include_tasks: ssh.yml
          loop: "{{ users | dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"
          when:
            - ( user.value.users_state is defined ) and ( user.value.users_state == "present" )
            - ( user.value.users_ssh_public_keys is defined ) and ( user.value.users_ssh_public_keys != [] )

      when:
        - ( users_update_strategy is defined ) and ( users_update_strategy == "sshkeys" )

    - name: Update Matomo sites and users
      block:

        - name: Matomo variables are required in order for this role to configure Matomo sites and users
          ansible.builtin.assert:
            that:
              - users_matomo | bool
              - ( matomo_user is defined ) and ( matomo_user | length > 0 )
              - ( matomo_password is defined ) and ( matomo_password | length > 0 )
              - ( matomo_token_auth is defined ) and ( matomo_token_auth | length > 0 )
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Include Matomo tasks
          ansible.builtin.include_tasks: matomo.yml

      when:
        - users_update_strategy is defined
        - users_update_strategy == "matomo"

    - name: Update quotas for users present
      block:

        - name: Quotas set for users
          ansible.builtin.include_tasks: quota.yml
          loop: "{{ users | dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"
          when:
            - user.key != "root"
            - ( user.value.users_state is not defined ) or ( user.value.users_state == "present" )
            - ( user.value.users_quota is defined ) and ( user.value.users_quota | length > 0 )

      when:
        - ( users_update_strategy is defined ) and ( users_update_strategy == "quotas" )
        - ( users_quotaon is defined ) and ( users_quotaon ) and ( quota_dir is defined )

    - name: Set users to update to all
      block:

        - name: Add all the users to the users_update array as users_update_strategy is not set or set to all
          ansible.builtin.set_fact:
            users_update: "{{ users_update | default([]) + [user.key] }}"
          when: >-
            ( user.value.users_state is not defined ) or
            ( user.value.users_state != "ignore" )
          loop: "{{ users | dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        - name: Print the users to update if users_update_strategy is not set or set to all
          ansible.builtin.debug:
            msg: "User to update: {{ users_update }}"

      when:
        - ( users_update_strategy is not defined ) or ( users_update_strategy == "all" )

    - name: Set users to update by group
      block:

        - name: Loop through the users with additional groups
          ansible.builtin.include_tasks: users_groups.yml
          when:
            - ( user.value.users_groups is defined and user.value.users_groups != [] ) or ( user.key in users_update_groups )
            - ( user.key not in users_update ) and ( user.value.users_state != "ignore" )
          loop: "{{ users | dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        - name: Print the users in the groups to update
          ansible.builtin.debug:
            msg: "User to update: {{ users_update }}"

      when:
        - ( users_update_strategy is defined ) or ( users_update_strategy == "groups" )
        - ( users_update_groups is defined ) and ( users_update_groups != [] )

    - name: Check which users accounts are changed
      block:

        - name: Check users changed
          ansible.builtin.include_tasks: users_changed.yml

        - name: Print the changed users to update
          ansible.builtin.debug:
            msg: "User to update: {{ users_update | join(', ') }}"

      when:
        - ( users_update_strategy is defined ) and ( users_update_strategy == "changed" )

    - name: Update users tasks
      block:

        - name: Print users to update
          ansible.builtin.debug:
            msg: "User to update: {{ user }}"
            verbosity: 1
          when:
            - ( user.key is defined ) and ( user.key in users_update )
            # - ( user.value.users_state is not defined ) or ( user.value.users_state is not regex('^absent|ignore$') )
            # - ( user.value.users_state is not defined ) or ( user.value.users_state != "absent" ) or ( user.value.users_state != "ignore" )
          loop: "{{ users | dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        - name: User absent loop
          ansible.builtin.include_tasks: user_absent.yml
          when:
            - ( user.key is defined ) and ( user.key in users_update )
            - ( user.value.users_state is defined ) and ( user.value.users_state == "absent" )
            # - ( user.value.users_state != "ignore" ) and ( user.value.users_state != "present" )
          loop: "{{ users | dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        - name: Check variables for users present
          ansible.builtin.include_tasks: user_check.yml
          when:
            - ( user.key is defined ) and ( user.key in users_update )
            - ( user.value.users_state is not defined ) or ( user.value.users_state == "present" )
            # - ( user.value.users_state is not defined ) or ( user.value.users_state is not regex('^absent|ignore$') )
            # - ( user.value.users_state is not defined ) or ( user.value.users_state != "absent" ) or ( user.value.users_state != "ignore" )
            # - ( user.value.users_state != "absent" ) or ( user.value.users_state != "ignore" )
          loop: "{{ users | dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        - name: User present loop
          ansible.builtin.include_tasks: user_present.yml
          when:
            - ( user.key is defined ) and ( user.key in users_update )
            - ( user.value.users_state is not defined ) or ( user.value.users_state == "present" )
            # - ( user.value.users_state is not defined ) or ( user.value.users_state != "absent" ) or ( user.value.users_state != "ignore" )
            # - ( user.value.users_state != "ignore" ) and ( user.value.users_state != "absent" )
          loop: "{{ users | dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        - name: Munin tasks for servers with a chroot and php-fpm
          block:

            - name: Set a fact for the users who are present and in the phpfpm and chroot groups
              ansible.builtin.set_fact:
                users_in_phpfpm_and_chroot_group: "{{ users_in_phpfpm_and_chroot_group | default('') }} {{ user.key }}"
              when:
                - ( user.value.users_state is not defined ) or ( user.value.users_state == "present" )
                - ( user.value.users_groups is defined ) and ( user.value.users_groups != [] )
                - ( "phpfpm" in user.value.users_groups ) and ( "chroot" in user.value.users_groups )
                - user.key != "root"
              loop: "{{ users | dict2items }}"
              loop_control:
                loop_var: user
                label: "{{ user.key }}"

            - name: Debug the users who are present and in the phpfpm and chroot groups
              ansible.builtin.debug:
                msg: "Users in the phpfpm and chroot groups: {{ users_in_phpfpm_and_chroot_group }}"
                verbosity: 1
              when: users_in_phpfpm_and_chroot_group is defined

            - name: Include the munin_node phpfpm-multi tasks
              ansible.builtin.include_role:
                name: munin_node
                tasks_from: phpfpm_multi.yml
              vars:  # noqa var-naming[no-role-prefix]
                munin_phpfpm_users: "{{ users_in_phpfpm_and_chroot_group }}"
              when: ( users_in_phpfpm_and_chroot_group is defined ) and ( users_in_phpfpm_and_chroot_group != [] )

          when:
            - users_phpfpm_versions is defined
            - users_phpfpm_default_version is defined
            - ( "phpfpm" in getent_group )
            - ( "chroot" in getent_group )

      when:
        - ( users_update is defined ) and ( users_update != [] )

    - name: Users quota CSV file updated
      block:

        - name: Updated users quotas written and md5sum printed
          ansible.builtin.shell: |
            set -e -o pipefail
            repquota {{ quota_dir }}  --output=csv > {{ quota_dir }}/quota_user.csv
            chmod 600 {{ quota_dir }}/quota_user.csv
            md5sum {{ quota_dir }}/quota_user.csv
          args:
            executable: "{{ users_bash }}"
          register: users_repquota_md5sum_after
          check_mode: false
          changed_when: >
            ( users_repquota_md5sum_before is not defined ) or
            ( ( users_repquota_md5sum_before is defined and users_repquota_md5sum_before.stdout ) != users_repquota_md5sum_after.stdout )

        - name: Updated users quotas fetched
          ansible.builtin.fetch:
            src: "{{ quota_dir }}/quota_user.csv"
            dest: /tmp/
          check_mode: false
          when: >
            ( users_repquota_md5sum_before is not defined ) or
            ( users_repquota_md5sum_before is defined and users_repquota_md5sum_before.stdout != users_repquota_md5sum_after.stdout )

      when: ( users_quotaon is defined ) and ( users_quotaon ) and ( quota_dir is defined )

    - name: List the updated users
      ansible.builtin.debug:
        msg: "Users updated: {{ users_update | join(', ') }}"
      when:
        - users_update != []
        - users_update_strategy != "sshkeys"

  tags:
    - users
...
