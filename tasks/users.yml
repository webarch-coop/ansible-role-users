# Copyright 2018-2025 Chris Croome
#
# This file is part of the Webarchitects Users Ansible role.
#
# The Webarchitects Users Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Users Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Users Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Users tasks
  block:

    - name: Debug users
      ansible.builtin.debug:
        var: user.value
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"
      loop: "{{ users | ansible.builtin.dict2items }}"
      loop_control:
        loop_var: user
        label: "{{ user.key }}"
      tags:
        - debug

    - name: User names must be 2 to 17 ascii letters, numbers and dashes
      ansible.builtin.fail:
        msg: >-
          The user name(s) {{ users.keys() | reject('ansible.builtin.regex', '^[a-zA-Z0-9-]{2,17}$') | join(', ') }}
          either contain disallowed characters or are shorter or longer than the allowed limit.
      when: users.keys() | reject('ansible.builtin.regex', '^[a-zA-Z0-9-]{2,17}$') != []

    - name: Directories for users state files present
      ansible.builtin.file:
        path: "{{ users_state_dir }}/{{ users_state_file_dir }}"
        state: directory
        mode: "0700"
        owner: root
        group: root
      loop:
        - current
        - previous
        - proposed
      loop_control:
        loop_var: users_state_file_dir

    - name: Users absent strategy
      block:

        - name: Delete users when they are set to be absent
          ansible.builtin.include_tasks: user_absent.yml
          when:
            - user.value.users_state is defined
            - user.value.users_state == "absent"
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

      when:
        - users_update_strategy is defined
        - users_update_strategy == "absent"

    - name: Write users state files when the update strategy is undefined, all or changed
      block:

        - name: Proposed users state files present
          ansible.builtin.template:
            src: user_state.yml.j2
            dest: "{{ users_state_dir }}/proposed/{{ user.key }}.yml"
            mode: "0600"
            owner: root
            group: root
          check_mode: false
          register: users_state_file
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

      when: ( users_update_strategy is not defined ) or ( users_update_strategy == "all" ) or ( users_update_strategy == "changed" )

    - name: Check which users accounts are changed and set them to be updated
      block:

        - name: Check users current state files
          ansible.builtin.include_tasks: user_state.yml
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        - name: Print the changed users to update
          ansible.builtin.debug:
            msg: "User{% if users_update | length > 1 %}s{% endif %} to update: {{ users_update | join(', ') }}"

      when:
        - users_update_strategy is defined
        - users_update_strategy == "changed"

    - name: Set users to update to all
      block:

        - name: Add all the users to the users_update array as users_update_strategy is not set or set to all
          ansible.builtin.set_fact:
            users_update: "{{ users_update | default([]) + [user.key] }}"
          when: ( user.value.users_state is not defined ) or ( user.value.users_state != "ignore" )
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        - name: Print the users to update if users_update_strategy is not set or set to all
          ansible.builtin.debug:
            msg: "User{% if users_update | length > 1 %}s{% endif %} to update: {{ users_update | join(', ') }}"

      when: ( users_update_strategy is not defined ) or ( users_update_strategy == "all" )

    - name: Check and define the users to update when update strategy is users
      block:

        - name: Include checks for when update strategy is set to users
          ansible.builtin.include_tasks: update_check_users.yml

        - name: Set users_update array for multiple users when users_update_strategy is users
          ansible.builtin.set_fact:
            users_update: "{{ users_update_users | ansible.builtin.split(',') }}"
          when: users_update_users is ansible.builtin.regex(',')

        - name: Set users_update array for one user when users_update_strategy is users
          ansible.builtin.set_fact:
            users_update:
              - "{{ users_update_users }}"
          when: users_update_users is not ansible.builtin.regex(',')

        - name: Print the specified users to update
          ansible.builtin.debug:
            msg: "User{% if users_update | length > 1 %}s{% endif %} to update: {{ users_update | join(', ') }}"

        - name: Proposed users to update state files present
          ansible.builtin.template:
            src: user_state.yml.j2
            dest: "{{ users_state_dir }}/proposed/{{ user.key }}.yml"
            mode: "0600"
            owner: root
            group: root
          check_mode: false
          when: user.key in users_update
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"
          register: users_state_file

      when:
        - users_update_strategy is defined
        - users_update_strategy == "users"

    - name: Set users to update by group
      block:

        - name: Loop through the users with additional groups
          ansible.builtin.include_tasks: users_groups.yml
          when:
            - ( user.value.users_groups is defined and user.value.users_groups != [] ) or ( user.key in users_update_groups )
            - ( user.key not in users_update ) and ( user.value.users_state != "ignore" )
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        - name: Print the users in the groups to update
          ansible.builtin.debug:
            msg: "User{% if users_update | length > 1 %}s{% endif %} to update: {{ users_update | join(', ') }}"

      when:
        - users_update_strategy == "groups"
        - users_update_groups is defined
        - users_update_groups != []

    - name: Debug users_update
      ansible.builtin.debug:
        var: users_update
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
      tags:
        - debug

    - name: Check individual user variables using meta/user_argument_specs.yml
      ansible.builtin.validate_argument_spec:
        argument_spec: "{{ lookup('ansible.builtin.file', 'meta/user_argument_specs.yml') | ansible.builtin.from_yaml }}"
        provided_arguments: "{{ user.value }}"
      loop: "{{ users | ansible.builtin.dict2items }}"
      loop_control:
        loop_var: user
        label: "{{ user.key }}"
      when: user.key in users_update

    - name: Apache ServerName and ServerAlias checks
      ansible.builtin.include_tasks: apache_check.yml
      when:
        - users_apache is defined
        - users_apache | bool
        - ( "apache2" in ansible_local.dpkg.installed )

    - name: System setup and checks
      ansible.builtin.include_tasks: system.yml

    - name: Check users config only
      block:

        - name: Run checks on users
          ansible.builtin.include_tasks: user_check.yml
          when: >-
            ( user.value.users_state is not defined ) or
            ( user.value.users_state != "absent" ) or
            ( user.value.users_state != "ignore" )
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        - name: End as checks completed
          ansible.builtin.meta: end_play

      when:
        - users_update_strategy is defined
        - users_update_strategy == "check"

    - name: Update Apache config for users present
      block:

        - name: Include Apache tasks
          ansible.builtin.include_tasks: apache.yml

        - name: Include Apache user tasks
          ansible.builtin.include_tasks: apache_user_vhosts_present.yml
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"
          when:
            - ( user.key != "root" )
            - ( user.value.users_state is defined ) and ( user.value.users_state == "present" )
            - ( user.value.users_apache_virtual_hosts is defined ) and ( user.value.users_apache_virtual_hosts | type_debug == "dict" )
            - ( user.value.users_apache_virtual_hosts_enabled is not defined ) or ( user.value.users_apache_virtual_hosts_enabled | bool )

        - name: End as Apache config updated for users present
          ansible.builtin.meta: end_play

      when:
        - users_update_strategy is defined
        - users_update_strategy == "apache"
        - users_apache is defined
        - users_apache | bool
        - ( "apache2" in ansible_local.dpkg.installed )

    - name: Update MariaDB config for users present
      block:

        - name: Include MariaDB user present tasks
          ansible.builtin.include_tasks: mariadb_user_present.yml
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"
          when:
            - user.key != "root"
            - user.value.users_state is defined
            - user.value.users_state == "present"
            - users_mariadb is defined
            - users_mariadb | bool
            - user.value.users_mariadb_databases is defined
            - user.value.users_mariadb_databases != []

        - name: End as MariaDB config updated for users present
          ansible.builtin.meta: end_play

      when:
        - users_update_strategy is defined
        - users_update_strategy == "mariadb"
        - users_mariadb is defined
        - users_mariadb | bool

    - name: Update PHP-FPM config for users present
      block:

        - name: Include PHP-FPM user config tasks
          ansible.builtin.include_tasks: phpfpm_user_present.yml
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"
          when:
            - user.key != "root"
            - user.value.users_groups is defined
            - ( "phpfpm" in user.value.users_groups )
            - user.value.users_state is defined
            - user.value.users_state == "present"

        - name: End as PHP-FPM config updated for users present
          ansible.builtin.meta: end_play

      when:
        - users_update_strategy is defined
        - users_update_strategy == "phpfpm"
        - users_phpfpm_versions is defined
        - users_phpfpm_default_version is defined

    - name: Update SSH keys for users present
      block:

        - name: Include SSH keys tasks
          ansible.builtin.include_tasks: ssh.yml
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"
          when:
            - user.value.users_state is defined
            - user.value.users_state == "present"
            - user.value.users_ssh_public_keys is defined
            - user.value.users_ssh_public_keys != []

        - name: End as SSH keys updated for users present
          ansible.builtin.meta: end_play

      when:
        - users_update_strategy is defined
        - users_update_strategy == "sshkeys"

    - name: Update Matomo sites and users
      block:

        - name: Matomo variables are required in order for this role to configure Matomo sites and users
          ansible.builtin.assert:
            that:
              - users_matomo | bool
              - ( matomo_user is defined ) and ( matomo_user | length > 0 )
              - ( matomo_password is defined ) and ( matomo_password | length > 0 )
              - ( matomo_token_auth is defined ) and ( matomo_token_auth | length > 0 )
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Include Matomo tasks
          ansible.builtin.include_tasks: matomo.yml

        - name: End as Matomo sites and users updated
          ansible.builtin.meta: end_play

      when:
        - users_update_strategy is defined
        - users_update_strategy == "matomo"

    - name: Update quotas for users present
      block:

        - name: Quotas set for users
          ansible.builtin.include_tasks: quota.yml
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"
          when:
            - user.key != "root"
            - ( user.value.users_state is not defined ) or ( user.value.users_state == "present" )
            - ( user.value.users_quota is defined ) and ( user.value.users_quota | length > 0 )

        - name: End as quotas updated for users present
          ansible.builtin.meta: end_play

      when:
        - users_update_strategy is defined
        - users_update_strategy == "quotas"
        - users_quotaon is defined
        - users_quotaon | bool
        - quota_dir is defined

    - name: Update users tasks
      block:

        - name: Print users to update
          ansible.builtin.debug:
            var: user
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
          when:
            - ( user.key is defined ) and ( user.key in users_update )
            - ( user.value.users_state is not defined ) or ( user.value.users_state != "ignore" )
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        - name: Print users that won't be changed as their state is set to ignore
          ansible.builtin.debug:
            var: user
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
          when:
            - ( user.key is defined ) and ( user.key in users_update )
            - ( user.value.users_state is defined ) and ( user.value.users_state == "ignore" )
          tags:
            - debug

        - name: Delete users when they are set to be absent
          ansible.builtin.include_tasks: user_absent.yml
          when:
            - ( user.key is defined ) and ( user.key in users_update )
            - ( user.value.users_state is defined ) and ( user.value.users_state == "absent" )
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        - name: Check variables for users present
          ansible.builtin.include_tasks: user_check.yml
          when:
            - ( user.key is defined ) and ( user.key in users_update )
            - ( user.value.users_state is not defined ) or ( user.value.users_state == "present" )
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        - name: User present loop
          ansible.builtin.include_tasks: user_present.yml
          when:
            - ( user.key is defined ) and ( user.key in users_update )
            - ( user.value.users_state is not defined ) or ( user.value.users_state == "present" )
          loop: "{{ users | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        # TODO This needs updating to use the Munin role https://git.coop/webarch/munin
        # - name: Munin tasks for servers with a chroot and php-fpm
        #   block:

        #     - name: Set a fact for the users who are present and in the phpfpm and chroot groups
        #       ansible.builtin.set_fact:
        #         users_in_phpfpm_and_chroot_group: "{{ users_in_phpfpm_and_chroot_group | default('') }} {{ user.key }}"
        #       when:
        #         - ( user.value.users_state is not defined ) or ( user.value.users_state == "present" )
        #         - ( user.value.users_groups is defined ) and ( user.value.users_groups != [] )
        #         - ( "phpfpm" in user.value.users_groups ) and ( "chroot" in user.value.users_groups )
        #         - user.key != "root"
        #       loop: "{{ users | dict2items }}"
        #       loop_control:
        #         loop_var: user
        #         label: "{{ user.key }}"

        #     - name: Debug the users who are present and in the phpfpm and chroot groups
        #       ansible.builtin.debug:
        #         msg: "Users in the phpfpm and chroot groups: {{ users_in_phpfpm_and_chroot_group }}"
        #         verbosity: 1
        #       when: users_in_phpfpm_and_chroot_group is defined

        #     - name: Include the munin_node phpfpm-multi tasks
        #       ansible.builtin.include_role:
        #         name: munin_node
        #         tasks_from: phpfpm_multi.yml
        #       vars:  # noqa var-naming[no-role-prefix]
        #         munin_phpfpm_users: "{{ users_in_phpfpm_and_chroot_group }}"
        #       when: ( users_in_phpfpm_and_chroot_group is defined ) and ( users_in_phpfpm_and_chroot_group != [] )

        #   when:
        #     - users_phpfpm_versions is defined
        #     - users_phpfpm_default_version is defined
        #     - ( "phpfpm" in ansible_facts.getent_group )
        #     - ( "chroot" in ansible_facts.getent_group )

      when:
        - users_update is defined
        - users_update != []

    - name: Users quota CSV file updated
      block:

        - name: Updated users quotas written and md5sum printed
          ansible.builtin.shell: |
            set -e -o pipefail
            repquota {{ quota_dir }}  --output=csv > {{ quota_dir }}/quota_user.csv
            chmod 600 {{ quota_dir }}/quota_user.csv
            md5sum {{ quota_dir }}/quota_user.csv
          args:
            executable: "{{ users_bash }}"
          register: users_repquota_md5sum_after
          check_mode: false
          changed_when: >
            ( users_repquota_md5sum_before is not defined ) or
            ( ( users_repquota_md5sum_before is defined and users_repquota_md5sum_before.stdout ) != users_repquota_md5sum_after.stdout )

        - name: Updated users quotas fetched
          ansible.builtin.fetch:
            src: "{{ quota_dir }}/quota_user.csv"
            dest: /tmp/
          check_mode: false
          when: >
            ( users_repquota_md5sum_before is not defined ) or
            ( users_repquota_md5sum_before is defined and users_repquota_md5sum_before.stdout != users_repquota_md5sum_after.stdout )

      when:
        - users_quotaon is defined
        - users_quotaon | bool
        - quota_dir is defined

    - name: List the updated users
      ansible.builtin.debug:
        msg: "Users updated: {{ users_update | join(', ') }}"
      when:
        - users_update != []
        - users_update_strategy != "sshkeys"

  tags:
    - users
...
