# Copyright 2018-2025 Chris Croome
#
# This file is part of the Webarchitects Users Ansible role.
#
# The Webarchitects Users Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Users Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Users Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: "Check Nextcloud variables for {{ vhost.key }}"
  block:

    - name: "Check that required Nextcloud variables are defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - ( vhost.value.users_apache_robots is defined ) and ( vhost.value.users_apache_robots == "deny" )
          - ( vhost.value.nextcloud_dbname is defined ) and ( vhost.value.nextcloud_dbname in user.value.users_mariadb_databases )
          - ( vhost.value.nextcloud_version is defined ) and ( vhost.value.nextcloud_version is regex("^[0-9]{2}.[0-9]{1,2}.[0-9]{1,2}$") )
          - ( vhost.value.users_apache_options is defined ) and ( "+MultiViews" in vhost.value.users_apache_options ) and ( "+SymLinksIfOwnerMatch" in vhost.value.users_apache_options )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: "Check that {{ user.key }} is in the phpfpm group if it is present"
      ansible.builtin.assert:
        that:
          - ( "phpfpm" in user.value.users_groups )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: ( "phpfpm" in ansible_facts.getent_group )

    - name: "Check that {{ user.key }} is in the phpfpm and chroot groups if they are present"
      ansible.builtin.assert:
        that:
          - ( "phpfpm" in user.value.users_groups )
          - ( "chroot" in user.value.users_groups )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: ( "phpfpm" in ansible_facts.getent_group ) and ( "chroot" in ansible_facts.getent_group )

    - name: "Check the nextcloud_url for {{ vhost.key }} VirtualHost for {{ user.key }}"
      block:

        - name: "Check that the nextcloud_url doesn't end in a slash for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.assert:
            that:
              - vhost.value.nextcloud_url is not regex("/$")
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Set a fact for the nextcloud_url without a protcol
          ansible.builtin.set_fact:
            nextcloud_url_domain: "{{ vhost.value.nextcloud_url | regex_replace('^https://') }}"

        - name: "Check that nextcloud_url domain equals the ServerName for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.assert:
            that:
              - ( nextcloud_url_domain == vhost.key )
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ( vhost.value.users_apache_server_aliases is not defined )

        - name: "Check that nextcloud_url domain contains either the ServerName or a ServerAlias for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.assert:
            that:
              - ( nextcloud_url_domain == vhost.key ) or ( nextcloud_url_domain in vhost.value.users_apache_server_aliases )
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ( vhost.value.users_apache_server_aliases is defined ) and ( vhost.value.users_apache_server_aliases[0] is defined )

      when: vhost.value.nextcloud_url is defined

    - name: "Check that the nextcloud_trusted_domains is defined and is a dictionary for {{ vhost.key }} VirtualHost for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - vhost.value.nextcloud_trusted_domains is defined
          - vhost.value.nextcloud_trusted_domains | ansible.builtin.type_debug == "dict"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: >-
          {% if vhost.value.nextcloud_trusted_domains is not defined %}The nextcloud_trusted_domains variable needs to be defined, see
          https://git.coop/webarch/nextcloud/-/blob/4904a42e9c26eb5fd7087bcda2c8a037ec81d203/defaults/main.yml#L82{% endif %}
          {% if vhost.value.nextcloud_trusted_domains | ansible.builtin.type_debug != "dict" %}The nextcloud_trusted_domains variable
          should be a dictionary, see https://git.coop/webarch/nextcloud/-/blob/4904a42e9c26eb5fd7087bcda2c8a037ec81d203/defaults/main.yml#L82{% endif %}

    - name: "Check that localhost is in the list of nextcloud_trusted_domains for {{ vhost.key }} VirtualHost for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - ("localhost" is in users_nextcloud_trusted_domains_list)
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: >-
          The localhost should be included in the nextcloud_trusted_domains dictionary, see
          https://git.coop/webarch/nextcloud/-/blob/4904a42e9c26eb5fd7087bcda2c8a037ec81d203/defaults/main.yml#L82
          currently the nextcloud_trusted_domains dictionary contains {{ users_nextcloud_trusted_domains_list | join(', ') }}
      vars:
        users_nextcloud_trusted_domains_list: "{{ vhost.value.nextcloud_trusted_domains | community.general.json_query('values(@)') }}"

    - name: "Check that the Apache ServerName is in the list of nextcloud_trusted_domains for {{ vhost.key }} VirtualHost for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - vhost.value.users_apache_server_name is in users_nextcloud_trusted_domains_list
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: >-
          The {{ vhost.value.users_apache_server_name }} domain should be included in the nextcloud_trusted_domains dictionary, see
          https://git.coop/webarch/nextcloud/-/blob/4904a42e9c26eb5fd7087bcda2c8a037ec81d203/defaults/main.yml#L82
          currently the nextcloud_trusted_domains dictionary contains {{ users_nextcloud_trusted_domains_list | join(', ') }}
      vars:
        users_nextcloud_trusted_domains_list: "{{ vhost.value.nextcloud_trusted_domains | community.general.json_query('values(@)') }}"

    - name: "Check that all the the Apache ServerAliases are in the list of nextcloud_trusted_domains for {{ vhost.key }} VirtualHost for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - users_nextcloud_apache_server_alias is in users_nextcloud_trusted_domains_list
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: >-
          The {{ vhost.value.users_apache_server_alias | join(', ') }} domains should be included in the nextcloud_trusted_domains dictionary, see
          https://git.coop/webarch/nextcloud/-/blob/4904a42e9c26eb5fd7087bcda2c8a037ec81d203/defaults/main.yml#L82
          currently the nextcloud_trusted_domains dictionary contains {{ users_nextcloud_trusted_domains_list | join(', ') }}
      vars:
        users_nextcloud_trusted_domains_list: "{{ vhost.value.nextcloud_trusted_domains | community.general.json_query('values(@)') }}"
      loop: "{{ vhost.value.users_apache_server_aliases }}"
      loop_control:
        loop_var: users_nextcloud_apache_server_alias
      when: vhost.value.users_apache_server_aliases is defined

    - name: "Check that the ONLYOFFICE domain name is in the list of nextcloud_trusted_domains for {{ vhost.key }} VirtualHost for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - vhost.value.nextcloud_onlyoffice_documentserver is in users_nextcloud_trusted_domains_list
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: >-
          The {{ vhost.value.nextcloud_onlyoffice_documentserver }} domain should be included in the nextcloud_trusted_domains dictionary, see
          https://git.coop/webarch/nextcloud/-/blob/4904a42e9c26eb5fd7087bcda2c8a037ec81d203/defaults/main.yml#L82
          currently the nextcloud_trusted_domains dictionary contains {{ users_nextcloud_trusted_domains_list | join(', ') }}
      vars:
        users_nextcloud_trusted_domains_list: "{{ vhost.value.nextcloud_trusted_domains | community.general.json_query('values(@)') }}"
      when: vhost.value.nextcloud_onlyoffice_documentserver is defined

    - name: "Check the nextcloud_title is not empty if it is defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - vhost.value.nextcloud_title | length > 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: vhost.value.nextcloud_title is defined

    - name: "Check that the nextcloud_dbuser is {{ user.key }} is defined for {{ vhost.key }} VirtualHost"
      ansible.builtin.assert:
        that:
          - vhost.value.nextcloud_dbuser == user.key
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: vhost.value.nextcloud_dbuser is defined

    - name: "Check that the nextcloud_admin_user contains only ascii letters and numbers and is between 2 and 17 characters long for {{ vhost.key }} VirtualHost for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - vhost.value.nextcloud_admin_user | length > 0
          - vhost.value.nextcloud_admin_user is regex("^[a-zA-Z0-9]*$")
          - vhost.value.nextcloud_admin_user is regex("^.{2,17}$")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: vhost.value.nextcloud_admin_user is defined

    - name: "Check that the nextcloud_admin_email is a email address for {{ vhost.key }} VirtualHost for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - vhost.value.nextcloud_admin_email is regex("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: vhost.value.nextcloud_admin_email is defined

    - name: "Check that nextcloud_autoupdate is true or false if it is defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - ( vhost.value.nextcloud_autoupdate ) or ( not vhost.value.nextcloud_autoupdate )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: vhost.value.nextcloud_autoupdate is defined

    - name: "Check that nextcloud_notify is true or false if it is defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - ( vhost.value.nextcloud_notify ) or ( not vhost.value.nextcloud_notify )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: vhost.value.nextcloud_notify is defined

    - name: "Check that nextcloud_onlyoffice_documentserver is set to an ascii domain name if defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - vhost.value.nextcloud_onlyoffice_documentserver is regex("^[a-z0-9-.]{3,60}$")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when:
        - ( vhost.value.nextcloud_onlyoffice_documentserver is defined )
        - ( vhost.value.nextcloud_onlyoffice_documentserver | length > 0 )

    - name: Valkey checks when the user is in the valkey group
      block:

        # TODO Use ansible.builtin.stat to check the socket path
        - name: "The Valkey / Redis host is a IPv4 address or socket path for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.assert:
            that: >-
              ( vhost.value.nextcloud_redis_host | ansible.utils.ipaddr | bool ) or
              ( vhost.value.nextcloud_redis_host is ansible.builtin.regex('^\/.*[.]sock$') )
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: vhost.value.nextcloud_redis_host is defined

        # TODO Use community.general.listen_ports_facts module to check the port
        - name: "The Valkey / Redis port is a 1 to 5 digit number for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.assert:
            that:
              - vhost.value.nextcloud_redis_port is ansible.builtin.regex('^[0-9]{1,5}$')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: vhost.value.nextcloud_redis_port is defined

        - name: "The Valkey / Redis password is required for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.assert:
            that:
              - vhost.value.nextcloud_redis_password is defined
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        # TODO Check that the service is running
        # - name: "The Valkey / Redis service name is required when notify_push is enabled for {{ vhost.key }} VirtualHost for {{ user.key }}"
        #   ansible.builtin.assert:
        #     that:
        #       - vhost.value.nextcloud_redis_service is defined
        #     quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        #   when: ( "notify_push" in vhost.value.nextcloud_app_enable )

      when: ( "valkey" in user.value.users_groups )

  tags:
    - users
...
