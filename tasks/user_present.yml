---
- name: "User present tasks for {{ user.key }}"
  block:

    - name: "User groups present for {{ user.key }}"
      include_tasks: groups.yml
      when:
        - ( user.value.users_groups is defined ) and ( user.value.users_groups != [] )

    - name: "User group present for {{ user.key }}"
      group:
        name: "{{ user.key }}"
        state: present

    - name: "Users group members present for {{ user.key }}"
      include: group_members.yml
      when: ( user.value.users_group_members is defined ) and ( user.value.users_group_members != [] )

    - name: Get all groups
      getent:
        database: group
        split: ':'

    - name: "User account present for {{ user.key }}"
      include_tasks: user.yml

    - name: "MariaDB accounts and databases created and passwords read or set for {{ user.key }}"
      include_tasks: mariadb_user_present.yml
      when:
        - user.key != "root"
        - ( users_mariadb is defined ) and ( users_mariadb == True )
        - ( user.value.users_mariadb_databases is defined ) and ( user.value.users_mariadb_databases != [] )

    - name: "Quotas set for {{ user.key }}"
      include_tasks: quota.yml
      when:
        - user.key != "root"
        - quota_dir is defined
        - user.value.users_quota is defined
        - user.value.users_quota != ""

    - name: "Set passwds and notify user {{ user.key }}"
      include_tasks: notify_passwd.yml
      when:
        - user.key != "root"
        - user.value.users_notify_passwd is defined
        - user.value.users_notify_passwd == True
        - user.value.users_email is defined
        - user.value.users_email != ""

    - name: "Crontab present for non-root and non-sudo user {{ user.key }}"
      include_tasks: crontab_user_present.yml
      when:
        - ( user.key != "root" )
        - ( user.value.users_groups is defined ) and ( "sudo" not in user.value.users_groups )
        - ( users_cron is defined ) and ( users_cron == True )

    - name: "Create or remove a .forward file for {{ user.key }}"
      block:

        - name: "Email address for user absent so no .forward for {{ user.key }}"
          file:
            path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.forward"
            state: absent
          when: ( users_forward == False ) or ( user.value.users_email is not defined or user.value.users_email == "" )

        - name: "Email address in .forward for {{ user.key }}"
          template:
            src: forward.j2
            dest: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.forward"
            owner: "{{ user.key }}"
            group: "{{ user.value.users_group | default(user.key) }}"
          when: ( users_forward == True ) and ( user.value.users_email is defined and user.value.users_email != "" )

      when: users_forward is defined

    - name: "Create a .muttrc for {{ user.key }} user if it doesn't exist"
      template:
        src: muttrc.j2
        dest: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.muttrc"
        force: false
        owner: "{{ user.key }}"
        group: "{{ user.value.users_group | default(user.key) }}"
        mode: 0644
      when:
        - ( user.value.users_system is not defined ) or ( user.value.users_system is defined and not user.value.users_system )
        - ( users_muttrc is defined ) and ( users_muttrc == True )

    - name: "Include the chroot present users tasks for {{ user.key }}"
      include_tasks: chroot_user_present.yml
      when:
        - ( user.key != "root" )
        - ( users_chroot is defined ) and ( users_chroot == True )
        - ( users_chroot_dir is defined ) and ( users_chroot_dir.stat.exists )
        - ( user.value.users_groups is defined ) and ( "chroot" in user.value.users_groups )

    - name: "Include the PHP FPM user present tasks for {{ user.key }}"
      include_tasks: phpfpm_user_present.yml
      when:
        - ( user.key != "root" )
        - ( users_phpfpm_version is defined ) and ( users_phpfpm_version != "" )
        - ( user.value.users_groups is defined ) and ( "phpfpm" in user.value.users_groups )

    - name: "Matomo login account tasks for {{ user.key }}"
      block:

        - name: "Check if the Matomo {{ matomo_user }} system user account exists"
          shell: "id {{ matomo_user }} && echo true || echo false"
          check_mode: false
          register: user_matomo_user_check
          changed_when: '"no such user" in user_matomo_user_check.stderr'

        - name: "Matomo user login account tasks for {{ user.key }}"
          block:

            - name: Check if Matomo config file exists
              stat:
                path: "{{ matomo_html }}/config/config.ini.php"
              check_mode: false
              register: user_matomo_config

            - name: Include Matomo version check tasks
              include_role:
                name: matomo
                tasks_from: check_version.yml
              when: user_matomo_config.stat.exists

            - name: Check if Matomo is installed using ExtraTools
              command: php console config:get -s database --no-ansi -n
              args:
                chdir: "{{ matomo_html }}"
              register: user_matomo_config_database
              become: true
              become_user: "{{ matomo_user }}"
              when:
                - ( user_matomo_config.stat.exists ) and ( matomo_extratools_enabled )
                - ( not matomo_token_auth is defined ) or ( matomo_token_auth | length == 0 )

            - name: Check if Matomo is installed using the API
              uri:
                url: "{{ matomo_url }}"
                method: POST
                body_format: form-urlencoded
                body:
                  module: API
                  format: JSON
                  token_auth: "{{ matomo_token_auth }}"
                  method: API.getMatomoVersion
                return_content: true
              register: users_matomo_get_matomo_version
              when:
                - ( matomo_token_auth is defined ) and ( matomo_token_auth | length > 0 )
                - ( not user_matomo_config.stat.exists ) or ( not matomo_extratools_enabled )

            - name: "Matomo accounts for user {{ user.key }} present"
              include_tasks: matomo_user_present.yml
              when:
                - ( user_matomo_config.stat.exists )
                - ( "Looks like section database does not exist" not in user_matomo_config_database.stdout_lines )

          when: ( user_matomo_user_check is defined ) and ( "no such user" not in user_matomo_user_check.stderr )

      when: ( user.key != "root" ) and ( matomo_user is defined ) and ( matomo_user != "" )

    - name: "Include Apache config tasks present for user {{ user.key }}"
      include_tasks: apache_user_present.yml
      when:
        - ( user.key != "root" ) and ( "apache2" in ansible_facts.packages )
        - ( users_apache is defined ) and ( users_apache == True )
        - ( user.value.users_apache_virtual_hosts is defined )

    - name: Users state files updated
      include_tasks: user_updated.yml

  tags:
    - users
...
