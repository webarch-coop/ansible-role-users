# Copyright 2018-2024 Chris Croome
#
# This file is part of the Webarchitects Users Ansible role.
#
# The Webarchitects Users Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Users Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Users Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: "User present tasks for {{ user.key }}"
  block:

    - name: "User groups present for {{ user.key }}"
      ansible.builtin.include_tasks: groups.yml
      when:
        - ( user.value.users_groups is defined ) and ( user.value.users_groups != [] )

    - name: "User group present for {{ user.key }}"
      ansible.builtin.group:
        name: "{{ user.key }}"
        state: present

    - name: "Users group members present for {{ user.key }}"
      ansible.builtin.include_tasks: group_members.yml
      when: ( user.value.users_group_members is defined ) and ( user.value.users_group_members != [] )

    - name: Get all groups
      ansible.builtin.getent:
        database: group
        split: ':'

    - name: "User account present for {{ user.key }}"
      ansible.builtin.include_tasks: user.yml

    - name: "MariaDB accounts and databases created and passwords read or set for {{ user.key }}"
      ansible.builtin.include_tasks: mariadb_user_present.yml
      when:
        - user.key != "root"
        - ( users_mariadb is defined ) and ( users_mariadb )
        - ( user.value.users_mariadb_databases is defined ) and ( user.value.users_mariadb_databases != [] )

    - name: Debug quota settings
      ansible.builtin.debug:
        msg:
          - "quota_dir: {{ quota_dir }}"
          - "users_quotaon: {{ users_quotaon }}"
          - "user.value.users_quota: {{ user.value.users_quota }}"
        verbosity: 2
      when:
        - quota_dir is defined
        - users_quotaon is defined
        - user.value.users_quota is defined

    - name: "Quotas set for {{ user.key }}"
      ansible.builtin.include_tasks: quota.yml
      when:
        - user.key != "root"
        - quota_dir is defined
        - users_quotaon is defined and users_quotaon
        - user.value.users_quota is defined
        - user.value.users_quota | length > 0

    - name: "Set passwds and notify user {{ user.key }}"
      ansible.builtin.include_tasks: notify_passwd.yml
      when:
        - user.key != "root"
        - user.value.users_notify_passwd is defined
        - user.value.users_notify_passwd
        - user.value.users_email is defined
        - user.value.users_email | length > 0

    - name: "Crontab tasks present for user {{ user.key }}"
      ansible.builtin.include_tasks: crontab_user_present.yml
      when:
        # - ( user.key != "root" )
        # - ( user.value.users_groups is defined ) and ( "sudo" not in user.value.users_groups )
        - ( users_cron is defined ) and ( users_cron )
        - ( user.value.users_email is defined ) and ( user.value.users_email | length > 0 )

    - name: "Crontab tasks absent for user {{ user.key }} as they have no email address"
      ansible.builtin.include_tasks: crontab_user_absent.yml
      when: ( user.value.users_email is not defined ) or ( user.value.users_email | length == 0 )

    - name: "Create or remove a .forward file for {{ user.key }}"
      block:

        - name: "Email address for user absent so no .forward for {{ user.key }}"
          ansible.builtin.file:
            path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.forward"
            state: absent
          when: ( not users_forward ) or ( user.value.users_email is not defined or user.value.users_email | length == 0 )

        - name: "Email address in .forward for {{ user.key }}"
          ansible.builtin.template:
            src: forward.j2
            dest: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.forward"
            mode: "0640"
            owner: "{{ user.key }}"
            group: "{{ user.value.users_group | default(user.key) }}"
          when: ( users_forward ) and ( user.value.users_email is defined and user.value.users_email | length > 0 )

      when: users_forward is defined

    - name: "Create a .muttrc for {{ user.key }} user if it doesn't exist"
      ansible.builtin.template:
        src: muttrc.j2
        dest: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.muttrc"
        force: false
        owner: "{{ user.key }}"
        group: "{{ user.value.users_group | default(user.key) }}"
        mode: "0644"
      when:
        - ( user.value.users_system is not defined ) or ( user.value.users_system is defined and not user.value.users_system | bool )
        - ( users_muttrc is defined ) and ( users_muttrc | bool )

    - name: "Include the chroot present users tasks for {{ user.key }}"
      ansible.builtin.include_tasks: chroot_user_present.yml
      when:
        - ( user.key != "root" )
        - ( users_chroot is defined ) and ( users_chroot )
        - ( users_chroot_dir is defined ) and ( users_chroot_dir_check.stat.exists )
        - ( user.value.users_groups is defined ) and ( "chroot" in user.value.users_groups )

    - name: "Include the PHP FPM user present tasks for {{ user.key }}"
      ansible.builtin.include_tasks: phpfpm_user_present.yml
      when:
        - ( user.key != "root" )
        - ( user.value.users_groups is defined ) and ( "phpfpm" in user.value.users_groups )

    - name: "Matomo login account tasks for {{ user.key }}"
      block:

        - name: Get all users
          ansible.builtin.getent:
            database: passwd
            split: ':'

        - name: When the Matomo user is present check if a Matomo config file exists
          block:

            - name: "Stat {{ matomo_html }}/config/config.ini.php"
              ansible.builtin.stat:
                path: "{{ matomo_html }}/config/config.ini.php"
              check_mode: false
              register: user_matomo_config

            - name: "Matomo user login account tasks for {{ user.key }}"
              block:

                - name: Set a fact for the Matomo users PHP version
                  ansible.builtin.set_fact:
                    users_matomo_php_version: "{{ users | community.general.json_query(users_matomo_php_version_jpq) | string }}"
                  vars:
                    users_matomo_php_version_jpq: '["{{ matomo_user }}"]|[0].users_phpfpm_version'

                - name: Check that the Matomo users PHP version is available
                  ansible.builtin.assert:
                    that:
                      - users_matomo_php_version is regex('^[0-9]{1,2}[.][0-9]{1,2}$')
                      - users_matomo_php_version in users_phpfpm_versions
                    quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

                - name: Include Matomo version check tasks
                  ansible.builtin.include_role:
                    name: matomo
                    tasks_from: check_version.yml
                  vars:
                    matomo_php: "/usr/bin/php{{ users_matomo_php_version }}"
                  when:
                    - users_matomo_php_version is defined
                    - users_matomo_php_version is regex('^[0-9]{1,2}[.][0-9]{1,2}$')

                - name: Check the Matomo superuser access
                  block:

                    - name: Include admin user authentication checks
                      ansible.builtin.include_role:
                        name: matomo
                        tasks_from: check_auth.yml
                      vars:
                        matomo_php: "/usr/bin/php{{ users_matomo_php_version }}"

                    - name: "Matomo accounts for user {{ user.key }} present"
                      ansible.builtin.include_tasks: matomo_user_present.yml
                      when:
                        - matomo_super_user_access is defined
                        - matomo_super_user_access | bool

                  when:
                    - matomo_installed is defined
                    - matomo_installed is version('3.14.1', '>=')
                    - users_matomo_php_version is defined
                    - users_matomo_php_version is regex('^[0-9]{1,2}[.][0-9]{1,2}$')

              when: user_matomo_config.stat.exists | bool

          when: matomo_user in getent_passwd.keys()

      when:
        - ( user.key != "root" )
        - ( user.value.users_matomo_account is defined ) and ( user.value.users_matomo_account )
        - ( user.value.users_email is defined )
        - ( matomo_user is defined ) and ( matomo_user | length > 0 )
        - ( matomo_password is defined ) and ( matomo_password | length > 0 )
        - ( matomo_token_auth is defined ) and ( matomo_token_auth | length > 0 )

    - name: "Include Apache config tasks present for user {{ user.key }}"
      ansible.builtin.include_tasks: apache_user_present.yml
      when:
        - ( user.key != "root" ) and ( "apache2" in ansible_facts.packages )
        - ( users_apache is defined ) and ( users_apache )
        - ( user.value.users_apache_virtual_hosts is defined )

    - name: "Include daily script tasks for {{ user.key }}"
      ansible.builtin.include_tasks: user_scripts.yml

    - name: "User state files updated for {{ user.key }}"
      ansible.builtin.include_tasks: user_updated.yml

  tags:
    - users
...
