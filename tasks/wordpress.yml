---
- debug:
    msg: "WordPress install dir: {{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"

- debug:
    msg: "First DB name: {{ item.value.users_mariadb_databases[0] }}"

# - name: "Check if WordPress in installed in {{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
#   command: wp core is-installed
#   args:
#     chdir: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
#   become_user: "{{ item.key }}"

- name: "Stat {{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}/index.php"
  stat:
    path: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}/index.php"
  register: users_wp_index

- name: "Stat {{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}/wp-config.php"
  stat:
    path: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}/wp-config.php"
  register: users_wp_config

- block:

    - name: "Download WordPress to {{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      command: wp core download
      args:
        chdir: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      become_user: "{{ item.key }}"
      when: users_wp_index.stat.exists == False

    - name: "MariaDB password read from {{ item.value.users_home | default('/home/' + item.key) }}/.my.cnf"
      shell: "my_print_defaults --defaults-file='{{ item.value.users_home | default('/home/' + item.key) }}/.my.cnf' client | grep '^--password' | sed -e 's/--password=//'"
      changed_when: false
      register: users_mariadb_password_read

    - name: Set fact for the database password
      set_fact:
        users_wp_dbpass: "{{ users_mariadb_password_read.stdout | trim | quote }}"

    - name: Set fact for the database name
      set_fact:
        users_wp_dbname: "{{ vhost.value.users_wp_dbname }}"
      when: ( vhost.value.users_wp_dbname is defined ) and ( vhost.value.users_wp_dbname == "" )

    - name: Set fact for the database name
      set_fact:
        users_wp_dbname: "{{ item.value.users_mariadb_databases[0] }}"
      when: ( vhost.value.users_wp_dbname is not defined ) or ( vhost.value.users_wp_dbname == "" )

    - name: Set facts
      set_fact:
        users_wp_dbprefix: "{{ vhost.value.users_wp_prefix | default('wp_') }}"
        users_wp_locale: "{{ vhost.value.users_wp_locale | default('en_GB') }}"

    - name: "Configure WordPress in {{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      command: "wp config create --dbname='{{ users_wp_dbname }}' --dbuser='{{ item.key }}' --dbpass='{{ users_wp_dbpass }}' --dbprefix='{{ users_wp_dbprefix }}' --locale='{{ users_wp_locale }}'"
      args:
        chdir: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      become_user: "{{ item.key }}"
      when: users_wp_config.stat.exists == False

    - name: Set fact for WordPress URL
      set_fact:
        users_wp_url: "{{ vhost.value.users_wp_url }}"
      when: ( vhost.value.users_wp_url is defined ) and ( vhost.value.users_wp_url != "" )

    # This will need updating for HTTPS when that is implemented
    - name: Set fact for WordPress URL
      set_fact:
        users_wp_url: "http://{{ vhost.value.users_apache_server_name }}"
      when: ( vhost.value.users_wp_url is not defined ) or ( vhost.value.users_wp_url == "" )

    - name: Set fact for WordPress title
      set_fact:
        users_wp_title: "{{ vhost.value.users_wp_title }}"
      when: ( vhost.value.users_wp_title is defined ) and ( vhost.value.users_wp_title != "" )

    - name: Set fact for WordPress title
      set_fact:
        users_wp_title: "{{ vhost.value.users_apache_server_name }}"
      when: ( vhost.value.users_wp_title is not defined ) or ( vhost.value.users_wp_title == "" )

    - name: Set fact for WordPress admin username
      set_fact:
        users_wp_admin_user: "{{ vhost.value.users_wp_admin_user }}"
      when: ( vhost.value.users_wp_admin_user is defined ) and ( vhost.value.users_wp_admin_user != "" )

    - name: Set fact for WordPress admin username
      set_fact:
        users_wp_admin_user: "{{ item.key }}"
      when: ( vhost.value.users_wp_admin_user is not defined ) or ( vhost.value.users_wp_admin_user == "" )

    - name: Set fact for WordPress admin email
      set_fact:
        users_wp_admin_email: "{{ vhost.value.users_wp_admin_email }}"
      when: ( vhost.value.users_wp_admin_email is defined ) and ( vhost.value.users_wp_admin_email != "" )

    - name: Set fact for WordPress admin email
      set_fact:
        users_wp_admin_email: "{{ item.value.users_email }}"
      when: ( vhost.value.users_wp_admin_email is not defined ) or ( vhost.value.users_wp_admin_email == "" )

    - name: Set a fact for the admin password
      set_fact:
        users_wp_admin_password: "{{ vhost.value.users_wp_admin_password }}"
      when: ( vhost.value.users_wp_admin_password is defined ) and ( vhost.value.users_wp_admin_password != "" )

    - block:

        - name: Generate a random string for WordPress admin password if one is not set
          command: pwgen -n 20 1
          register: users_wp_admin_password_gen

        - name: Set a variable with the random password
          set_fact:
            users_wp_admin_password: "{{ users_wp_admin_password_gen.stdout }}"

      when: ( vhost.value.users_wp_admin_password is not defined ) or ( vhost.value.users_wp_admin_password == "" )

    - name: "Install WordPress in {{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      command: "wp core install --url='{{ users_wp_url }}' --title='{{ users_wp_title }}' --admin_name='{{ users_wp_admin_user }}' --admin_email='{{ users_wp_admin_email }}' --admin_password='{{ users_wp_admin_password }}' --skip-email"
      args:
        chdir: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      become_user: "{{ item.key }}"
      when: users_wp_config.stat.exists == False

    - name: "Password notification email sent to {{ users_wp_admin_email }}" 
      mail:
        from: "{{ users_notify_passwd_from | default('Webarchitects') }} <root@{{ ansible_fqdn }}>"
        to: "{{ users_wp_admin_email }}"
        subject: "[{{ users_passwd_notify_subject_tag | default('webarchitects') }}] WordPress admin login for {{ users_wp_url }}"
        body: "{{ lookup('template', 'templates/notify_passwd_wordpress.j2') }}" 
        host: localhost
        port: 25
        secure: never

    - name: WP-CLI config file in place for .htaccess generation
      copy:
        src: files/wp-cli.local.yml
        dest: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}/wp-cli.local.yml"
        owner: "{{ item.key }}"
        group: "{{ item.key }}"
        mode: 0640

    - name: Nice URLs for WordPress
      command: wp rewrite structure '/%year%/%monthnum%/%postname%' --hard
      args:
        chdir: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      become_user: "{{ item.key }}"

    - name: WP-CLI config file absent 
      file:
        path: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}/wp-cli.local.yml"
        state: absent

    - name: GB english installed
      command: wp core language install en_GB
      args:
        chdir: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      become_user: "{{ item.key }}"

    - name: GB english activated
      command: wp core language activate en_GB
      args:
        chdir: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      become_user: "{{ item.key }}"

    - name: Plugin wp-fail2ban installed
      command: wp plugin install wp-fail2ban
      args:
        chdir: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      become_user: "{{ item.key }}"

    - name: Plugin wp-fail2ban activated
      command: wp plugin activate wp-fail2ban
      args:
        chdir: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      become_user: "{{ item.key }}"

    - name: Plugin wp-piwik installed
      command: wp plugin install wp-piwik
      args:
        chdir: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      become_user: "{{ item.key }}"

    - name: Plugin wp-piwik activated
      command: wp plugin activate wp-piwik
      args:
        chdir: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      become_user: "{{ item.key }}"

      # wp option update wp-piwik_global-piwik_url "$PIWIK_URL"
      # wp option update wp-piwik-site_id "$PIWIK_SITE_ID"
      # wp option update wp-piwik_global-piwik_user "$PIWIK_USER"
      # wp option update wp-piwik_global-piwik_token "$PIWIK_USER_TA"
      # wp option update wp-piwik_global-track_mode default
      # wp option update wp-piwik_global-force_protocol https
      # wp option update wp-piwik_global-proxy_url "$PIWIK_URL"
      #
      # Send admin account details by email

  when: ( users_wp_index.stat.exists == False ) or ( users_wp_config.stat.exists == False )
