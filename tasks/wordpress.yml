---
- debug:
    msg: "WordPress install dir: {{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"

- debug:
    msg: "First DB name: {{ item.value.users_mariadb_databases[0] }}"

# - name: "Check if WordPress in installed in {{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
#   command: wp core is-installed
#   args:
#     chdir: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
#   become_user: "{{ item.key }}"

- name: "Stat {{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}/index.php"
  stat:
    path: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}/index.php"
  register: users_wp_index

- name: "Stat {{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}/wp-config.php"
  stat:
    path: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}/wp-config.php"
  register: users_wp_config

- block:

    - name: "Download WordPress to {{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      command: wp core download
      args:
        chdir: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      become_user: "{{ item.key }}"
      when: users_wp_index.stat.exists == False

    - name: "MariaDB password read from {{ item.value.users_home | default('/home/' + item.key) }}/.my.cnf"
      shell: "my_print_defaults --defaults-file='{{ item.value.users_home | default('/home/' + item.key) }}/.my.cnf' client | grep '^--password' | sed -e 's/--password=//'"
      changed_when: false
      register: users_mariadb_password_read

    - name: Set fact for the database password
      set_fact:
        # users_wp_dbname: "{% if vhost.item.users_wp_dbname is not defined %}{{ item.value.users_mariadb_databases[0] }}{% else %}{{ vhost.item.users_wp_dbname }}{% endif %}"
        users_wp_dbpass: "{{ users_mariadb_password_read.stdout | trim | quote }}"

    - name: Set fact for the database name
      set_fact:
        users_wp_dbname: "{{ item.value.users_mariadb_databases[0] }}"
      when: ( vhost.item.users_wp_dbname is not defined ) or ( vhost.item.users_wp_dbname == "" ) 

    - name: Set fact for the database name
      set_fact:
        users_wp_dbname: "{{ vhost.item.users_wp_dbname }}"
      when: ( vhost.item.users_wp_dbname is defined ) and ( vhost.item.users_wp_dbname == "" ) 

    - name: "Configure WordPress in {{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      command: "wp core config --dbname='{{ users_wp_dbname }}' --dbuser='{{ item.key }}' --dbpass='{{ users_wp_dbpass }}'"
      args:
        chdir: "{{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
      become_user: "{{ item.key }}"
      when: users_wp_config.stat.exists == False

    # - name: "Install WordPress in {{ item.value.users_home | default('/home/' + item.key) }}/sites/{{ vhost.key }}"
    #   command: wp core install --url='https://${SITENAME}' --title='${SITENAME}' --admin_name='${USERNAME}' --admin_email='${EMAIL}' --admin_password='${PASSWD_WP}'
    #
    # wp rewrite structure '/%year%/%monthnum%/%postname%' --hard
    # wp core language install en_GB
    # wp core language activate en_GB
    # wp plugin install wp-fail2ban
    # wp plugin activate wp-fail2ban
    # wp plugin install wp-piwik
    # wp plugin activate wp-piwik
    # wp option update wp-piwik_global-piwik_url "$PIWIK_URL"
    # wp option update wp-piwik-site_id "$PIWIK_SITE_ID"
    # wp option update wp-piwik_global-piwik_user "$PIWIK_USER"
    # wp option update wp-piwik_global-piwik_token "$PIWIK_USER_TA"
    # wp option update wp-piwik_global-track_mode default
    # wp option update wp-piwik_global-force_protocol https
    # wp option update wp-piwik_global-proxy_url "$PIWIK_URL"
    #                                                                                              

  when: ( users_wp_index.stat.exists == False ) or ( users_wp_config.stat.exists == False )
