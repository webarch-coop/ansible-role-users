# Copyright 2018-2025 Chris Croome
#
# This file is part of the Webarchitects Users Ansible role.
#
# The Webarchitects Users Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Users Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Users Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
# TODO Include Tasks to check Apache variables

- name: Generate Apache config and enable / disable the config and restart Apache
  block:

    - name: "Check Apache status for {{ user.key }}"
      ansible.builtin.command: service apache2 status
      check_mode: false
      changed_when: false
      register: users_apache2_status

    - name: Fail if Apache is not running
      ansible.builtin.fail:
        msg: "Apache is not running!"
      when: users_apache2_status.rc == 3

    - name: "Check if the Apache config exists for {{ user.key }}"
      ansible.builtin.stat:
        path: "/etc/apache2/sites-available/{{ user.key }}.conf"
      register: users_apache_conf_check

    - name: "As the Apache config exists create a backup of it for {{ user.key }}"
      ansible.builtin.copy:
        src: "/etc/apache2/sites-available/{{ user.key }}.conf"
        dest: "/etc/apache2/sites-available/.{{ user.key }}.conf.bak"
        remote_src: true
        mode: "0644"
        owner: root
        group: root
      when: users_apache_conf_check.stat.exists

    - name: "Apache sites-available file present for {{ user.key }}"
      ansible.builtin.template:
        src: apache.conf.j2
        dest: "/etc/apache2/sites-available/{{ user.key }}.conf"
        trim_blocks: true
        lstrip_blocks: true
        mode: "0644"
        owner: root
        group: root
      register: users_apache_conf

    - name: "Check the Apache sites-enabled symlink for {{ user.key }}"
      ansible.builtin.stat:
        path: "/etc/apache2/sites-enabled/{{ user.key }}.conf"
      register: users_apache_conf_site_enabled_symlink

    - name: Enable Apache sites, configtest and restart
      block:

        - name: "Apache sites-enabled symlink present for {{ user.key }}"
          ansible.builtin.command: "a2ensite {{ user.key }}"
          register: users_a2ensite
          changed_when: ( "already enabled" not in users_a2ensite.stdout )

        - name: "apache2ctl configtest to check /etc/apache2/sites-enabled/{{ user.key }}.conf"
          ansible.builtin.command: apache2ctl configtest
          check_mode: false
          changed_when: false
          register: users_apache2ctl_configtest

        - name: "Apache restarted for {{ user.key }}"
          ansible.builtin.systemd_service:
            name: apache2
            state: restarted
          register: users_apache_restarted
          until:
            - users_apache_restarted.status.SubState is defined
            - users_apache_restarted.status.SubState == "running"
            - users_apache_restarted.status.Result is defined
            - users_apache_restarted.status.Result == "success"
          retries: 2
          delay: 10
          when:
            - not ansible_check_mode
            - users_apache2ctl_configtest is defined
            - ( "Syntax OK" in users_apache2ctl_configtest.stderr )

      rescue:

        - name: Standard out from apache2ctl configtest
          ansible.builtin.debug:
            var: users_apache2ctl_configtest.stdout
          tags:
            - debug

        - name: Standard error from apache2ctl configtest
          ansible.builtin.debug:
            var: users_apache2ctl_configtest.stderr
          tags:
            - debug

        - name: "Apache configtest or restart failed, writing failed config to {{ users_apache_conf_broken }}"
          ansible.builtin.copy:
            src: "/etc/apache2/sites-available/{{ user.key }}.conf"
            dest: "/etc/apache2/sites-available/.{{ user.key }}.conf.broken"
            remote_src: true
            mode: "0644"
            owner: root
            group: root
          vars:
            users_apache_conf_broken: "/etc/apache2/sites-available/.{{ user.key }}.conf.broken"

        - name: "Check if a backup of the Apache config exists for {{ user.key }}"
          ansible.builtin.stat:
            path: "/etc/apache2/sites-available/.{{ user.key }}.conf.bak"
          register: users_apache_conf_backup_check

        - name: "Apache configtest or restart failed, reverting to previous config from {{ users_apache_conf_backup }}"
          ansible.builtin.copy:
            src: "/etc/apache2/sites-available/.{{ user.key }}.conf.bak"
            dest: "/etc/apache2/sites-available/{{ user.key }}.conf"
            remote_src: true
            mode: "0644"
            owner: root
            group: root
          vars:
            users_apache_conf_backup: "/etc/apache2/sites-available/.{{ user.key }}.conf.bak"
          when: users_apache_conf_backup_check.stat.exists

        - name: "Apache sites-enabled symlink absent for {{ user.key }}"
          ansible.builtin.command: "a2dissite {{ user.key }}"
          register: users_a2dissite
          changed_when: '"already enabled" not in users_a2dissite.stdout'
          when: not users_apache_conf_backup_check.stat.exists

        - name: "Apache restarted for {{ user.key }}"
          ansible.builtin.systemd_service:
            name: apache2
            state: restarted
          register: users_apache_restarted
          until:
            - users_apache_restarted.status.SubState is defined
            - users_apache_restarted.status.SubState == "running"
            - users_apache_restarted.status.Result is defined
            - users_apache_restarted.status.Result == "success"
          retries: 2
          delay: 10

        - name: "Fail as apache2ctl configtest or apache2ctl restart failed for {{ user.key }}"
          ansible.builtin.fail:
            msg: >-
              apache2ctl configtest or restart failed for {{ user.key }} and as a result changes that might prevent a restart have been reverted. The broken config is available in
              /etc/apache2/sites-available/.{{ user.key }}.conf.broken
              The configtest stderr output was {{ users_apache2ctl_configtest.stderr }}

      when: >-
        ( ( users_apache_conf.changed | bool ) or
        ( not users_apache_conf_site_enabled_symlink.stat.exists | bool ) ) and
        ( ( user.value.users_apache_virtual_hosts_enabled is not defined ) or
        ( user.value.users_apache_virtual_hosts_enabled is defined and user.value.users_apache_virtual_hosts_enabled | bool ) )

    - name: Disable Apache sites, configtest and restart
      block:

        - name: "Apache sites-enabled symlink absent for {{ user.key }}"
          ansible.builtin.command: "a2dissite {{ user.key }}"
          register: users_a2dissite
          changed_when: ( "already disabled" not in users_a2dissite.stdout )

        - name: "Apache restarted for {{ user.key }}"
          ansible.builtin.systemd_service:
            name: apache2
            state: restarted
          register: users_apache_restarted
          until:
            - users_apache_restarted.status.SubState is defined
            - users_apache_restarted.status.SubState == "running"
            - users_apache_restarted.status.Result is defined
            - users_apache_restarted.status.Result == "success"
          retries: 2
          delay: 10
          when: users_a2dissite.changed | bool

      when:
        - user.value.users_apache_virtual_hosts_enabled is defined
        - not user.value.users_apache_virtual_hosts_enabled | bool
        - users_apache_conf_site_enabled_symlink.stat.exists | bool

    - name: Cert checks for mod_md
      block:

        - name: Check check for mod_md when one cert per user
          block:

            - name: "Check if there is a mod_md certificate provisioned for {{ user.key }}"
              ansible.builtin.stat:
                path: "/etc/apache2/md/domains/{{ user.key }}.{{ inventory_hostname }}/pubcert.pem"
              register: users_apache_md_cert

            - name: Debug users_apache_md_cert
              ansible.builtin.debug:
                var: users_apache_md_cert
                verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"
              tags:
                - debug

            - name: Check and install a cert check cron job
              block:

                - name: "Check cert check for mod_md for {{ user.key }}"
                  ansible.builtin.command: "ssl-cert-check -qac /etc/apache2/md/domains/{{ user.key }}.{{ inventory_hostname }}/pubcert.pem"
                  check_mode: false
                  changed_when: false

                - name: "Cert check crontabs in place for mod_md for {{ user.key }}"
                  ansible.builtin.cron:
                    name: "Cert check for {{ user.key }}.{{ inventory_hostname }}"
                    minute: 45
                    hour: 8
                    job: "ssl-cert-check -qac /etc/apache2/md/domains/{{ user.key }}.{{ inventory_hostname }}/pubcert.pem -e 'root@localhost'"

              when: users_apache_md_cert.stat.exists | bool

          when:
            - users_cert is defined
            - users_cert == "user"

        - name: Check check for mod_md when one cert per vhost
          block:

            - name: Debug user.value.users_apache_virtual_hosts | ansible.builtin.dict2items
              ansible.builtin.debug:
                var: user.value.users_apache_virtual_hosts | ansible.builtin.dict2items
                verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}2{% else %}3{% endif %}"
              tags:
                - debug

            - name: "Check if there is a mod_md certificate provisioned for {{ user.key }}"
              ansible.builtin.stat:
                path: "/etc/apache2/md/domains/{{ vhost.value.users_apache_server_name }}/pubcert.pem"
              loop: "{{ user.value.users_apache_virtual_hosts | ansible.builtin.dict2items }}"
              loop_control:
                loop_var: vhost
                label: "{{ vhost.key }}"
              register: users_apache_md_cert_paths

            - name: Debug users_apache_md_cert
              ansible.builtin.debug:
                var: users_apache_md_cert_paths
                verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"
              tags:
                - debug

            - name: "Set a fact for the paths of the mod_md certificates that exist for {{ user.key }}"
              ansible.builtin.set_fact:
                users_apache_md_cert_paths_existing: >-
                  {{- users_apache_md_cert_paths |
                  community.general.json_query('results[?stat.exists].stat.path') -}}

            - name: Debug users_apache_md_cert_paths_existing
              ansible.builtin.debug:
                var: users_apache_md_cert_paths_existing
                verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
              tags:
                - debug

            - name: Check and install a cert check cron job(s)
              block:

                - name: "Check cert check command for {{ user.key }}"
                  ansible.builtin.command: "ssl-cert-check -qac {{ users_apache_md_cert_path }} -e 'root@localhost'"
                  vars:
                    users_apache_md_cert_path: "/etc/apache2/md/domains/{{ vhost.value.users_apache_server_name }}/pubcert.pem"
                  when: users_apache_md_cert_path in users_apache_md_cert_paths_existing
                  loop: "{{ user.value.users_apache_virtual_hosts | ansible.builtin.dict2items }}"
                  loop_control:
                    loop_var: vhost
                    label: "{{ vhost.key }}"
                  check_mode: false
                  changed_when: false

                - name: "Cert check crontab in place for mod_md for {{ user.key }}"
                  ansible.builtin.cron:
                    name: "Cert check for {{ vhost.value.users_apache_server_name }}"
                    minute: 45
                    hour: 8
                    job: "ssl-cert-check -qac {{ users_apache_md_cert_path }} -e 'root@localhost'"
                  vars:
                    users_apache_md_cert_path: "/etc/apache2/md/domains/{{ vhost.value.users_apache_server_name }}/pubcert.pem"
                  when: users_apache_md_cert_path in users_apache_md_cert_paths_existing
                  loop: "{{ user.value.users_apache_virtual_hosts | ansible.builtin.dict2items }}"
                  loop_control:
                    loop_var: vhost
                    label: "{{ vhost.key }}"

              when: users_apache_md_cert_paths_existing != []

          when:
            - users_cert is defined
            - users_cert == "vhost"

      when:
        - users_apache_modules_loaded is defined
        - ( "md" in users_apache_modules_loaded )

  tags:
    - users
...
