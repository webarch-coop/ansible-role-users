# Copyright 2018-2025 Chris Croome
#
# This file is part of the Webarchitects Users Ansible role.
#
# The Webarchitects Users Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Users Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Users Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: System checks
  block:

    - name: Packages present
      ansible.builtin.apt:
        pkg:
          - bash-completion
          - bc
          - bind9-dnsutils
          - curl
          - dos2unix
          - jq
          - mutt
          - python3-dnspython
          - python3-passlib
          - pwgen
          - quota
          - slay
          - texlive
          - vim
          - whois
        state: present
        update_cache: true
        cache_valid_time: 300
      register: users_pkgs_installed

    - name: Include apt role local fact tasks if variables are not defined
      ansible.builtin.include_role:
        name: apt
        tasks_from: local_facts.yml
      when: >-
        ( users_pkgs_installed.changed | bool ) or
        ( ( ansible_local.dpkg.arch is not defined ) or
        ( ansible_local.gpg.version is not defined ) or
        ( ansible_local.bash.path is not defined ) or
        ( ansible_local.sh.path is not defined ) )

    - name: Slurp /etc/shells
      ansible.builtin.slurp:
        src: /etc/shells
      check_mode: false
      changed_when: false
      register: users_shells_b64encoded

    - name: Set array for available shells inc /bin/false and /usr/sbin/nologin
      ansible.builtin.set_fact:
        users_shells: "{{ users_all_shells.split('\n') | reject('ansible.builtin.regex', '^[#]')
          | reject('ansible.builtin.regex', '^$') + [ '/bin/false', '/usr/sbin/nologin' ] | sort }}"
      vars:
        users_all_shells: "{{ users_shells_b64encoded['content'] | ansible.builtin.b64decode }}"

    - name: Set a fact for the path to Bash
      ansible.builtin.set_fact:
        users_bash: "{{ ansible_local.bash.path }}"

    - name: Print available shells and the path for Bash
      ansible.builtin.debug:
        msg:
          - "Available shells: {{ users_shells | join(' ') }}"
          - "Path to Bash: {{ users_bash }}"
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"

    - name: Get all groups
      ansible.builtin.getent:
        database: group
        split: ':'

    - name: Debug ansible_facts.getent_group
      ansible.builtin.debug:
        var: ansible_facts.getent_group
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"

    - name: Get all users
      ansible.builtin.getent:
        database: passwd
        split: ':'

    - name: Debug ansible_facts.getent_passwd
      ansible.builtin.debug:
        var: ansible_facts.getent_passwd
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"

    - name: Set a fact for the Debian version
      ansible.builtin.set_fact:
        users_debian_version: "{{ ansible_facts.distribution_release }}"

    - name: Load package information as facts
      ansible.builtin.package_facts:
        manager: apt

    - name: Include Apache tasks
      ansible.builtin.include_tasks: apache.yml
      when:
        - ( "apache2" in ansible_local.dpkg.installed )
        - ( users_apache is defined ) and ( users_apache | bool )

    - name: Include MariaDB tasks
      ansible.builtin.include_tasks: mariadb.yml
      when:
        - ( "mariadb-server" in ansible_local.dpkg.installed )
        - ( users_mariadb is defined ) and ( users_mariadb | bool )

    - name: Include Valkey checks when one for more users are in the valkey group
      ansible.builtin.include_tasks: valkey.yml
      when: ( "valkey" in users | community.general.json_query('*.users_groups[]') )

    - name: Include PHP-FPM tasks
      ansible.builtin.include_tasks: phpfpm.yml
      when: ( users_phpfpm is defined ) and ( users_phpfpm | bool )

    - name: Chroot directory check tasks
      block:

        - name: Check if a chroot exists
          ansible.builtin.stat:
            path: "{{ users_chroot_dir }}"
          register: users_chroot_dir_check
          # when: ( users_chroot_dir is defined ) and ( users_chroot_dir | length > 0 )

        - name: "The {{ users_chroot_dir }} directory needs to exist when users_chroot is True"
          ansible.builtin.assert:
            that:
              - users_chroot_dir_check.stat.exists

        - name: Check if a parent directory for the chroot mount points exists
          ansible.builtin.stat:
            path: "{{ users_chroot_users_dir }}"
          register: users_chroot_users_dir_check
          # when: ( users_chroot_users_dir is defined ) and ( users_chroot_users_dir | length > 0 )

        - name: Parent directory for the chroot mount points present
          ansible.builtin.file:
            path: "{{ users_chroot_users_dir }}"
            state: directory
            mode: "0755"
            owner: root
            group: root
          when: not users_chroot_users_dir_check.stat.exists | bool

        - name: Include Valkey chroot tasks when one for more users are in the valkey group
          ansible.builtin.include_tasks: valkey_chroot.yml
          when: ( "valkey" in users | community.general.json_query('*.users_groups[]') )

      when: ( users_chroot is defined ) and ( users_chroot | bool )

    - name: Quota tasks
      block:

        - name: "Touch {{ quota_dir }}/quota_user.csv"
          ansible.builtin.file:
            path: "{{ quota_dir }}/quota_user.csv"
            state: touch
            mode: "0600"
            access_time: preserve
            modification_time: preserve
          check_mode: false
          changed_when: false

        - name: "Get the md5sum of {{ quota_dir }}/quota_user.csv"
          ansible.builtin.command: "md5sum {{ quota_dir }}/quota_user.csv"
          check_mode: false
          changed_when: false
          register: users_repquota_md5sum_before

        - name: "Users quotas written to {{ quota_dir }}/quota_user.csv and md5sum printed"
          ansible.builtin.shell: |
            set -e -o pipefail
            repquota {{ quota_dir }}  --output=csv > {{ quota_dir }}/quota_user.csv
            chmod 600 {{ quota_dir }}/quota_user.csv
            md5sum {{ quota_dir }}/quota_user.csv
          args:
            chdir: "{{ quota_dir | dirname }}"
            executable: "{{ users_bash }}"
          check_mode: false
          register: users_repquota_md5sum_after
          changed_when: users_repquota_md5sum_before.stdout != users_repquota_md5sum_after.stdout

        - name: Users quotas fetched
          ansible.builtin.fetch:
            src: "{{ quota_dir }}/quota_user.csv"
            dest: /tmp/
          check_mode: false

      when: ( users_quotaon is defined ) and ( users_quotaon | bool ) and ( quota_dir is defined )

    # These tasks have been moved to the users.yml file
    #
    # - name: Directories for users state files present
    #   ansible.builtin.file:
    #     path: "{{ users_state_dir }}/{{ dir }}"
    #     state: directory
    #     mode: "0700"
    #     owner: root
    #     group: root
    #   loop:
    #     - current
    #     - previous
    #     - proposed
    #   loop_control:
    #     loop_var: dir

    # - name: Proposed users state files present
    #   ansible.builtin.template:
    #     src: user_state.yml.j2
    #     dest: "{{ users_state_dir }}/proposed/{{ user.key }}.yml"
    #     mode: "0600"
    #     owner: root
    #     group: root
    #   check_mode: false
    #   register: users_state_file
    #   loop: "{{ users | ansible.builtin.dict2items }}"
    #   loop_control:
    #     loop_var: user
    #     label: "{{ user.key }}"

  tags:
    - users
...
