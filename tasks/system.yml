---
- name: System checks
  block:

    - name: Check which shells are present
      slurp:
        src: /etc/shells
      check_mode: false
      changed_when: false
      register: users_shells_b64encoded

    - name: Array set for shells
      set_fact:
        users_shells: "{{ users_shells | default([]) }} + [ '{{ shell }}' ]"
      when: shell is not regex('^#')
      loop: "{{ ( users_shells_b64encoded['content'] | b64decode ).split('\n') | list }}"
      loop_control:
        loop_var: shell
        label: "{{ shell }}"

    - name: Print available shells
      debug:
        msg: "Available shells: {{ users_shells }}"
        verbosity: 2

    - name: Get all groups
      getent:
        database: group
        split: ':'

    - debug:
        var: getent_group
        verbosity: 2

    - name: Get all users
      getent:
        database: passwd
        split: ':'

    - debug:
        var: getent_passwd
        verbosity: 2

    - name: Set a fact for the Debian version
      set_fact:
        users_debian_version: "{{ ansible_distribution_release }}"

    - name: Load package information as facts
      package_facts:
        manager: apt

    - name: Fail if ansible_facts.packages is not defined or empty
      fail:
        msg: The package_facts array is empty, this could be a result of the Ansible 2.8.x bug https://github.com/ansible/ansible/issues/56921
      when: ( ansible_facts.packages is not defined ) or ( ansible_facts.packages == [] )

    - name: PHP FPM checks and tasks
      block:

        - name: Check that php-fpm is installed
          assert:
            that:
              - ( "php-fpm" in ansible_facts.packages )

        - name: Query the version of PHP using phpquery -V
          command: phpquery -V
          args:
            strip_empty_ends: true
          check_mode: false
          changed_when: false
          register: users_phpquery
          failed_when: >
            ( users_phpquery.stdout_lines | count > 1 ) or
            ( users_phpquery.stdout is not version('7.0', '>=') )

        - name: Set a fact for the PHP-FPM version
          set_fact:
            users_phpfpm_version: "{{ users_phpquery.stdout | trim }}"

        - name: Fail if users_phpfpm_version is not defined
          assert:
            that:
              - users_phpfpm_version is defined
              - users_phpfpm_version is regex('^[1-9][.][1-9]$')

        - name: Legacy /etc/logrotate.d/phpfpm_users_logrotate absent
          file:
            path: /etc/logrotate.d/phpfpm_users_logrotate
            state: absent

        - name: /etc/apache2/localhost.d present
          file:
            path: /etc/apache2/localhost.d
            state: directory
            mode: 0755
            owner: root
            group: root
          when: ( "apache2" in ansible_facts.packages )

        - name: /etc/nginx/localhost.d present
          file:
            path: /etc/nginx/localhost.d
            state: directory
            mode: 0755
            owner: root
            group: root
          when: ( "nginx" in ansible_facts.packages )

      when: ( users_phpfpm is defined ) and ( users_phpfpm )

    - name: Check if a chroot exists
      stat:
        path: "{{ chroot_dir | default('/chroot') }}"
      register: users_chroot_dir
      when: ( users_chroot is defined ) and ( users_chroot )

    - name: Quota tasks
      block:

        - name: "Touch {{ quota_dir }}/quota_user.csv"
          file:
            path: "{{ quota_dir }}/quota_user.csv"
            state: touch
            access_time: preserve
            modification_time: preserve
          check_mode: false
          changed_when: false

        - name: "Get the md5sum of {{ quota_dir }}/quota_user.csv"
          command: "md5sum {{ quota_dir }}/quota_user.csv"
          register: users_repquota_md5sum_before
          check_mode: false
          changed_when: false

        - name: "Users quotas written to {{ quota_dir }}/quota_user.csv and md5sum printed"
          shell: |
            set -e -o pipefail
            repquota {{ quota_dir }}  --output=csv > {{ quota_dir }}/quota_user.csv
            chmod 600 {{ quota_dir }}/quota_user.csv
            md5sum {{ quota_dir }}/quota_user.csv
          args:
            chdir: "{{ quota_dir | dirname }}"
            executable: /usr/bin/bash
          register: users_repquota_md5sum_after
          check_mode: false
          changed_when: users_repquota_md5sum_before.stdout != users_repquota_md5sum_after.stdout

        - name: Users quotas fetched
          fetch:
            src: "{{ quota_dir }}/quota_user.csv"
            dest: /tmp/
          check_mode: false

      when: ( users_quotaon is defined ) and ( users_quotaon ) and ( quota_dir is defined )

    - name: Include Apache tasks
      include_tasks: apache.yml
      when:
        - ( "apache2" in ansible_facts.packages )
        - ( users_apache is defined ) and ( users_apache )

    - name: Directories for users state files present
      file:
        path: "{{ users_state_dir }}/{{ dir }}"
        state: directory
        mode: 0700
        owner: root
        group: root
      loop:
        - current
        - previous
        - proposed
      loop_control:
        loop_var: dir

    - name: Proposed users state files present
      template:
        src: user_state.yml.j2
        dest: "{{ users_state_dir }}/proposed/{{ user.key }}.yml"
        mode: 0600
        owner: root
        group: root
      check_mode: false
      register: users_state_file
      loop: "{{ users | dict2items }}"
      loop_control:
        loop_var: user
        label: "{{ user.key }}"

  tags:
    - users
...
