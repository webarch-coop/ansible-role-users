# Copyright 2018-2024 Chris Croome
#
# This file is part of the Webarchitects Users Ansible role.
#
# The Webarchitects Users Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Users Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Users Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: System checks
  block:

    - name: Packages present
      ansible.builtin.apt:
        pkg:
          - bash-completion
          - bc
          - bind9-dnsutils
          - curl
          - jq
          - mutt
          - python3-dnspython
          - python3-passlib
          - pwgen
          - slay
          - texlive
          - vim
          - whois
        state: present
      register: users_pkgs_installed

    - name: Include apt role local fact tasks if variables are not defined
      ansible.builtin.include_role:
        name: apt
        tasks_from: local_facts.yml
      when: >-
        ( users_pkgs_installed.changed | bool ) or
        ( ( ansible_local.dpkg.arch is not defined ) or
        ( ansible_local.gpg.version is not defined ) or
        ( ansible_local.bash.path is not defined ) )

    - name: Check which shells are present
      ansible.builtin.slurp:
        src: /etc/shells
      check_mode: false
      changed_when: false
      register: users_shells_b64encoded

    - name: Create an array for the shells including /usr/sbin/nologin
      ansible.builtin.set_fact:
        users_shells:
          - /bin/false
          - /usr/sbin/nologin

    - name: Array set for available shells
      ansible.builtin.set_fact:
        users_shells: "{{ users_shells + [shell] }}"
      when:
        - ( shell is not regex('^#') ) and ( shell | length > 0 )
      loop: "{{ ( users_shells_b64encoded['content'] | b64decode ).split('\n') | list }}"
      loop_control:
        loop_var: shell
        label: "{{ shell }}"

    - name: Set a fact for the path to Bash
      ansible.builtin.set_fact:
        users_bash: "{{ ansible_local.bash.path }}"

    - name: Print available shells and the path for Bash
      ansible.builtin.debug:
        msg:
          - "Available shells: {{ users_shells }}"
          - "Path to Bash: {{ users_bash }}"
        verbosity: 2

    - name: Get all groups
      ansible.builtin.getent:
        database: group
        split: ':'

    - name: Debug getent_group
      ansible.builtin.debug:
        var: getent_group
        verbosity: 2

    - name: Get all users
      ansible.builtin.getent:
        database: passwd
        split: ':'

    - name: Debug getent_passwd
      ansible.builtin.debug:
        var: getent_passwd
        verbosity: 2

    - name: Set a fact for the Debian version
      ansible.builtin.set_fact:
        users_debian_version: "{{ ansible_distribution_release }}"

    - name: Load package information as facts
      ansible.builtin.package_facts:
        manager: apt

    - name: Include Apache tasks
      ansible.builtin.include_tasks: apache.yml
      when:
        - ( "apache2" in ansible_local.dpkg.installed )
        - ( users_apache is defined ) and ( users_apache )

    - name: Include MariaDB tasks
      ansible.builtin.include_tasks: mariadb.yml
      when:
        - ( "mariadb-server" in ansible_local.dpkg.installed )
        - ( users_mariadb is defined ) and ( users_apache )

    - name: PHP FPM checks and tasks
      block:

        - name: Check that php-fpm is installed
          ansible.builtin.assert:
            that: >-
              ( "php5.6-fpm" in ansible_local.dpkg.installed ) or
              ( "php7.0-fpm" in ansible_local.dpkg.installed ) or
              ( "php7.1-fpm" in ansible_local.dpkg.installed ) or
              ( "php7.2-fpm" in ansible_local.dpkg.installed ) or
              ( "php7.3-fpm" in ansible_local.dpkg.installed ) or
              ( "php7.4-fpm" in ansible_local.dpkg.installed ) or
              ( "php8.0-fpm" in ansible_local.dpkg.installed ) or
              ( "php8.1-fpm" in ansible_local.dpkg.installed ) or
              ( "php8.2-fpm" in ansible_local.dpkg.installed ) or
              ( "php-fpm" in ansible_local.dpkg.installed )
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Query the version of PHP using phpquery -V
          ansible.builtin.command: phpquery -V
          args:
            strip_empty_ends: true
          check_mode: false
          changed_when: false
          register: users_phpquery

        - name: Set a fact for the PHP-FPM versions
          ansible.builtin.set_fact:
            users_phpfpm_versions: "{{ users_phpquery.stdout_lines | trim }}"

        - name: Fail if users_phpfpm_versions is not defined
          ansible.builtin.assert:
            that:
              - users_phpfpm_versions is defined
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Check the values of the list of users_phpfpm_versions
          ansible.builtin.assert:
            that:
              - users_phpfpm_ver is regex('^[0-9]{1,2}[.][0-9]$')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ users_phpfpm_versions }}"
          loop_control:
            loop_var: users_phpfpm_ver

        - name: Run update-alternatives to find the default version of PHP
          ansible.builtin.command: update-alternatives --query php
          args:
            strip_empty_ends: true
          check_mode: false
          changed_when: false
          register: apache_update_alternatives_query_php

        - name: Set a fact for the default version of PHP
          ansible.builtin.set_fact:
            users_phpfpm_update_alt_q: "{{ apache_update_alternatives_query_php.stdout | string | community.general.jc('update_alt_q') }}"
        - name: Debug PHP update-alternatives --query php | jc --update-alt-q | jp value
          ansible.builtin.debug:
            var: users_phpfpm_update_alt_q.value
            verbosity: 3

        - name: Check if the default version of PHP is a symlink
          ansible.builtin.stat:
            path: "{{ users_phpfpm_update_alt_q.value }}"
          register: users_phpfpm_update_alt_q_value_path

        - name: Debug PHP default version path
          ansible.builtin.debug:
            var: users_phpfpm_update_alt_q_value_path.stat
            verbosity: 3

        - name: Set a fact for the default version of PHP when it is a symlink
          ansible.builtin.set_fact:
            users_phpfpm_default_version: "{{ users_phpfpm_update_alt_q_value_path.stat.lnk_target | ansible.builtin.regex_replace('^php') }}"
          when: users_phpfpm_update_alt_q_value_path.stat.islnk | bool

        - name: Set a fact for the default version of PHP when it is a not symlink
          ansible.builtin.set_fact:
            users_phpfpm_default_version: "{{ users_phpfpm_update_alt_q.value | ansible.builtin.regex_replace('^/usr/bin/php') }}"
          when: not users_phpfpm_update_alt_q_value_path.stat.islnk | bool

        - name: A default PHP version is required
          ansible.builtin.assert:
            that:
              - users_phpfpm_default_version is regex('^[5-9][.][0-9]')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Debug PHP default version
          ansible.builtin.debug:
            var: users_phpfpm_default_version

        - name: Legacy /etc/logrotate.d/phpfpm_users_logrotate absent
          ansible.builtin.file:
            path: /etc/logrotate.d/phpfpm_users_logrotate
            state: absent

        - name: /etc/apache2/localhost.d present
          ansible.builtin.file:
            path: /etc/apache2/localhost.d
            state: directory
            mode: "0755"
            owner: root
            group: root
          when: ( "apache2" in ansible_local.dpkg.installed )

        - name: /etc/nginx/localhost.d present
          ansible.builtin.file:
            path: /etc/nginx/localhost.d
            state: directory
            mode: "0755"
            owner: root
            group: root
          when: ( "nginx" in ansible_local.dpkg.installed )

      when: ( users_phpfpm is defined ) and ( users_phpfpm | bool )

    - name: Chroot directory check tasks
      block:

        - name: Check if a chroot exists
          ansible.builtin.stat:
            path: "{{ users_chroot_dir }}"
          register: users_chroot_dir_check
          # when: ( users_chroot_dir is defined ) and ( users_chroot_dir | length > 0 )

        - name: "The {{ users_chroot_dir }} directory needs to exist when users_chroot is True"
          ansible.builtin.assert:
            that:
              - users_chroot_dir_check.stat.exists

        - name: Check if a parent directory for the chroot mount points exists
          ansible.builtin.stat:
            path: "{{ users_chroot_users_dir }}"
          register: users_chroot_users_dir_check
          # when: ( users_chroot_users_dir is defined ) and ( users_chroot_users_dir | length > 0 )

        - name: Parent directory for the chroot mount points present
          ansible.builtin.file:
            path: "{{ users_chroot_users_dir }}"
            state: directory
            mode: "0755"
            owner: root
            group: root
          when: not users_chroot_users_dir_check.stat.exists

      when: ( users_chroot is defined ) and ( users_chroot )

    - name: Quota tasks
      block:

        - name: "Touch {{ quota_dir }}/quota_user.csv"
          ansible.builtin.file:
            path: "{{ quota_dir }}/quota_user.csv"
            state: touch
            mode: "0600"
            access_time: preserve
            modification_time: preserve
          check_mode: false
          changed_when: false

        - name: "Get the md5sum of {{ quota_dir }}/quota_user.csv"
          ansible.builtin.command: "md5sum {{ quota_dir }}/quota_user.csv"
          register: users_repquota_md5sum_before
          check_mode: false
          changed_when: false

        - name: "Users quotas written to {{ quota_dir }}/quota_user.csv and md5sum printed"
          ansible.builtin.shell: |
            set -e -o pipefail
            repquota {{ quota_dir }}  --output=csv > {{ quota_dir }}/quota_user.csv
            chmod 600 {{ quota_dir }}/quota_user.csv
            md5sum {{ quota_dir }}/quota_user.csv
          args:
            chdir: "{{ quota_dir | dirname }}"
            executable: "{{ users_bash }}"
          register: users_repquota_md5sum_after
          check_mode: false
          changed_when: users_repquota_md5sum_before.stdout != users_repquota_md5sum_after.stdout

        - name: Users quotas fetched
          ansible.builtin.fetch:
            src: "{{ quota_dir }}/quota_user.csv"
            dest: /tmp/
          check_mode: false

      when: ( users_quotaon is defined ) and ( users_quotaon ) and ( quota_dir is defined )

    - name: Directories for users state files present
      ansible.builtin.file:
        path: "{{ users_state_dir }}/{{ dir }}"
        state: directory
        mode: "0700"
        owner: root
        group: root
      loop:
        - current
        - previous
        - proposed
      loop_control:
        loop_var: dir

    - name: Proposed users state files present
      ansible.builtin.template:
        src: user_state.yml.j2
        dest: "{{ users_state_dir }}/proposed/{{ user.key }}.yml"
        mode: "0600"
        owner: root
        group: root
      check_mode: false
      register: users_state_file
      loop: "{{ users | dict2items }}"
      loop_control:
        loop_var: user
        label: "{{ user.key }}"

  tags:
    - users
...
