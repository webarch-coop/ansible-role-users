---
- name: "Check the DocumentRoot for the {{ vhost.key }} VirtualHost for {{ user.key }} contains valid characters"
  assert:
    that:
      - vhost.key is regex("^[a-zA-Z0-9/_-]*$")
    fail_msg: "Only letters, numbers, underscores, dashes and forward slashes can be present in the DocumentRoot path"

- name: "Check that the {{ vhost.key }} VirtualHost for {{ user.key }} has a ServerName"
  assert:
    that:
      - vhost.value.users_apache_server_name is defined
      - vhost.value.users_apache_server_name | length

- name: "Check that the {{ vhost.key }} VirtualHost for {{ user.key }} has a ServerName that resolves to a IPv4 address"
  include_tasks: user_check_domain.yml
  vars:
    users_domain: "{{ vhost.value.users_apache_server_name }}"

- name: "Check ServerAlias' for {{ vhost.key }} VirtualHost for {{ user.key }}"
  block:

    - name: "Check that the ServerAlias' for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array"
      assert:
        that:
          - vhost.value.users_apache_server_aliases | length
          - vhost.value.users_apache_server_aliases[0] is defined

    - name: "Check that the {{ vhost.key }} VirtualHost for {{ user.key }} has ServerAlias' that resolve to IPv4 addresses"
      include_tasks: user_check_domain.yml
      vars:
        users_domain: "{{ domain }}"
      loop: "{{ vhost.value.users_apache_server_aliases }}"
      loop_control:
        loop_var: domain
        label: "{{ domain }}"

  when: vhost.value.users_apache_server_aliases is defined

- name: "Check that users_apache_type for {{ vhost.key }} VirtualHost for {{ user.key }} is set to php, cgi or static if it is defined"
  assert:
    that:
      # - ( vhost.value.users_apache_type == "php" ) or ( vhost.value.users_apache_type == "cgi" ) or ( vhost.value.users_apache_type == "static" )
      - vhost.value.users_apache_type is regex("php|cgi|static")
  when: vhost.value.users_apache_type is defined

- name: "Check that users_apache_robots is set to deny is defined for {{ vhost.key }} VirtualHost for {{ user.key }} if it is defined"
  assert:
    that:
      - vhost.value.users_apache_robots == "deny"
  when: vhost.value.users_apache_robots is defined

- name: "Check that users_apache_expires is set to medium or strict for {{ vhost.key }} VirtualHost for {{ user.key }} if it is defined"
  assert:
    that:
      - ( vhost.value.users_apache_expires == "medium" ) or ( vhost.value.users_apache_expires == "strict" )
  when: vhost.value.users_apache_expires is defined

- name: "Check that users_cms is set to wordpress, matomo or phpmyadmin for {{ vhost.key }} VirtualHost for {{ user.key }} if it is defined"
  assert:
    that:
      # - ( vhost.value.users_cms == "wordpress" ) or ( vhost.value.users_cms == "matomo" ) or ( vhost.value.users_cms == "phpmyadmin" )
      - vhost.value.users_cms is regex("wordpress|matomo|phpmyadmin")
  when: vhost.value.users_cms is defined

- name: "Check users_apache_htauth_users for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
  block:

    - name: "Check the users_apache_htauth_users names for {{ vhost.key }} VirtualHost for {{ user.key }} are valid if defined"
      assert:
        that:
          - htuser.name is defined
          - htuser.name is regex("^[a-zA-Z0-9_-]*$")
      loop: "{{ vhost.value.users_apache_htauth_users }}"
      loop_control:
        loop_var: htuser
        label: "{{ htuser }}"

    - name: "Check that the users_apache_htauth_users passwords for {{ vhost.key }} VirtualHost for {{ user.key }} are defined"
      assert:
        that:
          - htuser.password is defined
      when: ( htuser.state is not defined ) or ( htuser.state == "present" )
      loop: "{{ vhost.value.users_apache_htauth_users }}"
      loop_control:
        loop_var: htuser
        label: "{{ htuser }}"

    - name: "Check that users_apache_htauth_users state is set to present or absent for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - htuser.state is regex("present|absent")
      when: htuser.state is defined
      loop: "{{ vhost.value.users_apache_htauth_users }}"
      loop_control:
        loop_var: htuser
        label: "{{ htuser }}"

  when: vhost.value.users_apache_htauth_users is defined

- name: "Check the locations for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
  block:

    - name: "Check that the locations for {{ vhost.key }} VirtualHost for {{ user.key }} are a non-empty array"
      assert:
        that:
          - vhost.value.users_apache_locations | length
          - vhost.value.users_apache_locations[0] is defined

    - name: "Loop through the users_apache_locations for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      include_tasks: user_check_vhost_location.yml
      loop: "{{ vhost.value.users_apache_locations }}"
      loop_control:
        loop_var: loc
        label: "{{ loc }}"

  when: vhost.value.users_apache_locations is defined

- name: "Check that only valid Options are listed for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
  block:

    - name: "Check that the Options for {{ vhost.key }} VirtualHost for {{ user.key }} are a non-empty array"
      assert:
        that:
          - vhost.value.users_apache_options | length
          - vhost.value.users_apache_options[0] is defined

    - name: "Check that all Options are valid and start with a + or - for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - option is regex("^[+-](?i)All|ExecCGI|FollowSymLinks!Includes|IncludesNOEXEC|Indexes|MultiViews|SymLinksIfOwnerMatch$")
      loop: "{{ vhost.value.users_apache_options }}"
      loop_control:
        loop_var: option
        label: "{{ option }}"

  when: vhost.value.users_apache_options is defined

- name: "Check that only valid AllowOverride directives are listed for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
  block:

    - name: "Check that the AllowOverride directives for {{ vhost.key }} VirtualHost for {{ user.key }} are a non-empty array"
      assert:
        that:
          - vhost.value.users_apache_override | length
          - vhost.value.users_apache_override[0] is defined

    - name: "Check that all AllowOverride directives are valid for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - override is regex("^(?i)All|None|AuthConfig|Indexes|Limit|Nonfatal=Override|Unknown|All|Options=All.|ExecCGI.|FollowSymLinks.|Includes.|IncludesNOEXEC.|Indexes.|MultiViews.|SymLinksIfOwnerMatch.|XBitHack.$")
      loop: "{{ vhost.value.users_apache_override }}"
      loop_control:
        loop_var: override
        label: "{{ override }}"

  when: vhost.value.users_apache_override is defined

- name: "Check that file names are listed for the DirectoryIndex directive for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array if defined"
  block:

    - name: "Check that the DirectoryIndex directive for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array"
      assert:
        that:
          - vhost.value.users_apache_index | length
          - vhost.value.users_apache_index[0] is defined

    - name: "Check that each DirectoryIndex appears to be a filename for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - index is regex("^\w\.\w$")
      loop: "{{ vhost.value.users_apache_index }}"
      loop_control:
        loop_var: index 
        label: "{{ index }}"

  when: vhost.value.users_apache_index is defined

# https://www.php.net/manual/en/install.fpm.configuration.php
- name: "Check that PHP-FPM pm is set to static, ondemand or dynamic for {{ vhost.key }} VirtualHost for {{ user.key }} if defined" 
  assert:
    that:
      - vhost.value.users_phpfpm_pm is regex("^static|ondemand|dynamic$")
  when: vhost.value.users_phpfpm_pm is defined

- name: "Check that PHP-FPM pm.max_children is greater than 1 for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
  assert:
    that:
      - vhost.value.users_phpfpm_pm_max_children | int >= 1
  when: vhost.value.users_phpfpm_pm_max_children is defined

- name: "Check the PHP-FPM pm dynamic pool settings for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
  block:

    - name: "Check PHP-FPM pm.start_servers for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - vhost.value.users_phpfpm_pm_start_servers | int >= 1
      when: vhost.value.users_phpfpm_pm_start_servers is defined

    - name: "Check the PHP-FPM pm.min_spare_servers for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - vhost.value.users_phpfpm_pm_min_spare_servers | int >= 1
      when: vhost.value.users_phpfpm_pm_min_spare_servers is defined

    - name: "Check the PHP-FPM pm.max_spare_servers for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - vhost.value.users_phpfpm_pm_max_spare_servers | int >= 1
      when: vhost.value.users_phpfpm_pm_max_spare_servers is defined

    - name: "Check the PHP-FPM users_phpfpm_pm_max_children for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - vhost.value.users_phpfpm_pm_max_children | int >= 1
      when: vhost.value.users_phpfpm_pm_max_children is defined

    - name: "Check the PHP-FPM pm.max_children must be greater than or equal to pm.start_servers {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - vhost.value.users_phpfpm_pm_max_children | int >= vhost.value.users_phpfpm_pm_start_servers | int
      when:
        - vhost.value.users_phpfpm_pm_max_children is defined
        - vhost.value.users_phpfpm_pm_start_servers is defined

    - name: "Check the PHP-FPM pm.max_children must be greater than or equal to pm.min_spare_servers for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - vhost.value.users_phpfpm_pm_max_children | int >= vhost.value.users_phpfpm_pm_min_spare_servers | int
      when:
        - vhost.value.users_phpfpm_pm_max_children is defined
        - vhost.value.users_phpfpm_pm_min_spare_servers is defined

    - name: "Check the PHP-FPM pm.max_children must be greater than or equal to pm.max_spare_servers for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - vhost.value.users_phpfpm_pm_max_children | int >= vhost.value.users_phpfpm_pm_max_spare_servers | int
      when:
        - vhost.value.users_phpfpm_pm_max_children is defined
        - vhost.value.users_phpfpm_pm_max_spare_servers is defined

    - name: "Check the PHP-FPM pm.start_servers must be greater than pm.min_spare_servers for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - vhost.value.users_phpfpm_pm_start_servers | int >= vhost.value.users_phpfpm_pm_min_spare_servers | int
      when:
        - vhost.value.users_phpfpm_pm_start_servers is defined
        - vhost.value.users_phpfpm_pm_min_spare_servers is defined

    - name: "Check the PHP-FPM pm.start_servers must less than or equal to pm.max_spare_servers for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - vhost.value.users_phpfpm_pm_start_servers | int <= vhost.value.users_phpfpm_pm_max_spare_servers | int
      when:
        - vhost.value.users_phpfpm_pm_start_servers is defined
        - vhost.value.users_phpfpm_pm_max_spare_servers is defined

    - name: "Check the PHP-FPM pm.max_spare_servers must be greater than pm.min_spare_servers for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - vhost.value.users_phpfpm_pm_max_spare_servers | int >= vhost.value.users_phpfpm_pm_min_spare_servers | int
      when:
        - vhost.value.users_phpfpm_pm_max_spare_servers is defined
          vhost.value.users_phpfpm_pm_min_spare_servers is defined

  when: ( vhost.value.users_phpfpm_pm is defined ) and ( vhost.value.users_phpfpm_pm == "dynamic" )
...
