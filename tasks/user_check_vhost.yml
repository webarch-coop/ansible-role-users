---
- name: "Check the DocumentRoot for the {{ vhost.key }} VirtualHost for {{ user.key }} contains valid characters"
  assert:
    that:
      - vhost.key is regex("^[a-zA-Z0-9/_-]*$")
    fail_msg: "Only letters, numbers, underscores, dashes and forward slashes can be present in the DocumentRoot path"

- name: "Check that the {{ vhost.key }} VirtualHost for {{ user.key }} has a ServerName"
  assert:
    that:
      - vhost.value.users_apache_server_name is defined
      - vhost.value.users_apache_server_name | length

- name: "Check that the {{ vhost.key }} VirtualHost for {{ user.key }} has a ServerName that resolves to a IPv4 address"
  include_tasks: user_check_domain.yml
  vars:
    users_domain: "{{ vhost.value.users_apache_server_name }}"

- name: "Check ServerAlias' for {{ vhost.key }} VirtualHost for {{ user.key }}"
  block:

    - name: "Check that the ServerAlias' for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array"
      assert:
        that:
          - vhost.value.users_apache_server_aliases | length
          - vhost.value.users_apache_server_aliases[0] is defined

    - name: "Check that the {{ vhost.key }} VirtualHost for {{ user.key }} has ServerAlias' that resolve to IPv4 addresses"
      include_tasks: user_check_domain.yml
      vars:
        users_domain: "{{ domain }}"
      loop: "{{ vhost.value.users_apache_server_aliases }}"
      loop_control:
        loop_var: domain
        label: "{{ domain }}"

  when: vhost.value.users_apache_server_aliases is defined

- name: "Check that users_apache_type for {{ vhost.key }} VirtualHost for {{ user.key }} is set to php, cgi or static if it is defined"
  assert:
    that:
      - vhost.value.users_apache_type is regex("php|cgi|static")
  when: vhost.value.users_apache_type is defined

- name: "Check that users_apache_robots is set to deny is defined for {{ vhost.key }} VirtualHost for {{ user.key }} if it is defined"
  assert:
    that:
      - vhost.value.users_apache_robots == "deny"
  when: vhost.value.users_apache_robots is defined

- name: "Check that users_apache_expires is set to medium or strict for {{ vhost.key }} VirtualHost for {{ user.key }} if it is defined"
  assert:
    that:
      - ( vhost.value.users_apache_expires == "medium" ) or ( vhost.value.users_apache_expires == "strict" )
  when: vhost.value.users_apache_expires is defined

- name: "Check users_apache_htauth_users for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
  block:

    - name: "Check the users_apache_htauth_users names for {{ vhost.key }} VirtualHost for {{ user.key }} are valid if defined"
      assert:
        that:
          - htuser.name is defined
          - htuser.name is regex("^[a-zA-Z0-9_-]*$")
      loop: "{{ vhost.value.users_apache_htauth_users }}"
      loop_control:
        loop_var: htuser
        label: "{{ htuser.name }}"

    - name: "Check that the users_apache_htauth_users passwords for {{ vhost.key }} VirtualHost for {{ user.key }} are defined"
      assert:
        that:
          - htuser.password is defined
      when: ( htuser.state is not defined ) or ( htuser.state == "present" )
      loop: "{{ vhost.value.users_apache_htauth_users }}"
      loop_control:
        loop_var: htuser
        label: "{{ htuser.name }}"

    - name: "Check that users_apache_htauth_users state is set to present or absent for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - htuser.state is regex("present|absent")
      when: htuser.state is defined
      loop: "{{ vhost.value.users_apache_htauth_users }}"
      loop_control:
        loop_var: htuser
        label: "{{ htuser.name }}"

  when: vhost.value.users_apache_htauth_users is defined

- name: "Check the locations for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
  block:

    - name: "Check that the locations for {{ vhost.key }} VirtualHost for {{ user.key }} are a non-empty array"
      assert:
        that:
          - vhost.value.users_apache_locations | length
          - vhost.value.users_apache_locations[0] is defined

    - name: "Loop through the users_apache_locations for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      include_tasks: user_check_vhost_location.yml
      loop: "{{ vhost.value.users_apache_locations }}"
      loop_control:
        loop_var: loc
        label: "{{ loc }}"

  when: vhost.value.users_apache_locations is defined

- name: "Check that only valid Options are listed for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
  block:

    - name: "Check that the Options for {{ vhost.key }} VirtualHost for {{ user.key }} are a non-empty array"
      assert:
        that:
          - vhost.value.users_apache_options | length
          - vhost.value.users_apache_options[0] is defined

    - name: "Check that all Options are valid and start with a + or - for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - option is regex("^[+-](?i)All|ExecCGI|FollowSymLinks!Includes|IncludesNOEXEC|Indexes|MultiViews|SymLinksIfOwnerMatch$")
      loop: "{{ vhost.value.users_apache_options }}"
      loop_control:
        loop_var: option
        label: "{{ option }}"

  when: vhost.value.users_apache_options is defined

- name: "Check that only valid AllowOverride directives are listed for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
  block:

    - name: "Check that the AllowOverride directives for {{ vhost.key }} VirtualHost for {{ user.key }} are a non-empty array"
      assert:
        that:
          - vhost.value.users_apache_override | length
          - vhost.value.users_apache_override[0] is defined

    - name: "Check that all AllowOverride directives are valid for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - override is regex("^(?i)All|None|AuthConfig|Indexes|Limit|Nonfatal=Override|Unknown|All|Options=All.|ExecCGI.|FollowSymLinks.|Includes.|IncludesNOEXEC.|Indexes.|MultiViews.|SymLinksIfOwnerMatch.|XBitHack.$")
      loop: "{{ vhost.value.users_apache_override }}"
      loop_control:
        loop_var: override
        label: "{{ override }}"

  when: vhost.value.users_apache_override is defined

- name: "Check that file names are listed for the DirectoryIndex directive for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array if defined"
  block:

    - name: "Check that the DirectoryIndex directive for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array"
      assert:
        that:
          - vhost.value.users_apache_index | length
          - vhost.value.users_apache_index[0] is defined

    - name: "Check that each DirectoryIndex appears to be a filename for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - index is regex("^\w+\.\w+$")
      loop: "{{ vhost.value.users_apache_index }}"
      loop_control:
        loop_var: index
        label: "{{ index }}"

  when: vhost.value.users_apache_index is defined

- name: "Check that the users_daily_scripts array for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty if defined"
  assert:
    that:
      - vhost.value.users_daily_scripts | length
      - vhost.value.users_daily_scripts[0] is defined
  when: vhost.value.users_daily_scripts is defined

- name: "Check that the users_apache_nophp_dirs array for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty if defined"
  assert:
    that:
      - vhost.value.users_apache_nophp_dirs | length
      - vhost.value.users_apache_nophp_dirs[0] is defined
  when: vhost.value.users_apache_nophp_dirs is defined

- name: "Check that users_cms is set to mediawiki, flarum, nextcloud, kimai, drupal, wordpress, matomo or phpmyadmin for {{ vhost.key }} VirtualHost for {{ user.key }} if it is defined"
  assert:
    that:
      - vhost.value.users_cms is regex("mediawiki|flarum|nextcloud|kimai|drupal|wordpress|matomo|phpmyadmin")
  when: vhost.value.users_cms is defined

- name: "Drupal checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
  block:

    - name: "Check that required Drupal variables are defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - ( "phpfpm" in user.value.users_groups )
          - vhost.value.users_apache_type == "php"
          - ( vhost.value.drupal_dbname is defined ) and ( vhost.value.drupal_dbname in user.value.users_mariadb_databases )

  when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "drupal" )

- name: "Kimai checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
  block:

    - name: "Check that required Kimai variables are defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - ( "phpfpm" in user.value.users_groups )
          - vhost.value.users_apache_type == "php"
          - ( vhost.value.users_apache_robots is defined ) and ( vhost.value.users_apache_robots == "deny" )
          - ( vhost.value.kimai_dbname is defined ) and ( vhost.value.kimai_dbname in user.value.users_mariadb_databases )
          - vhost.value.kimai_version is defined
          - vhost.value.kimai_app_env is defined
          - ( vhost.value.kimai_admin_user is defined ) and ( vhost.value.kimai_admin_user is regex("^[a-z0-9_-]*$") )
          - vhost.value.users_apache_sts is defined

  when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "kimai" )

- name: "Matomo checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
  block:

    - name: "Check that required Matomo variables are defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - ( "phpfpm" in user.value.users_groups )
          - vhost.value.users_apache_type == "php"
          - ( vhost.value.matomo_dbname is defined ) and ( vhost.value.matomo_dbname in user.value.users_mariadb_databases )
          - vhost.value.matomo_first_site_name is defined
          - vhost.value.matomo_first_site_url is defined
          - vhost.value.matomo_first_user is defined
          - vhost.value.matomo_first_user_email is defined
          - vhost.value.users_apache_sts is defined

  when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "matomo" )

- name: "Nextcloud checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
  block:

    - name: "Check that required Nextcloud variables are defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - ( "phpfpm" in user.value.users_groups )
          - vhost.value.users_apache_type == "php"
          - ( vhost.value.users_apache_robots is defined ) and ( vhost.value.users_apache_robots == "deny" )
          - ( vhost.value.nextcloud_dbname is defined ) and ( vhost.value.nextcloud_dbname in user.value.users_mariadb_databases )
          - ( vhost.value.nextcloud_admin_user is defined ) and ( vhost.value.nextcloud_admin_user is regex("^[a-z0-9_-]*$") )
          - vhost.value.nextcloud_version is defined
          - ( vhost.value.nextcloud_autoupdate is defined ) and ( vhost.value.nextcloud_autoupdate or not vhost.value.nextcloud_autoupdate )
          - ( vhost.value.users_apache_options is defined ) and ( "+MultiViews" in vhost.value.users_apache_options ) and ( "+SymLinksIfOwnerMatch" in vhost.value.users_apache_options )
          - vhost.value.users_apache_sts is defined

  when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "nextcloud" )

- name: "phpMyAdmin checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
  block:

    - name: "Check that required phpMyAdmin variables are defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - ( "phpfpm" in user.value.users_groups )
          - vhost.value.users_apache_type == "php"
          - ( vhost.value.users_apache_robots is defined ) and ( vhost.value.users_apache_robots == "deny" )
          - ( vhost.value.phpmyadmin_db is defined ) and ( vhost.value.phpmyadmin_db in user.value.users_mariadb_databases )
          - vhost.value.users_apache_sts is defined

  when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "phpmyadmin" )

- name: "WordPress checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
  block:

    - name: "Check that required WordPress variables are defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - ( "phpfpm" in user.value.users_groups )
          - vhost.value.users_apache_type == "php"
          - ( vhost.value.wordpress_dbname is defined ) and ( vhost.value.wordpress_dbname in user.value.users_mariadb_databases )

    - name: "Check that the wordpress_dbprefix is less than 6 numbers or letters or underscores for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - vhost.value.wordpress_dbprefix is regex("^[a-zA-Z0-9_]*$")
          - vhost.value.wordpress_dbprefix is regex("^.{1,6}$")
      when: vhost.value.wordpress_dbprefix is defined

    - name: "Check that the wordpress_locale look likes an allowed language for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that: vhost.value.wordpress_locale is regex("^^[a-z]*?_?[A-Z]*$")
      when: vhost.value.wordpress_locale is defined

    - name: "Check the wordpress_url for {{ vhost.key }} VirtualHost for {{ user.key }}"
      block: 

        - name: "Check that the wordpress_url doesn't end in a slash for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - vhost.value.wordpress_url is not regex("/$")

        - name: Set a fact for the wordpress_url without a protcol
          set_fact:
            wordpress_url_domain: "{{ vhost.value.wordpress_url | regex_replace('^https://') }}"

        - name: "Check that wordpress_url domain equals the ServerName for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - ( wordpress_url_domain == vhost.key )
          when: ( vhost.value.users_apache_server_aliases is not defined )

        - name: "Check that wordpress_url domain contains either the ServerName or a ServerAlias for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - ( wordpress_url_domain == vhost.key ) or ( wordpress_url_domain in vhost.value.users_apache_server_aliases )
          when: ( vhost.value.users_apache_server_aliases is defined ) and ( vhost.value.users_apache_server_aliases[0] is defined )

      when: vhost.value.wordpress_url is defined

    - name: "Check the wordpress_title is not empty if it is defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - vhost.value.wordpress_title | length
      when: vhost.value.wordpress_title is defined

- name: "Check that the wordpress_admin_user contains only ascii letters and numbers and is between 2 and 12 characters long for {{ vhost.key }} VirtualHost for {{ user.key }}"
  assert:
    that:
      - vhost.value.wordpress_admin_user | length
      - vhost.value.wordpress_admin_user[0] is not defined
      - vhost.value.wordpress_admin_user is regex("^[a-zA-Z0-9]*$")
      - vhost.value.wordpress_admin_user is regex("^.{2,12}$")
  when: vhost.value.wordpress_admin_user is defined

  when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "wordpress" )

- name: "MediaWiki checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
  include_tasks: user_check_mediawiki.yml
  when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "mediawiki" )

- name: "Flarum checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
  block:

    - name: "Check that required Flarum variables are defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - ( "phpfpm" in user.value.users_groups )
          - vhost.value.users_apache_type == "php"
          - ( vhost.value.flarum_dbname is defined ) and ( vhost.value.flarum_dbname in user.value.users_mariadb_databases )

    - name: "Check that flarum_mail_from is a email address for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - vhost.value.flarum_mail_from is regex("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$")
      when: vhost.value.flarum_mail_from is defined

  when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "flarum" )
...
