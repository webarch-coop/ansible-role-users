---
- name: "Apache VirtualHosts variables checks for {{ user.key }}"
  block:

    - name: "Check the DocumentRoot for the {{ vhost.key }} VirtualHost for {{ user.key }} contains valid characters"
      assert:
        that:
          - vhost.key is regex("^[a-zA-Z0-9/_.-]*$")
        fail_msg: "Only letters, numbers, underscores, dashes and forward slashes can be present in the DocumentRoot path"

    - name: "Check that the {{ vhost.key }} VirtualHost for {{ user.key }} has a ServerName"
      assert:
        that:
          - vhost.value.users_apache_server_name is defined
          - vhost.value.users_apache_server_name | length

    - name: "Check that the {{ vhost.key }} VirtualHost for {{ user.key }} has a ServerName that resolves to a IPv4 address"
      include_tasks: user_check_domain.yml
      vars:
        users_domain: "{{ vhost.value.users_apache_server_name }}"
        users_reverse_proxy: "{% if vhost.value.users_apache_remoteip is defined %}{{ vhost.value.users_apache_remoteip }}{% endif %}"
      when: vhost.value.users_apache_server_name is not regex('^[*][.].*')

    - name: "Add the users_apache_server_name to the users_apache_server_names variable for {{ vhost.key }} VirtualHost for {{ user.key }}"
      set_fact:
        users_apache_server_names: "{{ users_apache_server_names }} + [ '{{ vhost.value.users_apache_server_name }}' ]"

    - name: "Check ServerAlias' for {{ vhost.key }} VirtualHost for {{ user.key }}"
      block:

        - name: "Check that the ServerAlias' for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array"
          assert:
            that:
              - vhost.value.users_apache_server_aliases | length
              - vhost.value.users_apache_server_aliases[0] is defined

        - name: "Check that the {{ vhost.key }} VirtualHost for {{ user.key }} has ServerAlias' that resolve to IPv4 addresses"
          include_tasks: user_check_domain.yml
          vars:
            users_domain: "{{ domain }}"
            users_reverse_proxy: "{% if vhost.value.users_apache_remoteip is defined %}{{ vhost.value.users_apache_remoteip }}{% endif %}"
          when: domain is not regex('^[*][.].*')
          loop: "{{ vhost.value.users_apache_server_aliases }}"
          loop_control:
            loop_var: domain
            label: "{{ domain }}"

        - name: "Add the users_apache_server_aliases to the users_apache_server_names variable for {{ vhost.key }} VirtualHost for {{ user.key }}"
          set_fact:
            users_apache_server_names: "{{ users_apache_server_names + vhost.value.users_apache_server_aliases }}"

      when: vhost.value.users_apache_server_aliases is defined

    - name: "Check that users_apache_directories for {{ vhost.key }} VirtualHost for {{ user.key }} is a list if it is defined"
      assert:
        that:
          - vhost_config.users_apache_directories | type_debug == "list"
      when: vhost_config.users_apache_directories is defined

    - name: "Check that users_apache_type for {{ vhost.key }} VirtualHost for {{ user.key }} is set to php, cgi or static if it is defined"
      assert:
        that:
          - vhost.value.users_apache_type is regex("php|cgi|static")
      when: vhost.value.users_apache_type is defined

    - name: "Check that users_apache_robots is set to deny is defined for {{ vhost.key }} VirtualHost for {{ user.key }} if it is defined"
      assert:
        that:
          - vhost.value.users_apache_robots == "deny"
      when: vhost.value.users_apache_robots is defined

    - name: "Check that users_apache_remoteip for {{ vhost.key }} VirtualHost for {{ user.key }} is set to cloudflare if it is defined"
      assert:
        that:
          - vhost.value.users_apache_remoteip is regex("cloudflare")
      when: vhost.value.users_apache_remoteip is defined

    - name: "Check that users_apache_expires is set to medium, strict or forever for {{ vhost.key }} VirtualHost for {{ user.key }} if it is defined"
      assert:
        that:
          - vhost.value.users_apache_expires is regex('^medium|strict|forever$')
      when: vhost.value.users_apache_expires is defined

    - name: "Check users_apache_htauth_users for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      block:

        - name: "Check the users_apache_htauth_users names for {{ vhost.key }} VirtualHost for {{ user.key }} are valid if defined"
          assert:
            that:
              - htuser.name is defined
              - htuser.name is regex("^[a-zA-Z0-9_-]*$")
          loop: "{{ vhost.value.users_apache_htauth_users }}"
          loop_control:
            loop_var: htuser
            label: "{{ htuser.name }}"

        - name: "Check that the users_apache_htauth_users passwords for {{ vhost.key }} VirtualHost for {{ user.key }} are defined"
          assert:
            that:
              - htuser.password is defined
          when: ( htuser.state is not defined ) or ( htuser.state == "present" )
          loop: "{{ vhost.value.users_apache_htauth_users }}"
          loop_control:
            loop_var: htuser
            label: "{{ htuser.name }}"

        - name: "Check that users_apache_htauth_users state is set to present or absent for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
          assert:
            that:
              - htuser.state is regex("present|absent")
          when: htuser.state is defined
          loop: "{{ vhost.value.users_apache_htauth_users }}"
          loop_control:
            loop_var: htuser
            label: "{{ htuser.name }}"

      when: vhost.value.users_apache_htauth_users is defined

    - name: "Check the locations for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      block:

        - name: "Check that the locations for {{ vhost.key }} VirtualHost for {{ user.key }} are a non-empty array"
          assert:
            that:
              - vhost.value.users_apache_locations | length
              - vhost.value.users_apache_locations[0] is defined

        - name: "Loop through the users_apache_locations for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
          include_tasks: user_check_vhost_location.yml
          loop: "{{ vhost.value.users_apache_locations }}"
          loop_control:
            loop_var: loc
            label: "{{ loc }}"

      when: vhost.value.users_apache_locations is defined

    - name: "Check that only valid Options are listed for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      block:

        - name: "Check that the Options for {{ vhost.key }} VirtualHost for {{ user.key }} are a non-empty array"
          assert:
            that:
              - vhost.value.users_apache_options | length
              - vhost.value.users_apache_options[0] is defined

        - name: "Check that all Options are valid and start with a + or - for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - option is regex("^[+-](?i)All|ExecCGI|FollowSymLinks|Includes|IncludesNOEXEC|Indexes|MultiViews|SymLinksIfOwnerMatch$")
          loop: "{{ vhost.value.users_apache_options }}"
          loop_control:
            loop_var: option
            label: "{{ option }}"

      when: vhost.value.users_apache_options is defined

    - name: "Check that only valid IndexOptions listed for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      block:

        - name: "Check that the IndexOptions for {{ vhost.key }} VirtualHost for {{ user.key }} are a non-empty array"
          assert:
            that:
              - vhost.value.users_apache_index_options | length
              - vhost.value.users_apache_index_options[0] is defined

        - name: "Check that all IndexOptions are valid and start with a + or - for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - option is regex("^[+-](?i)AddAltClass|Charset|DescriptionWidth|FancyIndexing|FoldersFirst|HTMLTable|IconsAreLinks|IconHeight|IconWidth|IgnoreCase|IgnoreClient|NameWidth|ScanHTMLTitles|ShowForbidden|SuppressColumnSorting|SuppressDescription|SuppressHTMLPreamble|SuppressIcon|SuppressLastModified|SuppressRules|SuppressSize|TrackModified|UseOldDateFormat|VersionSort|XHTML.*$")
          loop: "{{ vhost.value.users_apache_index_options }}"
          loop_control:
            loop_var: option
            label: "{{ option }}"

      when: vhost.value.users_apache_index_options is defined

    - name: "Check that SSILegacyExprParser is true or false for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - vhost.value.users_apache_ssi_legacy | type_debug == "bool"
      when: vhost.value.users_apache_ssi_legacy is defined

    - name: "Check that AddOutputFilter for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array"
      assert:
        that:
          - vhost.value.users_apache_add_output_filters | type_debug == "list"
      when: vhost.value.users_apache_add_output_filters is defined

    - name: "Check that AddType for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array"
      assert:
        that:
          - vhost.value.users_apache_add_type | type_debug == "list"
      when: vhost.value.users_apache_add_type is defined

    - name: "Check that only valid AllowOverride directives are listed for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      block:

        - name: "Check that the AllowOverride directives for {{ vhost.key }} VirtualHost for {{ user.key }} are a non-empty array"
          assert:
            that:
              - vhost.value.users_apache_override | length
              - vhost.value.users_apache_override[0] is defined

        - name: "Check that all AllowOverride directives are valid for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - override is regex("^(?i)All|None|AuthConfig|Indexes|Limit|Nonfatal=Override|Unknown|All|Options=All.|ExecCGI.|FollowSymLinks.|Includes.|IncludesNOEXEC.|Indexes.|MultiViews.|SymLinksIfOwnerMatch.|XBitHack.$")
          loop: "{{ vhost.value.users_apache_override }}"
          loop_control:
            loop_var: override
            label: "{{ override }}"

      when: vhost.value.users_apache_override is defined

    - name: "Check that file names are listed for the DirectoryIndex directive for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array if defined"
      block:

        - name: "Check that the DirectoryIndex directive for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array"
          assert:
            that:
              - vhost.value.users_apache_index | length
              - vhost.value.users_apache_index[0] is defined

        - name: "Check that each DirectoryIndex appears to be a filename for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - index is regex("^\w+\.\w+$")
          loop: "{{ vhost.value.users_apache_index }}"
          loop_control:
            loop_var: index
            label: "{{ index }}"

      when: vhost.value.users_apache_index is defined

    - name: "Check that AuthType is valid for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - vhost.value.users_apache_auth_type | type_debug is regex("str|AnsibleUnicode|AnsibleUnsafeText")
          - vhost.value.users_apache_auth_type is regex("None|Basic|Digest|Form")
      when: vhost.value.users_apache_auth_type is defined

    - name: "Check that Require is valid for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      block:

        - name: "Check that users_apache_require is a list for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - vhost.value.users_apache_require | type_debug == "list"

        - name: "Check that that values other than method for the users_apache_require list are valid for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - req is regex("^all granted|^all denied|^env .*|^method [A-Z ]{3,51}|^expr .*|^user .*|^group .*|^valid-user|^ip .*|^forward-dns .*")
          when: req is not regex("method .*")
          loop: "{{ vhost.value.users_apache_require }}"
          loop_control:
            loop_var: req
            label: "{{ req }}"

      when: ( vhost.value.users_apache_require is defined ) and ( vhost.value.users_apache_require != [] )

    - name: "The users_daily_scripts array should be defined at at user level for {{ user.key }} not at a VirtualHost level"
      assert:
        that:
          - vhost.value.users_daily_scripts is not defined

    - name: "The users_hourly_scripts array should be defined at at user level for {{ user.key }} not at a VirtualHost level"
      assert:
        that:
          - vhost.value.users_hourly_scripts is not defined

    - name: "Check that the users_apache_nophp_dirs array for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty if defined"
      assert:
        that:
          - vhost.value.users_apache_nophp_dirs | length
          - vhost.value.users_apache_nophp_dirs[0] is defined
      when: vhost.value.users_apache_nophp_dirs is defined

    - name: "Check that the users_apache_deny_dirs array for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty if defined"
      assert:
        that:
          - vhost.value.users_apache_deny_dirs | length
          - vhost.value.users_apache_deny_dirs[0] is defined
      when: vhost.value.users_apache_deny_dirs is defined

  tags:
    - users

- name: "FilesMatch checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
  block:

    - name: "Check that users_apache_filesmatch is an array for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - vhost.value.users_apache_filesmatch | type_debug == "list"

    - name: "Check that regex is defined for FilesMatch for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - fm.regex is defined
      loop: "{{ vhost.value.users_apache_filesmatch }}"
      loop_control:
        loop_var: fm
        label: "{{ fm }}"

  when: vhost.value.users_apache_filesmatch is defined
  tags:
    - users

- name: "CMS checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
  block:

    - name: "Check that users_cms is set to mediawiki, flarum, moodle, nextcloud, kimai, drupal, wordpress, matomo or phpmyadmin for {{ vhost.key }} VirtualHost for {{ user.key }} if it is defined"
      assert:
        that:
          - vhost.value.users_cms is regex("mediawiki|flarum|moodle|nextcloud|kimai|drupal|wordpress|matomo|phpmyadmin")
      when: vhost.value.users_cms is defined

    - name: "Drupal checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
      include_tasks: cms_check_drupal.yml
      when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "drupal" )

    - name: "Kimai checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
      include_tasks: cms_check_kimai.yml
      when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "kimai" )

    - name: "Matomo checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
      include_tasks: cms_check_matomo.yml
      when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "matomo" )

    - name: "Nextcloud checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
      include_tasks: cms_check_nextcloud.yml
      when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "nextcloud" )

    - name: "phpMyAdmin checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
      include_tasks: cms_check_phpmyadmin.yml
      when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "phpmyadmin" )

    - name: "WordPress checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
      include_tasks: cms_check_wordpress.yml
      when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "wordpress" )

    - name: "MediaWiki checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
      include_tasks: cms_check_mediawiki.yml
      when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "mediawiki" )

    - name: "Flarum checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
      include_tasks: cms_check_flarum.yml
      when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "flarum" )

    - name: "Moodle checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
      include_tasks: cms_check_moodle.yml
      when: ( vhost.value.users_cms is defined ) and ( vhost.value.users_cms == "moodle" )

  tags:
    - users
...
