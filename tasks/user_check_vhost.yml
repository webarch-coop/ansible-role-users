# Copyright 2018-2025 Chris Croome
#
# This file is part of the Webarchitects Users Ansible role.
#
# The Webarchitects Users Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Users Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Users Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: "Apache VirtualHosts variables checks for {{ user.key }}"
  block:

    - name: "Check the DocumentRoot for the {{ vhost.key }} VirtualHost for {{ user.key }} contains valid characters"
      ansible.builtin.assert:
        that:
          - vhost.key is regex("^[a-zA-Z0-9/_.-]*$")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: "Only letters, numbers, underscores, dashes and forward slashes can be present in the DocumentRoot path"

    - name: "Check that the {{ vhost.key }} VirtualHost for {{ user.key }} has a ServerName that resolves to a IPv4 address"
      ansible.builtin.include_tasks: user_check_domain.yml
      vars:
        users_domain: "{{ vhost.value.users_apache_server_name }}"
        users_reverse_proxy: "{% if vhost.value.users_apache_remoteip is defined %}{{ vhost.value.users_apache_remoteip }}{% endif %}"
      when: vhost.value.users_apache_server_name is not regex('^[*][.].*')

    - name: "Check ServerAlias' for {{ vhost.key }} VirtualHost for {{ user.key }}"
      block:

        - name: "Check that the ServerAlias' for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array"
          ansible.builtin.assert:
            that:
              - vhost.value.users_apache_server_aliases | length > 0
              - vhost.value.users_apache_server_aliases[0] is defined
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: "Check that the {{ vhost.key }} VirtualHost for {{ user.key }} has ServerAlias' that resolve to IPv4 addresses"
          ansible.builtin.include_tasks: user_check_domain.yml
          vars:
            users_domain: "{{ domain }}"
            users_reverse_proxy: "{% if vhost.value.users_apache_remoteip is defined %}{{ vhost.value.users_apache_remoteip }}{% endif %}"
          when: domain is not regex('^[*][.].*')
          loop: "{{ vhost.value.users_apache_server_aliases }}"
          loop_control:
            loop_var: domain
            label: "{{ domain }}"

      when:
        - vhost.value.users_apache_server_aliases is defined
        - vhost.value.users_apache_server_aliases != []

    - name: "Check that users_apache_type for {{ vhost.key }} VirtualHost for {{ user.key }} is set to php, php+cgi, fcgi, cgi or static if it is defined"
      ansible.builtin.assert:
        that:
          - vhost.value.users_apache_type is regex('^php|php[+]cgi|php[+]fcgi|cgi|fcgi|static$')
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: vhost.value.users_apache_type is defined

    - name: Check that users_apache_php_socket_path exists and is a socket and the user is not chrooted
      block:

        - name: "Stat {{ vhost.value.users_apache_php_socket_path }}"
          ansible.builtin.stat:
            path: "{{ vhost.value.users_apache_php_socket_path }}"
          register: users_apache_php_socket_path_check

        - name: Setting users_apache_php_socket_path is not supported for chrooted users or chrooted Apache and the socket must exist
          ansible.builtin.assert:
            that:
              - users_apache_php_socket_path_check.stat.exists | bool
              - users_apache_php_socket_path_check.stat.issock is defined
              - users_apache_php_socket_path_check.stat.issock | bool
              - ( "chroot" not in user.value.users_groups )
              - ( users_apache_chroot is not defined ) or ( not users_apache_chroot | bool )

      when: vhost.value.users_apache_php_socket_path is defined

    - name: "Check users_apache_htauth_users for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      block:

        - name: "Check the users_apache_htauth_users names for {{ vhost.key }} VirtualHost for {{ user.key }} are valid if defined"
          ansible.builtin.assert:
            that:
              - htuser.name is defined
              - htuser.name is regex("^[a-zA-Z0-9_-]*$")
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ vhost.value.users_apache_htauth_users }}"
          loop_control:
            loop_var: htuser
            label: "{{ htuser.name }}"

        - name: "Check that the users_apache_htauth_users passwords for {{ vhost.key }} VirtualHost for {{ user.key }} are defined"
          ansible.builtin.assert:
            that:
              - htuser.password is defined
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ( htuser.state is not defined ) or ( htuser.state == "present" )
          loop: "{{ vhost.value.users_apache_htauth_users }}"
          loop_control:
            loop_var: htuser
            label: "{{ htuser.name }}"

      when: vhost.value.users_apache_htauth_users is defined

    - name: "Check the Redirect and RedirectMatch directives for {{ vhost.key }} VirtualHost for {{ user.key }}"
      block:

        - name: "Check that attributes for Redirect and RedirectMatch directives for {{ vhost.key }} VirtualHost for {{ user.key }} are defined"
          ansible.builtin.assert:
            that:
              - ( redirect.path is defined and redirect.url is defined ) or ( redirect.regex_path is defined and redirect.url is defined )
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ vhost.value.users_apache_redirects }}"
          loop_control:
            loop_var: redirect
          when: >
            ( redirect.status is defined ) and ( redirect.status is regex('^301|302|303|permanent|temp|seeother$') ) or
            ( redirect.status is not defined )

        - name: "Check values of the URL if defined for Redirect and RedirectMatch directives for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.assert:
            that:
              - redirect.url is regex('^https?:\/\/.*$')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ vhost.value.users_apache_redirects }}"
          loop_control:
            loop_var: redirect
          when: redirect.url is defined

        - name: "Check values of the path if defined for Redirect and RedirectMatch directives for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.assert:
            that:
              - redirect.path is regex('^\/.*$')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ vhost.value.users_apache_redirects }}"
          loop_control:
            loop_var: redirect
          when: redirect.path is defined

      when: vhost.value.users_apache_redirects is defined

    - name: "Check the Alias and AliasMatch directives for {{ vhost.key }} VirtualHost for {{ user.key }}"
      block:

        - name: "Check that attributes for Alias, AliasMatch, ScriptAlias and ScriptAliasMatch directives for {{ vhost.key }} VirtualHost for {{ user.key }} are defined"
          ansible.builtin.assert:
            that:
              - alias.path is defined
              - ( alias.url is defined ) or ( alias.url_regex is defined ) or ( alias.script is defined ) or ( alias.script_regex is defined )
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ vhost.value.users_apache_alias }}"
          loop_control:
            loop_var: alias

      when: vhost.value.users_apache_alias is defined

    - name: "Check the users_apache_rewrite array for {{ vhost.key }} VirtualHost for {{ user.key }}"
      block:

        - name: "Check that the users_apache_rewrite array contains conditions or rules when it is defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.assert:
            that:
              - ( rewrite.cond is defined ) or ( rewrite.rule is defined )
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ vhost.value.users_apache_rewrite }}"
          loop_control:
            loop_var: rewrite

      when: vhost.value.users_apache_rewrite is defined

    - name: "Check the locations for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      block:

        - name: "Check that the locations for {{ vhost.key }} VirtualHost for {{ user.key }} are a non-empty array"
          ansible.builtin.assert:
            that:
              - vhost.value.users_apache_locations | length > 0
              - vhost.value.users_apache_locations[0] is defined
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: "Loop through the users_apache_locations for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
          ansible.builtin.include_tasks: user_check_vhost_location.yml
          loop: "{{ vhost.value.users_apache_locations }}"
          loop_control:
            loop_var: loc
            label: "{{ loc.location | default(loc) }}"

      when: vhost.value.users_apache_locations is defined

    - name: "The users_minutely_scripts array should be defined at at user level for {{ user.key }} not at a VirtualHost level"
      ansible.builtin.assert:
        that:
          - vhost.value.users_minutely_scripts is not defined
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: "Check that the users_apache_nophp_dirs array for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty if defined"
      ansible.builtin.assert:
        that:
          - vhost.value.users_apache_nophp_dirs | length > 0
          - vhost.value.users_apache_nophp_dirs[0] is defined
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: vhost.value.users_apache_nophp_dirs is defined

    - name: "Check that the users_apache_deny_dirs array for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty if defined"
      ansible.builtin.assert:
        that:
          - vhost.value.users_apache_deny_dirs | length > 0
          - vhost.value.users_apache_deny_dirs[0] is defined
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: vhost.value.users_apache_deny_dirs is defined

    - name: "Checks for users_apache_directories for {{ vhost.key }} VirtualHost for {{ user.key }}"
      block:

        - name: "Check that the users_apache_directories keys when they are relative paths, for {{ vhost.key }} VirtualHost for {{ user.key }} contain valid characters"
          ansible.builtin.assert:
            that:
              - dir.key is regex("^[a-zA-Z0-9/_.-]*$")
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
            fail_msg: "With a relative DocumentRoot path, only letters, numbers, underscores, dashes and forward slashes are allowed"
          when: dir.key is not regex("^[\/].*$")
          loop: "{{ vhost_config.users_apache_directories | dict2items }}"
          loop_control:
            loop_var: dir
            label: "{{ dir.key }}"

        - name: "Include checks for the Apache directives in the users_apache_directories dictionaries for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.include_tasks: user_check_vhost_dir.yml
          loop: "{{ vhost_config.users_apache_directories | dict2items }}"
          loop_control:
            loop_var: dir
            label: "{{ dir.key }}"

      when: vhost_config.users_apache_directories is defined

    - name: "Checks for the Apache DocumentRoot Directory for {{ vhost.key }} VirtualHost for {{ user.key }}"
      block:

        - name: "Check that users_apache_type for {{ vhost.key }} VirtualHost for {{ user.key }} is set to php, fcgi, cgi or static if it is defined"
          ansible.builtin.assert:
            that:
              - vhost.value.users_apache_type is regex('^php|php[+]cgi|php[+]fcgi|cgi|fcgi|static$')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: vhost.value.users_apache_type is defined

        - name: "Include checks for the Apache directives in the users_apache_directories dictionaries for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.include_tasks: user_check_vhost_dir.yml
          vars:
            dir: "{{ vhost.value | dict2items }}"

      when: ( users_apache_vhost_docroot is not defined ) or ( users_apache_vhost_docroot is defined and users_apache_vhost_docroot )

    - name: Proxy checks
      block:

        - name: Debug vhost.value.users_apache_proxy
          ansible.builtin.debug:
            var: vhost.value.users_apache_proxy
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
          tags:
            - debug

        - name: "Proxy checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.include_tasks: user_check_proxy.yml
          loop: "{{ vhost.value.users_apache_proxy }}"
          loop_control:
            loop_var: proxy

      when: vhost.value.users_apache_proxy is defined

    - name: "ErrorDocument checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
      block:

        - name: "Check that the code and path values for users_apache_error_docs are valid for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.assert:
            that:
              - doc.code is defined
              - doc.code is regex('^4|5[0-9][0-9]$')
              - doc.path is defined
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ vhost.value.users_apache_error_docs }}"
          loop_control:
            loop_var: doc

      when: vhost.value.users_apache_error_docs is defined

    - name: "CMS checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
      block:

        - name: "Check that users_cms is set to mediawiki, flarum, moodle, nextcloud, kimai, drupal, wordpress, matomo or phpmyadmin for {{ vhost.key }} VirtualHost for {{ user.key }} if it is defined"
          ansible.builtin.assert:
            that:
              - vhost.value.users_cms is regex("mediawiki|flarum|moodle|nextcloud|kimai|drupal|wordpress|matomo|phpmyadmin")
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: "Drupal checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.include_tasks: cms_check_drupal.yml
          when: vhost.value.users_cms == "drupal"

        - name: "Kimai checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.include_tasks: cms_check_kimai.yml
          when: vhost.value.users_cms == "kimai"

        - name: "Matomo checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.include_tasks: cms_check_matomo.yml
          when: vhost.value.users_cms == "matomo"

        - name: "Nextcloud checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.include_tasks: cms_check_nextcloud.yml
          when: vhost.value.users_cms == "nextcloud"

        - name: "phpMyAdmin checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.include_tasks: cms_check_phpmyadmin.yml
          when: vhost.value.users_cms == "phpmyadmin"

        - name: "WordPress checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.include_tasks: cms_check_wordpress.yml
          when: vhost.value.users_cms == "wordpress"

        - name: "MediaWiki checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.include_tasks: cms_check_mediawiki.yml
          when: vhost.value.users_cms == "mediawiki"

        - name: "Flarum checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.include_tasks: cms_check_flarum.yml
          when: vhost.value.users_cms == "flarum"

        - name: "Moodle checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
          ansible.builtin.include_tasks: cms_check_moodle.yml
          when: vhost.value.users_cms == "moodle"

      when: vhost.value.users_cms is defined

  tags:
    - users
...
