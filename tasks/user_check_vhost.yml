---
- name: "Check the DocumentRoot for the {{ vhost.key }} VirtualHost for {{ user.key }} contains valid characters"
  assert:
    that:
      - vhost.key is regex("^[a-zA-Z0-9/_-]*$")
    fail_msg: "Only letters, numbers, underscores, dashes and forward slashes can be present in the DocumentRoot path"

- name: "Check that the {{ vhost.key }} VirtualHost for {{ user.key }} has a ServerName"
  assert:
    that:
      - vhost.value.users_apache_server_name is defined
      - vhost.value.users_apache_server_name | length

- name: "Check that the {{ vhost.key }} VirtualHost for {{ user.key }} has a ServerName that resolves to a IPv4 address"
  include_tasks: user_check_domain.yml
  vars:
    users_domain: "{{ vhost.value.users_apache_server_name }}"

- name: "Check ServerAlias' for {{ vhost.key }} VirtualHost for {{ user.key }}"
  block:

    - name: "Check that the ServerAlias' for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array"
      assert:
        that:
          - vhost.value.users_apache_server_aliases | length
          - vhost.value.users_apache_server_aliases[0] is defined

    - name: "Check that the {{ vhost.key }} VirtualHost for {{ user.key }} has ServerAlias' that resolve to IPv4 addresses"
      include_tasks: user_check_domain.yml
      vars:
        users_domain: "{{ domain }}"
      loop: "{{ vhost.value.users_apache_server_aliases }}"
      loop_control:
        loop_var: domain
        label: "{{ domain }}"

  when: vhost.value.users_apache_server_aliases is defined

- name: "Check that users_apache_type for {{ vhost.key }} VirtualHost for {{ user.key }} is set to php, cgi or static if it is defined"
  assert:
    that:
      - ( vhost.value.users_apache_type == "php" ) or ( vhost.value.users_apache_type == "cgi" ) or ( vhost.value.users_apache_type == "static" )
  when: vhost.value.users_apache_type is defined

- name: "Check that users_apache_robots is set to deny is defined for {{ vhost.key }} VirtualHost for {{ user.key }} if it is defined"
  assert:
    that:
      - vhost.value.users_apache_robots == "deny"
  when: vhost.value.users_apache_robots is defined

- name: "Check that users_apache_expires is set to medium or strict for {{ vhost.key }} VirtualHost for {{ user.key }} if it is defined"
  assert:
    that:
      - ( vhost.value.users_apache_expires == "medium" ) or ( vhost.value.users_apache_expires == "strict" )
  when: vhost.value.users_apache_expires is defined

- name: "Check that users_cms is set to wordpress, matomo or phpmyadmin for {{ vhost.key }} VirtualHost for {{ user.key }} if it is defined"
  assert:
    that:
      - ( vhost.value.users_cms == "wordpress" ) or ( vhost.value.users_cms == "matomo" ) or ( vhost.value.users_cms == "phpmyadmin" )
  when: vhost.value.users_cms is defined

- name: "Check users_apache_htauth_users for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
  block:

    - name: "Check the users_apache_htauth_users names for {{ vhost.key }} VirtualHost for {{ user.key }} are valid if defined"
      assert:
        that:
          - htuser.name is defined
          - htuser.name is regex("^[a-zA-Z0-9_-]*$")
      loop: "{{ vhost.value.users_apache_htauth_users }}"
      loop_control:
        loop_var: htuser
        label: "{{ htuser }}"

    - name: "Check that the users_apache_htauth_users passwords for {{ vhost.key }} VirtualHost for {{ user.key }} are defined"
      assert:
        that:
          - htuser.password is defined
      when: ( htuser.state is not defined ) or ( htuser.state == "present" )
      loop: "{{ vhost.value.users_apache_htauth_users }}"
      loop_control:
        loop_var: htuser
        label: "{{ htuser }}"

    - name: "Check that users_apache_htauth_users state is set to present or absent for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - ( htuser.state == "present" ) or ( htuser.state == "absent" )
      when: htuser.state is defined
      loop: "{{ vhost.value.users_apache_htauth_users }}"
      loop_control:
        loop_var: htuser
        label: "{{ htuser }}"

  when: vhost.value.users_apache_htauth_users is defined

- name: "Check users_apache_locations for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
  block:

    # https://httpd.apache.org/docs/2.4/mod/mod_authn_core.html#authtype
    - name: "Check authtype is set to None, Basic, Digest or Form for users_apache_locations for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - ( location.authtype == "None" ) or ( location.authtype == "Basic" ) or ( location.authtype == "Digest" ) or ( location.authtype == "Form" )
      when: location.authtype is defined 
      loop: "{{ vhost.value.users_apache_locations }}"
      loop_control:
        loop_var: location
        label: "{{ location }}"

#    # https://httpd.apache.org/docs/2.4/mod/mod_authz_core.html#require
#    - name: "Check that require is set to a valid option for users_apache_locations for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
#      assert:
#        that:
#          - ( location.require == "all granted" ) or ( location.require == "all denied" ) or ( location.require is match("method\ .*") ) or ( location.require is match("user\ .*") ) or ( location.require == "valid-user" ) or ( location.require is match("ip\ .*") )
#      when: location.require is defined
#      loop: "{{ vhost.value.users_apache_locations }}"
#      loop_control:
#        loop_var: location
#        label: "{{ location }}"

  when: vhost.value.users_apache_locations is defined

# TODO users_apache_options

- name: "Check that only valid Options are listed for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
  block:

    - name: "Check that the Options for {{ vhost.key }} VirtualHost for {{ user.key }} are a non-empty array"
      assert:
        that:
          - vhost.value.users_apache_options | length
          - vhost.value.users_apache_options[0] is defined

    - name: "Check that all Options are valid and start with a + or - for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - option is regex("^[\+|-]All|ExecCGI|FollowSymLinks|Includes|IncludesNOEXEC|Indexes|MultiViews|SymLinksIfOwnerMatch$") 
      loop: "{{ vhost.value.users_apache_options }}"
      loop_control:
        loop_var: option
        label: "{{ option }}"

  when: vhost.value.users_apache_options is defined

# TODO users_apache_override

# TODO users_apache_index
...
