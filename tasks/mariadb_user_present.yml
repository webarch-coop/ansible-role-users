---
- name: "Stat {{ item.value.users_home | default('/home/' + item.key) }}/.my.cnf"
  stat:
    path: "{{ item.value.users_home | default('/home/' + item.key) }}/.my.cnf"
  register: users_mycnf

# Generate a password
- block:

    - name: "Generate a random password for {{ item.key }} MaridaDB account as ~/.my.cnf doesn't exist"
      command: pwgen -n 20 1
      register: users_mariadb_password_gen

    - name: Set a fact for the mariadb_password
      set_fact:
        users_mariadb_password: "{{ users_mariadb_password_gen.stdout | trim | quote }}"

  when: users_mycnf.stat.exists == False

# Read a password
- block:

    - name: "MariaDB password loaded from {{ item.value.users_home | default('/home/' + item.key) }}/.my.cnf"
      shell: "my_print_defaults --defaults-file='{{ item.value.users_home | default('/home/' + item.key) }}/.my.cnf' client | grep '^--password' | sed -e 's/--password=//'"
      register: users_mariadb_password_read

    - name: Set a fact for the mariadb_password
      set_fact:
        users_mariadb_password: "{{ users_mariadb_password_read.stdout | trim | quote }}"

  when: users_mycnf.stat.exists == True

- debug:
    msg: "users_mariadb_password: {{ users_mariadb_password }}"
    verbosity: 3

- fail:
    msg: "The mariadb_password appears not to be set"
  when: ( users_mariadb_password is not defined ) or ( users_mariadb_password == "" )

- name: "mariadb_password written to {{ users_mycnf }}"
  template:
    src: templates/my.cnf.j2
    dest: "{{ item.value.users_home | default('/home/' + item.key) }}/.my.cnf"
    owner: "{{ item.key }}"
    group: "{{ item.value.users_group | default(item.key) }}"
    mode: 0400
    force: true

- name: "Databases that {{ item.key }} should have access to"
  debug:
    msg: "{{ db }}"
    verbosity: 1
  loop: "{{ users_mariadb_databases }}"
  loop_control:
    loop_var: db
  when: ( users_mariadb_databases != "" ) or ( users_mariadb_databases != [] ) and ( users_mariadb_databases is defined )

- name: "Databases present for {{ item.key }}"
  mysql_db:
    name: "{{ db }}"
    state: present
  loop: "{{ users_mariadb_databases }}"
  loop_control:
    loop_var: db
  when: ( users_mariadb_databases != "" ) or ( users_mariadb_databases != [] ) and ( users_mariadb_databases is defined )

- name: "Set a variable for mysql_user priv for {{ item.key }}"
  set_fact:
    users_mariadb_priv: "{% if users_mariadb_databases[0] is defined %}{% for db in users_mariadb_databases %}{{ db }}.*:ALL{% if not loop.last %}/{% endif %}{% endfor %}{% else %}*.*:USAGE{% endif %}"

- name: "Print priv for {{ item.key }}"
  debug:
    var: users_mariadb_priv
    verbosity: 1

- name: "MariaDB {{ item.key }} user present"
  mysql_user:
    login_user: root
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: "{{ item.key }}"
    password: "{{ users_mariadb_password }}"
    priv: "{{ users_mariadb_priv }}"
    state: present
    update_password: always
