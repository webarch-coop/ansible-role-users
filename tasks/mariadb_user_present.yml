# Copyright 2018-2024 Chris Croome
#
# This file is part of the Webarchitects Users Ansible role.
#
# The Webarchitects Users Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Users Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Users Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: "MariaDB account and databases present for {{ user.key }}"
  block:

    - name: "Stat {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.my.cnf"
      ansible.builtin.stat:
        path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.my.cnf"
      register: users_mycnf

    - name: "Generate a MariaDB password for {{ user.key }}"
      block:

        - name: "Generate a random password for {{ user.key }} MariaDB account as ~/.my.cnf doesn't exist"
          ansible.builtin.command: "pwgen -n {{ 30 | random(20) }} 1"
          no_log: true
          register: users_mariadb_password_gen

        - name: "Set a fact for the mariadb_password for {{ user.key }}"
          ansible.builtin.set_fact:
            users_mariadb_password: "{{ users_mariadb_password_gen.stdout | trim | quote }}"
          no_log: true

      when: not users_mycnf.stat.exists

    - name: "Read the MariaDB password for {{ user.key }}"
      block:

        - name: "MariaDB password read from {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.my.cnf"
          ansible.builtin.command: "my_print_defaults --defaults-file='{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.my.cnf' client"
          changed_when: false
          check_mode: false
          register: users_my_print_defaults
          no_log: true

        - name: Set a fact for the mariadb_password
          ansible.builtin.set_fact:
            users_mariadb_password: "{{ line | regex_replace('^--password=') | trim }}"
          when: line is regex('^--password=')
          loop: "{{ users_my_print_defaults.stdout_lines }}"
          loop_control:
            loop_var: line
          no_log: true

      when: users_mycnf.stat.exists

    - name: Fail when MariaDB password not set
      ansible.builtin.fail:
        msg: "The mariadb_password appears not to be set"
      when: ( users_mariadb_password is not defined ) or ( users_mariadb_password | length == 0 )

    - name: "mariadb_password written to {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.my.cnf"
      ansible.builtin.template:
        src: my.cnf.j2
        dest: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.my.cnf"
        owner: "{{ user.key }}"
        group: "{{ user.value.users_group | default(user.key) }}"
        mode: "0400"
        force: true
      no_log: true

    - name: "Alias mycli via ~/.bash_aliases to set the MariaDB user"
      ansible.builtin.lineinfile:
        path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.bash_aliases"
        regexp: '^alias mycli='
        line: 'alias mycli="mycli -u {{ user.key }}"'
        state: present
        create: true
        mode: "0600"
        owner: "{{ user.key }}"
        group: "{{ user.value.users_group | default(user.key) }}"

    - name: "The databases that {{ user.key }} has access to"
      ansible.builtin.command: mysql -B -N -e "SELECT Db FROM mysql.db WHERE User='{{ user.key }}';" mysql
      changed_when: false
      check_mode: false
      register: users_mariadb_list

    - name: "Set a fact for the databases to delete for {{ user.key }}"
      ansible.builtin.set_fact:
        users_mariadb_delete_list: "{{ users_mariadb_list.stdout_lines | difference(user.value.users_mariadb_databases) }}"

    - name: "Databases absent for {{ user.key }}"
      community.mysql.mysql_db:
        name: "{{ db }}"
        state: absent
        login_user: root
        login_unix_socket: /var/run/mysqld/mysqld.sock
      loop: "{{ users_mariadb_delete_list }}"
      when: ( users_mariadb_delete_list is defined ) and ( users_mariadb_delete_list != [] )
      loop_control:
        loop_var: db
        label: "{{ db }}"

    - name: "Databases present for {{ user.key }}"
      community.mysql.mysql_db:
        name: "{{ db }}"
        state: present
        login_user: root
        login_unix_socket: /var/run/mysqld/mysqld.sock
      loop: "{{ user.value.users_mariadb_databases }}"
      loop_control:
        loop_var: db
        label: "{{ db }}"

    - name: "Stat {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.myclirc"
      ansible.builtin.stat:
        path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.myclirc"
      register: users_myclirc_conf

    - name: "Edit myclir config file ~/.myclirc for {{ user.key }}"
      community.general.ini_file:
        path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.myclirc"
        section: alias_dsn
        option: "{{ users_db }}"
        value: "mysql://{{ user.key }}@localhost/{{ users_db }}"
        owner: "{{ user.key }}"
        group: "{{ user.value.users_group | default(user.key) }}"
        mode: "0600"
      loop: "{{ user.value.users_mariadb_databases }}"
      loop_control:
        loop_var: users_db
      when:
        - users_myclirc_conf.stat.exists | bool
        - user.value.users_mariadb_databases is defined
        - user.value.users_mariadb_databases != []

    - name: "Template mycli config file ~/.myclirc for {{ user.key }}"
      ansible.builtin.template:
        src: myclirc.j2
        dest: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.myclirc"
        owner: "{{ user.key }}"
        group: "{{ user.value.users_group | default(user.key) }}"
        mode: "0600"
        force: true
      when:
        - not users_myclirc_conf.stat.exists | bool
        - user.value.users_mariadb_databases is defined
        - user.value.users_mariadb_databases != []

    - name: "Set a variable for mysql_user db priv for {{ user.key }} using the default privileges"
      ansible.builtin.set_fact:
        users_mariadb_priv: "{% if user.value.users_mariadb_databases[0] is defined %}{% for db in user.value.users_mariadb_databases %}{{ db }}.*:{% for p in users_mariadb_database_privileges %}{{ p }}{% if not loop.last %},{% endif %}{% endfor %}{% if not loop.last %}/{% endif %}{% endfor %}{% else %}*.*:USAGE{% endif %}"
      when: user.value.users_mariadb_database_privileges is not defined

    - name: "Set a variable for mysql_user db priv for {{ user.key }} when they have privileges defined"
      ansible.builtin.set_fact:
        users_mariadb_priv: "{% if user.value.users_mariadb_databases[0] is defined %}{% for db in user.value.users_mariadb_databases %}{{ db }}.*:{% for p in user.value.users_mariadb_database_privileges %}{{ p }}{% if not loop.last %},{% endif %}{% endfor %}{% if not loop.last %}/{% endif %}{% endfor %}{% else %}*.*:USAGE{% endif %}"
      when: ( user.value.users_mariadb_database_privileges is defined ) and ( user.value.users_mariadb_database_privileges != [] )

    - name: "Print db priv for {{ user.key }}"
      ansible.builtin.debug:
        var: users_mariadb_priv

    - name: "MariaDB {{ user.key }} user present"
      community.mysql.mysql_user:
        name: "{{ user.key }}"
        password: "{{ users_mariadb_password }}"
        host: localhost
        priv: "{{ users_mariadb_priv }}"
        state: present
        update_password: always
        login_user: root
        login_unix_socket: /var/run/mysqld/mysqld.sock
      no_log: "{% if ansible_verbosity != 0 %}false{% else %}true{% endif %}"

    - name: "Stat {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.notify_mariadb_passwd file"
      ansible.builtin.stat:
        path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.notify_mariadb_passwd"
      register: users_notify_mariadb_passwd_file
      when: ( user.value.users_mariadb_notify_passwd is defined ) and ( user.value.users_mariadb_notify_passwd )

    - name: Notify password
      block:

        - name: "Password notification email sent to {{ user.value.users_email }}"
          community.general.mail:
            from: "{{ users_notify_from | default('Webarchitects') | quote }} <root@{{ inventory_hostname }}>"
            to: "{{ user.value.users_name | default(user.key) | quote }} <{{ user.value.users_email }}>"
            subject: "[{{ users_notify_subject_tag | default('webarchitects') }}] MariaDB Password for {{ user.key }} on {{ inventory_hostname }}"
            headers: "{{ users_notify_headers }}"
            charset: us-ascii
            body: "{{ lookup('template', 'notify_passwd_mariadb.j2') }}"
            host: localhost
            port: 25
            secure: never
          when: ( user.value.users_email is defined ) and ( user.value.users_email | length > 0 )

        - name: "Notification date recorded in {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.notify_mariadb_passwd file"
          ansible.builtin.lineinfile:
            path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.notify_mariadb_passwd"
            line: "{{ lookup('pipe', 'date +%Y-%m-%d-%H-%M-%S') }} : {{ user.value.users_name | default(user.key) }} <{{ user.value.users_email }}>"
            create: true
            state: present
            insertafter: EOF
            owner: root
            group: "{{ user.key }}"
            mode: "0640"

      when: ( user.value.users_mariadb_notify_passwd is defined ) and ( user.value.users_mariadb_notify_passwd ) and ( not users_notify_mariadb_passwd_file.stat.exists )

    - name: Directory present for database backups
      ansible.builtin.file:
        path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/private/mysql-backups"
        state: directory
        owner: "{{ user.key }}"
        group: "{{ user.value.users_group | default(user.key) }}"
        mode: "0700"

  tags:
    - users
    - mariadb
...
