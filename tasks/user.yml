---
- name: "Set a fact for the {{ user.key }} users own group as a list"
  ansible.builtin.set_fact:
    users_own_group:
      - "{{ user.key }}"
  tags:
    - users

- name: "Set a fact for the {{ user.key }} users groups which includes the users own group, as a list"
  ansible.builtin.set_fact:
    users_all_groups:
      - "{{ user.value.users_groups | default(omit) + users_own_group }}"
  when: ( user.value.users_groups is defined ) and ( user.value.users_groups != [] )
  tags:
    - users

- name: "Print debugging info for {{ user.key }}"
  ansible.builtin.debug:
    msg:
      - "name: {{ user.key }}"
      - "group: {{ user.value.users_group | default(user.key) }}"
      - "groups: {{ user.value.users_groups | default([]) | join(',') or \ omit }}"
      - "all groups: {{ users_all_groups | default([]) | join(',') or \ omit }}"
      - "home: {{ user.value.users_home | default(users_basedir + '/' + user.key) }}"
      - "email: {% if user.value.users_email is defined %}{{ user.value.users_email }}{% endif %}"
      - "shell: {{ user.value.users_shell | default('/bin/bash', true) }}"
      - "skeleton: {{ user.value.users_skel | default('') }}"
      - "system: {{ user.value.users_system | default('false', false) }}"
      - "editor: {{ user.value.users_editor | default('vim', true) }}"
      - "home owner: {{ user.value.users_home_owner | default(user.key) }}"
      - "home group: {{ user.value.users_home_group | default(user.key) }}"
      - "home mode: {{ user.value.users_home_mode | default('0700') }}"
      - "generate ssh key: {{ user.value.users_generate_ssh_key | default('false') }}"
      - "SSH public key URLs:{% if user.value.users_ssh_public_keys is defined %}{% for url in user.value.users_ssh_public_keys %} {{ url }}{% endfor %}{% endif %}"
    verbosity: 2

# TODO Check that the user doesn't already exist in getent_passwd
- name: "User account for {{ user.key }} present"
  ansible.builtin.user:
    name: "{{ user.key }}"
    group: "{{ user.value.users_group | default(user.key) }}"
    groups: "{{ users_all_groups | default([]) | join(',') or \ omit }}"
    home: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}"
    create_home: true
    shell: "{{ user.value.users_shell | default('/bin/bash', true) }}"
    skeleton: "{{ user.value.users_skel | default('') }}"
    generate_ssh_key: "{{ user.value.users_generate_ssh_key | default('false') }}"
    system: "{{ user.value.users_system | default('no', false) }}"
  when: user.key != "root"
  tags:
    - users

- name: "Chown and chmod user home directory owner to {{ user.value.users_home_owner | default(user.key) }}:{{ user.value.users_home_group | default(user.value.users_group) | default(user.key) }} {{ user.value.users_home_mode | default('0750') }}"
  ansible.builtin.file:
    path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}"
    state: directory
    mode: "{{ user.value.users_home_mode | default('0750') }}"
    owner: "{{ user.value.users_home_owner | default(user.key) }}"
    group: "{{ user.value.users_home_group | default(user.value.users_group) | default(user.key) }}"
  tags:
    - users

- name: "Debug private files touched for {{ user.key }}"
  ansible.builtin.debug:
    msg:
      - "path: {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ file.path }}"
      - "state: {{ file.state }}"
      - "mode: {{ file.mode }}"
      - "owner: {{ file.owner | default(user.key) }}"
      - "group: {{ file.group | default(user.value.users_group) | default(user.key) }}"
      - "access_time: preserve"
      - "modification_time: preserve"
    verbosity: 2
  when:
    - ( user.value.users_system is not defined ) or ( user.value.users_system is defined and not user.value.users_system )
    - ( users_private_files is defined ) and ( users_private_files[0] is defined )
  loop: "{{ users_private_files }}"
  loop_control:
    loop_var: file
    label: "{{ file.path }}"

- name: "Private direct9ories and files present for {{ user.key }}"
  ansible.builtin.file:
    path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ file.path }}"
    state: "{{ file.state }}"
    mode: "{{ file.mode | default('0600') }}"
    owner: "{{ file.owner | default(user.key) }}"
    group: "{{ file.group | default(user.value.users_group) | default(user.key) }}"
    access_time: preserve
    modification_time: preserve
  when:
    - ( user.value.users_system is not defined ) or ( user.value.users_system is defined and not user.value.users_system )
    - ( users_private_files is defined ) and ( users_private_files[0] is defined )
  loop: "{{ users_private_files }}"
  loop_control:
    loop_var: file
    label: "{{ file }}"
  tags:
    - users

- name: "SSH public keys present for {{ user.key }}"
  ansible.builtin.include_tasks: ssh.yml
  when: ( user.value.users_ssh_public_keys is defined ) and ( user.value.users_ssh_public_keys != [] )
  tags:
    - users

- name: "Generate SSH ECDSA keypair for {{ user.key }}"
  ansible.builtin.command: ssh-keygen -q -t ed25519 -f "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.ssh/id_ed25519" -q -N "" -C "ansible-generated on {{ ansible_hostname }}"
  args:
    creates: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.ssh/id_ed25519"
  become: true
  become_user: "{{ user.key }}"
  when: ( user.value.users_generate_ssh_key is defined ) and ( user.value.users_generate_ssh_key )
  tags:
    - users

- name: "Set default editor for {{ user.key }}"
  ansible.builtin.copy:
    src: "files/{{ user.value.users_editor }}/selected_editor"
    dest: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.selected_editor"
    mode: "0644"
    owner: "{{ user.key }}"
    group: "{{ user.value.users_group | default(user.key) }}"
  when:
    - ( user.value.users_editor is defined ) and ( user.value.users_editor | length > 0 )
  tags:
    - users

- name: Nano and Vim tasks
  block:

    - name: "~/.vimrc present for {{ user.key }}"
      ansible.builtin.copy:
        src: "files/vim/vimrc"
        dest: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.vimrc"
        force: false
        mode: "0644"
        owner: "{{ user.key }}"
        group: "{{ user.value.users_group | default(user.key) }}"

    - name: "vim set to be default editor for {{ user.key }}"
      ansible.builtin.lineinfile:
        path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.bashrc"
        regexp: '^export EDITOR'
        line: 'export EDITOR="vim"'
        state: present
        create: true
        mode: "0644"
        owner: "{{ user.key }}"
        group: "{{ user.value.users_group | default(user.key) }}"
      when:
        - ( user.value.users_editor is defined ) and ( user.value.users_editor == "vim" )

    - name: "~/.nanorc present for {{ user.key }}"
      ansible.builtin.copy:
        src: "files/nano/nanorc"
        dest: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.nanorc"
        force: false
        mode: "0644"
        owner: "{{ user.key }}"
        group: "{{ user.value.users_group | default(user.key) }}"

    - name: "nano set to be default editor for {{ user.key }}"
      ansible.builtin.lineinfile:
        path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.bashrc"
        regexp: '^export EDITOR'
        line: 'export EDITOR="nano"'
        state: present
        create: true
        mode: "0644"
        owner: "{{ user.key }}"
        group: "{{ user.value.users_group | default(user.key) }}"
      when:
        - ( user.value.users_editor is defined ) and ( user.value.users_editor == "nano" )

  when:
    - ( user.value.users_system is not defined ) or ( user.value.users_system is defined and not user.value.users_system )
  tags:
    - users

- name: ".gitconfig in place for {{ user.key }}"
  ansible.builtin.template:
    src: gitconfig.j2
    dest: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.gitconfig"
    mode: "0644"
    owner: "{{ user.key }}"
    group: "{{ user.value.users_group | default(user.key) }}"
    force: false
  when:
    - ( user.value.users_system is not defined ) or ( user.value.users_system is defined and not user.value.users_system )
    - ( user.value.users_name is defined ) and ( user.value.users_name | length > 0 )
    - ( user.value.users_email is defined ) and ( user.value.users_email | length > 0 )
  tags:
    - users

# TODO Generate README to document the account, MySQL, Apache etc.
...
