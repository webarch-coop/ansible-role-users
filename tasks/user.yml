---
- name: "Set a fact for the {{ item.key }} users own group as a list"
  set_fact:
    users_own_group:
      - "{{ item.key }}"
  tags:
    - users-update

- name: "Set a fact for the {{ item.key }} users groups which includes the users own group, as a list"
  set_fact:
    users_all_groups:
      - "{{ item.value.users_groups | default(omit) + users_own_group }}"
  when: ( item.value.users_groups is defined ) and ( item.value.users_groups != [] )
  tags:
    - users-update

- name: "Print debugging info for {{ item.key }}"
  debug:
    msg:
      - "name: {{ item.key }}"
      - "group: {{ item.value.users_group | default(item.key) }}"
      - "groups: {{ item.value.users_groups | default([]) | join(',') or \ omit }}"
      - "all groups: {{ users_all_groups | default([]) | join(',') or \ omit}}"
      - "home: {{ item.value.users_home | default('/home/' + item.key) }}"
      - "shell: {{ item.value.users_shell | default('/bin/bash', true) }}"
      - "skeleton: {{ item.value.users_skel | default(omit) }}"
      - "system: {{ item.value.users_system | default('no', false) }}"
      - "editor: {{ item.value.users_editor | default('vim', true) }}"
      - "home owner: {{ item.value.users_home_owner | default(item.key) }}"
      - "home group: {{ item.value.users_home_group | default(item.key) }}"
      - "home mode: {{ item.value.users_home_mode | default(0700) }}"
      - "generate ssh key: {{ item.value.users_generate_ssh_key | default('false') }}"
      # - "email: {{ item.value.users_email }}"
    verbosity: 1

- name: "User account for {{ item.key }} present"
  user:
    name: "{{ item.key }}"
    group: "{{ item.value.users_group | default(item.key) }}"
    groups: "{{ users_all_groups | default([]) | join(',') or \ omit }}"
    home: "{{ item.value.users_home | default('/home/' + item.key) }}"
    create_home: true
    shell: "{{ item.value.users_shell | default('/bin/bash', true) }}"
    skeleton: "{{ item.value.users_skel | default(omit) }}"
    generate_ssh_key: "{{ item.value.users_generate_ssh_key | default('false') }}"
    system: "{{ item.value.users_system | default('no', false) }}"
  tags:
    - users-update

- name: "Chown user home directory owner to {{ item.value.users_home_owner | default(item.key) }}"
  file:
    path: "{{ item.value.users_home | default('/home/' + item.key) }}"
    state: directory
    owner: "{{ item.value.users_home_owner | default(item.key) }}"
  tags:
    - users-update

- name: "Chown user home directory group to {{ item.value.users_home_group | default(item.key) }}"
  file:
    path: "{{ item.value.users_home | default('/home/' + item.key) }}"
    state: directory
    group: "{{ item.value.users_home_group | default(item.key) }}"
  tags:
    - users-update

- name: "Chmod users home directory {{ item.value.users_home_mode | default('0750') }}"
  file:
    path: "{{ item.value.users_home | default('/home/' + item.key) }}"
    state: directory
    mode: "{{ item.value.users_home_mode | default('0750') }}"
  tags:
    - users-update

- debug:
    msg: "name: {{ item.key }} | ssh dir: {{ item.value.users_home | default('/home/' + item.key) }}/.ssh"
    verbosity: 1

- name: "SSH private directories present for {{ item.key }}"
  file:
    path: "{{ item.value.users_home | default('/home/' + item.key) }}/.ssh"
    state: directory
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
    mode: 0700
  tags:
    - users-ssh
    - users-update

- name: Check if additional ~/.ssh/authorized_keys_ files are present
  command: "ls {{ item.value.users_home | default('/home/' + item.key) }}/.ssh/authorized_keys_*"
  check_mode: false
  changed_when: false
  register: users_additional_authorized_keys
  tags:
    - users-ssh
    - users-update

- name: Users SSH public keys present
  include_tasks: ssh.yml
  when: ( item.value.users_ssh_public_keys is defined and item.value.users_ssh_public_keys != [] ) or ( users_additional_authorized_keys is defined and users_additional_authorized_keys.stdout_lines != [] ) 
  tags:
    - users-ssh
    - users-update

- name: Set default editor
  copy:
    src: "files/{{ item.value.users_editor }}/selected_editor"
    dest: "{{ item.value.users_home | default('/home/' + item.key) }}/.selected_editor"
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
    mode: 0644
  when: item.value.users_editor is defined and item.value.users_editor != ""
  tags:
    - users-update

- name: .vimrc in place
  copy:
    src: "files/vim/vimrc"
    dest: "{{ item.value.users_home | default('/home/' + item.key) }}/.vimrc"
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
    mode: 0644
  when: item.value.users_editor is defined and item.value.users_editor == 'vim'
  tags:
    - users-update

- debug:
    msg: "bashrc: {{ item.value.users_home | default('/home/' + item.key) }}/.bashrc"
  when: item.value.users_editor is defined and item.value.users_editor == 'vim'

- name: vim set to be default editor
  lineinfile:
    path: "{{ item.value.users_home | default('/home/' + item.key) }}/.bashrc"
    line: 'export EDITOR="vim"'
    state: present
    create: true
  when: item.value.users_editor is defined and item.value.users_editor == 'vim'
  tags:
    - users-update

- name: .gitconfig in place
  template:
    src: templates/gitconfig.j2
    dest: "{{ item.value.users_home | default('/home/' + item.key) }}/.gitconfig"
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
    mode: 0644
  when: ( item.value.users_name is defined and item.value.users_name != "" ) and ( item.value.users_email is defined and item.value.users_email != "" )
  tags:
    - users-update
