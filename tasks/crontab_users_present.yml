---
- name: "{{ item.value.users_home | default(users_basedir + '/' + item.key) }}/bin present"
  file:
    path: "{{ item.value.users_home | default(users_basedir + '/' + item.key) }}/bin"
    state: directory
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
    mode: "0750"
  tags:
    - users-update
    - users-cron

- name: "{{ item.value.users_home | default(users_basedir + '/' + item.key) }}/bin/README.md in place"
  copy:
    src: files/CRON_README.md
    dest: "{{ item.value.users_home | default(users_basedir + '/' + item.key) }}/bin/README.md"
  tags:
    - users-update
    - users-cron

- name: "Check if {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/.cron_min exists"
  stat:
    path: "{{ item.value.users_home | default(users_basedir + '/' + item.key) }}/.cron_min"
  register: users_cron_min_file
  tags:
    - users-update
    - users-cron

- name: "Generate {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/.cron_min"
  shell: "echo {{ 59 | random }} > {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/.cron_min"
  when: ( users_cron_min_file.stat is not defined ) or ( users_cron_min_file.stat.exists == False )
  tags:
    - users-update
    - users-cron

- name: "Read the minute from {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/.cron_min"
  slurp:
    src: "{{ item.value.users_home | default(users_basedir + '/' + item.key) }}/.cron_min"
  register: users_cron_min_b64encoded
  tags:
    - users-update
    - users-cron

- name: Set a variable for the users crontab minute
  set_fact:
    users_cron_min: "{{ users_cron_min_b64encoded['content'] | b64decode | trim }}"
  tags:
    - users-update
    - users-cron

- name: Generate files to be run by root in /etc/cron.d for chrooted users
  block:

    - name: "Daily cron jobs for {{ item.key }}"
      cron:
        name: "Daily cron jobs"
        cron_file: "chroot_cron_daily_{{ item.key }}"
        user: root
        job: "if [ -f {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/bin/cron_daily.sh ]; then /usr/sbin/chroot /chroot-users/{{ item.key }} sudo -u {{ item.key }} PATH={{ users_basedir }}/{{ item.key }}/bin:/usr/local/bin:/usr/bin:/bin TMPDIR={{ item.value.users_home | default(users_basedir + '/' + item.key) }}/tmp /bin/sh {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/bin/cron_daily.sh 2>&1 | mail -E -s '[{{ users_notify_subject_tag }}] Daily cron output from the {{ item.key }} account on {{ inventory_hostname }}' -r '{{ users_notify_from }}' -a '{{ users_notify_cron_append }}' {{ item.value.users_email }}; fi"
        minute: "{{ users_cron_min }}"
        hour: "{{ users_cron_daily_hour | default('05') }}"
      tags:
        - users-update
        - users-cron

    - name: "Hourly cron jobs for {{ item.key }}"
      cron:
        name: "Hourly cron jobs"
        cron_file: "chroot_cron_hourly_{{ item.key }}"
        user: root
        job: "if [ -f {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/bin/cron_hourly.sh ]; then /usr/sbin/chroot /chroot-users/{{ item.key }} sudo -u {{ item.key }} PATH={{ users_basedir }}/{{ item.key }}/bin:/usr/local/bin:/usr/bin:/bin TMPDIR={{ item.value.users_home | default(users_basedir + '/' + item.key) }}/tmp /bin/sh {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/bin/cron_hourly.sh 2>&1 | mail -E -s '[{{ users_notify_subject_tag }}] Hourly cron output from the {{ item.key }} account on {{ inventory_hostname }}' -r '{{ users_notify_from }}' -a '{{ users_notify_cron_append }}' {{ item.value.users_email }}; fi"
        minute: "{{ users_cron_min }}"
        hour: "*"
      tags:
        - users-update
        - users-cron

  when: ( users_chroot_dir is defined ) and ( users_chroot_dir.stat.exists ) and ( "chroot" in item.value.users_groups )

- name: Crontabs present for non-chrooted users
  block:

    - name: "Daily cron jobs for {{ item.key }}"
      cron:
        name: "Daily cron jobs"
        user: "{{ item.key }}"
        job: "if [ -f {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/bin/cron_daily.sh ]; then /bin/sh {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/bin/cron_daily.sh; fi"
        minute: "{{ users_cron_min }}"
        hour: "{{ users_cron_daily_hour | default('05') }}"
      tags:
        - users-update
        - users-cron

    - name: "Hourly cron jobs for {{ item.key }}"
      cron:
        name: "Hourly cron jobs"
        user: "{{ item.key }}"
        job: "if [ -f {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/bin/cron_hourly.sh ]; then /bin/sh {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/bin/cron_hourly.sh; fi"
        minute: "{{ users_cron_min }}"
        hour: "*"
      tags:
        - users-update
        - users-cron

  when: '"chroot" not in item.value.users_groups'

- name: "USER env var added to {{ item.key }} crontab"
  cron:
    env: true
    name: USER
    value: "{{ item.key }}"
    user: "{{ item.key }}"
  tags:
    - users-update
    - users-cron

- name: "TMPDIR env var added to {{ item.key }} crontab"
  cron:
    env: true
    name: TMPDIR
    value: "{{ item.value.users_home | default(users_basedir + '/' + item.key) }}/tmp"
    user: "{{ item.key }}"
    insertafter: USER
  tags:
    - users-update
    - users-cron

- name: "PATH env var added to {{ item.key }} crontab"
  cron:
    env: true
    name: PATH
    value: "/usr/local/bin:/usr/bin:/bin"
    user: "{{ item.key }}"
    insertafter: TMPDIR
  tags:
    - users-update
    - users-cron

- name: "MAILTO env var added to {{ item.key }} crontab"
  cron:
    env: true
    name: MAILTO
    value: "{{ item.value.users_email }}"
    user: "{{ item.key }}"
    insertafter: PATH
  when: item.value.users_email is defined and item.value.users_email != ""
  tags:
    - users-update
    - users-cron

- name: "Daily deletion of users TMPDIR files and directories which are older than {{ users_cron_tmpdir_max_age_days | default('2') }} days old enabled"
  cron:
    name: "Daily deletion of TMPDIR files for {{ item.key }}"
    job: "find -P {{ item.value.users_home | default(users_basedir + '/' + item.key) }}/tmp -type f,d -mtime +{{ users_cron_tmpdir_max_age_days | default('2') }} -delete &>/dev/null"
    state: present
    user: "{{ item.key }}"
    minute: "{{ users_cron_min }}"
    hour: "{{ users_cron_tmpdir_hour }}"
  when:
    - ( users_cron_tmpdir_hour is defined ) and ( "false" not in users_cron_tmpdir_hour )
    - ( item.value.users_cron_tmpdir_clean is not defined ) or ( item.value.users_cron_tmpdir_clean == True )
  tags:
    - users-update
    - users-cron

- name: "Daily deletion of users TMPDIR files and directories which are older than {{ users_cron_tmpdir_max_age_days | default('2') }} days old disabled"
  cron:
    name: "Daily deletion of TMPDIR files for {{ item.key }}"
    state: absent
    user: "{{ item.key }}"
    minute: "{{ users_cron_min }}"
    hour: "{{ users_cron_tmpdir_hour }}"
  when:
    - ( users_cron_tmpdir_hour is defined ) and ( "false" not in users_cron_tmpdir_hour )
    - ( item.value.users_cron_tmpdir_clean is defined ) and ( item.value.users_cron_tmpdir_clean == False )
  tags:
    - users-update
    - users-cron

- name: "Daily MariaDB dump cron job in place for users with databases"
  cron:
    name: "Nightly MySQL database backup for {{ item.key }}"
    job: "/usr/local/bin/mysql-backup-user {{ item.key }}"
    user: "{{ item.key }}"
    minute: "{{ users_cron_min }}"
    hour: "{{ users_cron_mysqldump_hour | default('04') }}"
  when:
    - ( users_mariadb is not defined ) or ( users_mariadb == True )
    - ( item.value.users_mariadb_databases is defined ) and ( item.value.users_mariadb_databases != [] )
  tags:
    - users-update
    - users-cron
...
