# Copyright 2018-2024 Chris Croome
#
# This file is part of the Webarchitects Users Ansible role.
#
# The Webarchitects Users Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Users Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Users Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Cron jobs
  block:

    - name: Check if the users bin directory exists
      ansible.builtin.stat:
        path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}"
      register: users_home_bin_path

    - name: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/README.md in place"
      ansible.builtin.copy:
        src: files/CRON_README.md
        dest: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/README.md"
        mode: "0644"
        owner: root
        group: root
      when:
        - ( users_home_bin_path.stat.exists | bool )
        - ( user.value.users_system is not defined ) or ( not user.value.users_system | bool )

    - name: "Cron minute file {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.cron_min present"
      ansible.builtin.shell: |-
        set -e -o pipefail
        echo {{ 59 | random }} > {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.cron_min
      args:
        executable: "{{ users_bash }}"
        creates: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.cron_min"
      when: ( user.value.users_system is not defined ) or ( not user.value.users_system | bool )

    - name: "Check that the minute file is present at {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.cron_min present"
      ansible.builtin.stat:
        path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.cron_min"
      register: users_cron_min_path

    - name: "Read the minute from {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.cron_min"
      ansible.builtin.slurp:
        src: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.cron_min"
      register: users_cron_min_b64encoded
      when: users_cron_min_path.stat.exists | bool

    - name: "Set a variable for the users crontab minute based on the value in {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.cron_min"
      ansible.builtin.set_fact:
        users_cron_min: "{{ users_cron_min_b64encoded['content'] | b64decode | trim }}"
      when:
        - users_cron_min_path.stat.exists | bool
        - users_cron_min_b64encoded is defined

    - name: "Set a variable for the users crontab minute when a value can't be read from {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.cron_min"
      ansible.builtin.set_fact:
        users_cron_min: "{{ 60 | ansible.builtin.random }}"
      when: not users_cron_min_path.stat.exists | bool

    - name: Generate files to be run by root in /etc/cron.d for chrooted users
      block:

        # Check if the ~/bin/cron_daily.sh exists and is not empty and check
        # if it contains lines that are not comments or simply whitespace
        # if it does then run it in the chroot, as the user and send the
        # user any results in an email
        - name: "Daily cron jobs for {{ user.key }}"
          ansible.builtin.cron:
            name: "Daily cron jobs"
            cron_file: "chroot_cron_daily_{{ user.key }}"
            user: root
            job: >
              if [ -f {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_daily.sh ] &&
              [ $(grep -Ev '^\s*($|#)' {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_daily.sh | wc -l) -gt 0 ];
              then /usr/sbin/chroot {{ users_chroot_users_dir }}/{{ user.key }} sudo -u {{ user.key }}
              PATH={{ users_basedir }}/{{ user.key }}/{{ users_home_bin }}:/usr/local/bin:/usr/bin:/bin
              TMPDIR={{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp
              /bin/sh {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_daily.sh 2>&1 |
              mail -E -s '[{{ users_notify_subject_tag }}] Daily cron output from the {{ user.key }} account on {{ inventory_hostname }}'
              -r '{{ users_notify_from }}' -a '{{ users_notify_cron_append }}' {{ user.value.users_email }}; fi
            minute: "{{ users_cron_min }}"
            hour: "{{ users_cron_daily_hour | default('05') }}"

        - name: "Hourly cron jobs for {{ user.key }}"
          ansible.builtin.cron:
            name: "Hourly cron jobs"
            cron_file: "chroot_cron_hourly_{{ user.key }}"
            user: root
            job: >
              if [ -f {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_hourly.sh ] &&
              [ $(grep -Ev '^\s*($|#)' {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_hourly.sh | wc -l) -gt 0 ];
              then /usr/sbin/chroot {{ users_chroot_users_dir }}/{{ user.key }} sudo -u {{ user.key }}
              PATH={{ users_basedir }}/{{ user.key }}/{{ users_home_bin }}:/usr/local/bin:/usr/bin:/bin
              TMPDIR={{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp
              /bin/sh {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_hourly.sh 2>&1 |
              mail -E -s '[{{ users_notify_subject_tag }}] Hourly cron output from the {{ user.key }} account on {{ inventory_hostname }}'
              -r '{{ users_notify_from }}' -a '{{ users_notify_cron_append }}' {{ user.value.users_email }}; fi
            minute: "{{ users_cron_min }}"
            hour: "*"

        - name: "Minutely cron jobs for {{ user.key }}"
          ansible.builtin.cron:
            name: "Minutely cron jobs"
            cron_file: "chroot_cron_minutely_{{ user.key }}"
            user: root
            job: >
              if [ -f {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_minutely.sh ] &&
              [ $(grep -Ev '^\s*($|#)' {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_minutely.sh | wc -l) -gt 0 ];
              then /usr/sbin/chroot {{ users_chroot_users_dir }}/{{ user.key }} sudo -u {{ user.key }}
              PATH={{ users_basedir }}/{{ user.key }}/{{ users_home_bin }}:/usr/local/bin:/usr/bin:/bin
              TMPDIR={{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp
              /bin/sh {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_minutely.sh 2>&1 |
              mail -E -s '[{{ users_notify_subject_tag }}] Minutely cron output from the {{ user.key }} account on {{ inventory_hostname }}'
              -r '{{ users_notify_from }}' -a '{{ users_notify_cron_append }}' {{ user.value.users_email }}; fi
            minute: "*"
            hour: "*"

      when:
        - ( users_home_bin_path.stat.exists | bool )
        - ( user.value.users_system is not defined ) or ( not user.value.users_system | bool )
        - ( user.value.users_groups is defined ) and ( "chroot" in user.value.users_groups )

    - name: Crontabs present for non-chrooted users
      block:

        - name: "Daily cron jobs for {{ user.key }}"
          ansible.builtin.cron:
            name: "Daily cron jobs"
            user: "{{ user.key }}"
            job: >
              if [ -f {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_daily.sh ] &&
              [ $(grep -Ev '^\s*($|#)' {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_daily.sh | wc -l) -gt 0 ];
              then /bin/sh {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_daily.sh; fi
            minute: "{{ users_cron_min }}"
            hour: "{{ users_cron_daily_hour | default('05') }}"

        - name: "Hourly cron jobs for {{ user.key }}"
          ansible.builtin.cron:
            name: "Hourly cron jobs"
            user: "{{ user.key }}"
            job: >
              if [ -f {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_hourly.sh ] &&
              [ $(grep -Ev '^\s*($|#)' {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_hourly.sh | wc -l) -gt 0 ];
              then /bin/sh {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_hourly.sh; fi
            minute: "{{ users_cron_min }}"
            hour: "*"

        - name: "Minutely cron jobs for {{ user.key }}"
          ansible.builtin.cron:
            name: "Minutely cron jobs"
            user: "{{ user.key }}"
            job: >
              if [ -f {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_minutely.sh ] &&
              [ $(grep -Ev '^\s*($|#)' {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_minutely.sh | wc -l) -gt 0 ];
              then /bin/sh {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/{{ users_home_bin }}/cron_minutely.sh; fi
            minute: "*"
            hour: "*"

      when:
        - ( users_home_bin_path.stat.exists | bool )
        - ( user.value.users_system is not defined ) or ( not user.value.users_system | bool )
        - ( user.value.users_groups is not defined ) or ( user.value.users_groups is defined and "chroot" not in user.value.users_groups )

    - name: "Check if a crontab exists for {{ user.key }}"
      ansible.builtin.command: "crontab -l -u {{ user.key }}"
      check_mode: false
      changed_when: false
      register: users_crontab_list
      failed_when: users_crontab_list.rc is not regex('^0|1')

    - name: Set a fact for the existing crontab
      block:

        - name: "Set a variable from the crontab contents for {{ user.key }}"
          ansible.builtin.set_fact:
            users_crontab: "{{ users_crontab_list.stdout | string | community.general.jc('crontab_u') }}"

        - name: "Debug the crontab for {{ user.key }}"
          ansible.builtin.debug:
            var: users_crontab
            verbosity: 1

        - name: "USER env var added to {{ user.key }} crontab"
          ansible.builtin.cron:
            env: true
            name: USER
            value: "{{ user.key }}"
            user: "{{ user.key }}"

        - name: Check if the ~/tmp directory exists
          ansible.builtin.stat:
            path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp"
          register: users_home_tmp_path

        - name: "TMPDIR env var added to {{ user.key }} crontab"
          ansible.builtin.cron:
            env: true
            name: TMPDIR
            value: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp"
            user: "{{ user.key }}"
            insertafter: USER
            state: "{% if users_home_tmp_path.stat.exists %}present{% else %}absent{% endif %}"

        - name: "Daily deletion of users TMPDIR files and directories which are older than {{ users_cron_tmpdir_max_age_days }} days old enabled"
          ansible.builtin.cron:
            name: "Daily deletion of TMPDIR files for {{ user.key }}"
            job: "find -P {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp -mindepth 1 -type f,d -mtime +{{ users_cron_tmpdir_max_age_days }} -delete &>/dev/null"
            state: present
            user: "{{ user.key }}"
            minute: "{{ users_cron_min }}"
            hour: "{{ users_cron_tmpdir_hour }}"
          when:
            - ( users_home_tmp_path.stat.exists | bool )
            - ( users_cron_tmpdir_hour is defined ) and ( "false" not in users_cron_tmpdir_hour )
            - ( user.value.users_cron_tmpdir_clean is not defined ) or ( user.value.users_cron_tmpdir_clean | bool )
            - ( user.value.users_cron_tmpdir_max_age_days is not defined )

        - name: "Daily deletion of users TMPDIR files and directories which are older than {{ user.value.users_cron_tmpdir_max_age_days }} days old enabled"
          ansible.builtin.cron:
            name: "Daily deletion of TMPDIR files for {{ user.key }}"
            job: "find -P {{ user.value.users_home | default(users_basedir + '/' + user.key) }}/tmp -mindepth 1 -type f,d -mtime +{{ user.value.users_cron_tmpdir_max_age_days }} -delete &>/dev/null"
            state: present
            user: "{{ user.key }}"
            minute: "{{ users_cron_min }}"
            hour: "{{ users_cron_tmpdir_hour }}"
          when:
            - ( users_home_tmp_path.stat.exists )
            - ( users_cron_tmpdir_hour is defined ) and ( "false" not in users_cron_tmpdir_hour )
            - ( user.value.users_cron_tmpdir_clean is not defined ) or ( user.value.users_cron_tmpdir_clean | bool )
            - ( user.value.users_cron_tmpdir_max_age_days is defined )

        - name: "Daily deletion of users TMPDIR files and directories which are older than {{ users_cron_tmpdir_max_age_days | default('2') }} days old disabled"
          ansible.builtin.cron:
            name: "Daily deletion of TMPDIR files for {{ user.key }}"
            state: absent
            user: "{{ user.key }}"
            minute: "{{ users_cron_min }}"
            hour: "{{ users_cron_tmpdir_hour }}"
          when:
            - ( users_cron_tmpdir_hour is defined ) and ( "false" not in users_cron_tmpdir_hour )
            - ( user.value.users_cron_tmpdir_clean is defined ) and ( not user.value.users_cron_tmpdir_clean | bool )

        - name: "HOME env var added to {{ user.key }} crontab"
          ansible.builtin.cron:
            env: true
            name: HOME
            value: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}"
            user: "{{ user.key }}"
            insertafter: USER
            state: present

        - name: "PATH env var added to {{ user.key }} crontab"
          ansible.builtin.cron:
            env: true
            name: PATH
            value: "/usr/local/bin:/usr/bin:/bin"
            user: "{{ user.key }}"
            insertafter: USER
            state: "{% if users_home_bin_path.stat.exists %}present{% else %}absent{% endif %}"

        - name: "MAILTO env var added to {{ user.key }} crontab"
          ansible.builtin.cron:
            env: true
            name: MAILTO
            value: "{{ user.value.users_email }}"
            user: "{{ user.key }}"
            insertafter: USER
            state: "{% if user.value.users_email is defined and user.value.users_email | length > 0 %}present{% else %}absent{% endif %}"

      when: users_crontab_list.rc == 0

    - name: MariaDB CRON tasks
      block:

        - name: Check if /usr/local/bin/mysql-backup-user exists
          ansible.builtin.stat:
            path: /usr/local/bin/mysql-backup-user
          register: users_mysql_backup_script

        - name: Check if ~/.my.cnf exists
          ansible.builtin.stat:
            path: "{{ user.value.users_home | default(users_basedir + '/' + user.key) }}/.my.cnf"
          register: users_home_mycnf_path

        - name: "Daily MariaDB dump cron job in place for users with databases"
          ansible.builtin.cron:
            name: "Nightly MySQL database backup for {{ user.key }}"
            job: "/usr/local/bin/mysql-backup-user {{ user.key }}"
            user: "{{ user.key }}"
            minute: "{{ users_cron_min }}"
            hour: "{{ users_cron_mysqldump_hour | default('04') }}"
          when:
            - ( users_mysql_backup_script.stat.exists | bool ) and ( users_home_mycnf_path.stat.exists | bool )
            - ( user.value.users_mariadb_databases is defined ) and ( user.value.users_mariadb_databases != [] )

      when: ( users_mariadb is defined ) and ( users_mariadb | bool )

    - name: Cron jobs defined at a user level
      block:

        - name: "Cron jobs without a special time, defined at a user level, present or absent"
          ansible.builtin.cron:
            name: "{{ job.name }}"
            job: "{{ job.job }}"
            user: "{{ user.key }}"
            state: "{{ job.state | default('present') }}"
            disabled: "{{ job.disabled | default(False) }}"
            minute: "{{ job.minute | default('*') }}"
            hour: "{{ job.hour | default('*') }}"
            day: "{{ job.day | default('*') }}"
            month: "{{ job.month | default('*') }}"
            weekday: "{{ job.weekday | default('*') }}"
          loop: "{{ user.value.users_cron_jobs }}"
          loop_control:
            loop_var: job
            label: "{{ job.name }}"
          when: ( job.special_time is not defined )

        - name: "Cron jobs with a special time, defined at a user level, present or absent"
          ansible.builtin.cron:
            name: "{{ job.name }}"
            job: "{{ job.job }}"
            user: "{{ user.key }}"
            state: "{{ job.state | default('present') }}"
            disabled: "{{ job.disabled | default(False) }}"
            special_time: "{{ job.special_time }}"
          loop: "{{ user.value.users_cron_jobs }}"
          loop_control:
            loop_var: job
            label: "{{ job.name }}"
          when: ( job.special_time is defined )

      when: ( user.value.users_cron_jobs is defined ) and ( user.value.users_cron_jobs != [] )

  tags:
    - users
...
