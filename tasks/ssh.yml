---
- name: SSH public keys downloaded
  get_url:
    url: "{{ key_url }}"
    dest: "{{ item.value.users_home | default('/home/' + item.key) }}/.ssh/authorized_keys_{{ key_idex }}"
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
    mode: 0600
    force: true
  loop: "{{ item.value.users_ssh_public_keys }}"
  loop_control:
    loop_var: key_url
    index_var: key_idex
  tags:
    - users-ssh
    - users-update

- name: cat all the authorized_keys_* public keys to authorized_keys
  shell: "rm {{ item.value.users_home | default('/home/' + item.key) }}/.ssh/authorized_keys && for a in $(ls {{ item.value.users_home | default('/home/' + item.key) }}/.ssh/authorized_keys_*); do cat ${a} >> {{ item.value.users_home | default('/home/' + item.key) }}/.ssh/authorized_keys; done && chown {{ item.key }}:{{ item.key }} {{ item.value.users_home | default('/home/' + item.key) }}/.ssh/authorized_keys && chmod 600 {{ item.value.users_home | default('/home/' + item.key) }}/.ssh/authorized_keys"
  register: users_ssh_public_keys_content
  tags:
    - users-ssh
    - users-update

# More work would be needed above before the Ansible authorized_key module could be used
# - name: SSH public keys present
#   authorized_key:
#     user: "{{ item.key }}"
#     state: present
#     exclusive: false
#     key: "{{ users_ssh_public_keys_content.stdout_lines }}"
#   tags:
#     - users-update
