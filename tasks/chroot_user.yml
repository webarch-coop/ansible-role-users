---
- block:

    - name: "Remove {{ item.key }} from {{ chroot_dir | default('/chroot') }}/etc/passwd"
      lineinfile:
        path: "{{ chroot_dir | default('/chroot') }}/etc/passwd"
        regexp: "^{{ item.key }}:"
        state: absent

    - name: "Remove {{ item.key }} from {{ chroot_dir | default('/chroot') }}/etc/group"
      lineinfile:
        path: "{{ chroot_dir | default('/chroot') }}/etc/group"
        regexp: "^{{ item.key }}:"
        state: absent

    - name: "Check if {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/home/{{ item.key }} exists"
      stat:
        path: "{{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/home/{{ item.key }}"
      register: users_chroot_home_mountpoint_stat

    - name: "Delete {{ chroot_dir | default('/chroot') }}/home/{{ item.key }}"
      file:
        path: "{{ chroot_dir | default('/chroot') }}/home/{{ item.key }}"
        state: absent
      when: users_chroot_home_mountpoint_stat.stat.exists

    - name: "Check if {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/home/{{ item.key }} is mounted"
      shell: "mountpoint {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/home/{{ item.key }}"
      register: users_chroot_home_mountpoint
      when: users_chroot_home_mountpoint_stat.stat.exists
      changed_when: '"is a mountpoint" in users_chroot_home_mountpoint.stdout'

    - name: "Unmount {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/home/{{ item.key }}"
      command: "umount {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/home/{{ item.key }}"
      register: users_chroot_home_mountpoint_umount
      retries: 2
      delay: 2
      until: '"not mounted" in users_chroot_home_mountpoint_umount.stdout'
      when: users_chroot_home_mountpoint_stat.stat.exists and "is a mountpoint" in users_chroot_home_mountpoint.stdout

    - name: "Remove {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/home/{{ item.key }}"
      mount:
        path: "{{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/home/{{ item.key }}"
        state: absent
        backup: true

    - name: "Check if {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/run/mysqld exists"
      stat:
        path: "{{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/run/mysqld"
      register: users_chroot_mysqld_mountpoint_stat

    - name: "Check if {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/run/mysqld is mounted"
      shell: "mountpoint {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/run/mysqld"
      register: users_chroot_mysqld_mountpoint
      when: users_chroot_mysqld_mountpoint_stat.stat.exists
      changed_when: '"is a mountpoint" in users_chroot_mysqld_mountpoint.stdout'

    - name: "Unmount {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/run/mysqld"
      command: "umount {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/run/mysqld"
      register: users_chroot_mysqld_mountpoint_umount
      retries: 2
      delay: 2
      until: '"not mounted" in users_chroot_mysqld_mountpoint_umount.stdout'
      when: users_chroot_mysqld_mountpoint_stat.stat.exists and "is a mountpoint" in users_chroot_mysqld_mountpoint.stdout

    - name: "Remove {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/run/mysqld"
      mount:
        path: "{{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/run/mysqld"
        state: absent
        backup: true

    - name: "Check if {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }} exists"
      stat:
        path: "{{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}"
      register: users_chroot_mountpoint_stat

    - name: "Check if {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }} is mounted"
      shell: "mountpoint {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}"
      register: users_chroot_mountpoint
      when: users_chroot_mountpoint_stat.stat.exists
      changed_when: '"is a mountpoint" in users_chroot_mountpoint.stdout'

    - name: "Unmount {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}"
      command: "umount {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}"
      register: users_chroot_mountpoint_umount
      retries: 2
      delay: 2
      until: '"not mounted" in users_chroot_mountpoint_umount.stdout'
      when: users_chroot_mountpoint_stat.stat.exists and "is a mountpoint" in users_chroot_mountpoint.stdout

    - name: "Remove {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}"
      mount:
        path: "{{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}"
        state: absent
        backup: true

    - name: "Mount point {{ chroot_dir | default('/chroot') }}/home/{{ item.key }} absent"
      file:
        path: "{{ chroot_dir | default('/chroot') }}/home/{{ item.key }}"
        state: absent

  when: ( item.value.users_state is defined and item.value.users_state == "absent" ) or ( "chroot" not in item.value.users_groups )

- block:

    - name: "Read {{ item.key }} entry from /etc/passwd"
      command: "grep ^{{ item.key }}: /etc/passwd"
      register: users_etc_passwd
      changed_when: false

    - name: "{{ item.key }} present in {{ chroot_dir | default('/chroot') }}/etc/passwd"
      lineinfile:
        path: "{{ chroot_dir | default('/chroot') }}/etc/passwd"
        line: users_etc_passwd.stdout
        state: present

    - name: "Read {{ item.key }} entry from /etc/group"
      command: "grep ^{{ item.key }}: /etc/group"
      register: users_etc_group
      changed_when: false

    - name: "{{ item.key }} present in {{ chroot_dir | default('/chroot') }}/etc/group"
      lineinfile:
        path: "{{ chroot_dir | default('/chroot') }}/etc/group"
        line: users_etc_group.stdout
        state: present

    - name: "Mount point {{ chroot_dir | default('/chroot') }}/home/{{ item.key }} present"
      file:
        path: "{{ chroot_dir | default('/chroot') }}/home/{{ item.key }}"
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: "Mount {{ chroot_dir | default('/chroot') }} at {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}"
      mount:
        path: "{{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}"
        src: "{{ chroot_dir | default('/chroot') }}"
        fstype: ext4
        opts: ro,bind,nosuid
        state: mounted
        backup: true

    - name: "Mount /home/{{ item.key }} at {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/home/{{ item.key }}"
      mount:
        path: "{{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/home/{{ item.key }}"
        src: "/home/{{ item.key }}"
        fstype: ext4
        opts: rw,bind,nodev,nosuid
        state: mounted
        backup: true

    - name: "Mount /run/mysqld at {{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/run/mysqld"
      mount:
        path: "{{ chroot_users_dir | default('/chroot-users') }}/{{ item.key }}/run/mysqld"
        src: /run/mysqld
        fstype: ext4
        opts: ro,bind,nodev,nosuid,noexec
        state: mounted
        backup: true

  when: ( item.value.users_state is undefined or item.value.users_state == "present" ) and ( "chroot" in item.value.users_groups )
