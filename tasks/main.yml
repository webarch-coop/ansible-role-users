---
- name: Slay installed
  apt:
    pkg: slay
    state: present

- name: Check /etc/debian_version
  shell: "lsb_release -c | awk '{ print $2 }'"
  register: users_debian_version_check
  check_mode: false
  changed_when: false
  tags:
    - apache
    - letsencrypt
    - logrotate
    - users-update

- name: Set a fact for the Debian version
  set_fact:
    users_debian_version: "{{ users_debian_version_check.stdout }}"
  tags:
    - apache
    - letsencrypt
    - logrotate
    - users-update

- name: Load package information as facts
  package_facts:
    manager: apt
  tags:
    - apache
    - letsencrypt
    - logrotate
    - users-update

- name: Fail if ansible_facts.packages is not defined or empty
  fail:
    msg: The package_facts array is empty, this could be a result of the Ansible 2.8.x bug https://github.com/ansible/ansible/issues/56921
  when: ( ansible_facts.packages is not defined ) or ( ansible_facts.packages == [] )
  tags:
    - apache
    - letsencrypt
    - logrotate
    - users-update

- name: PHP FPM tasks
  block:

    - name: Check if php-fpm is installed
      shell: "dpkg -s php{% if users_debian_version == 'stretch' %}7.0{% elif users_debian_version == 'buster' %}7.3{% elif users_debian_version == 'bionic' %}7.2{% endif %}-fpm | grep ^Status | awk '{ print $4 }'"
      register: users_phpfpm_status
      check_mode: false
      changed_when: false
      tags:
        - logrotate
        - users-update

    - name: php-fpm variable set
      block:

        - name: Print the users_phpfpm_status
          debug:
            msg: "users_phpfpm_status: {{ users_phpfpm_status.stdout }}"
            verbosity: 1
          tags:
            - logrotate
            - users-update

        - name: Set a fact for the PHP-FPM version
          set_fact:
            users_phpfpm_version: "{% if users_debian_version == 'stretch' %}7.0{% elif users_debian_version == 'buster' %}7.3{% elif users_debian_version == 'bionic' %}7.2{% endif %}"
          when: users_phpfpm_status.stdout == "installed"
          tags:
            - logrotate
            - users-update

      when: ( users_phpfpm_status is defined ) and ( users_phpfpm_status != "" )

  when: ( users_phpfpm is not defined ) or ( users_phpfpm == True )

- name: Check if a chroot exists
  stat:
    path: "{{ chroot_dir | default('/chroot') }}"
  register: users_chroot_dir
  tags:
    - logrotate
    - users-update

- name: Packages present
  apt:
    pkg:
      - vim
    state: present
    update_cache: true

- name: Skel profiles included
  include_tasks: "skel_{{ users_skeleton }}.yml"
  loop:
    - www
  loop_control:
    loop_var: users_skeleton
  when: ( users_skell is not defined ) or ( users_skell == True )

- name: Quota tasks
  block:

    - name: "Touch {{ quota_dir }}/quota_user.csv"
      file:
        path: "{{ quota_dir }}/quota_user.csv"
        state: touch
        access_time: preserve
      tags:
        - users-update

    - name: "Get the md5sum of {{ quota_dir }}/quota_user.csv"
      command: "md5sum {{ quota_dir }}/quota_user.csv"
      register: users_repquota_md5sum_before
      changed_when: false
      when: quota_dir is defined
      tags:
        - users-update

    - name: "Users quotas written to {{ quota_dir }}/quota_user.csv and md5sum printed"
      shell: "repquota {{ quota_dir }}  --output=csv > {{ quota_dir }}/quota_user.csv ; chmod 600 {{ quota_dir }}/quota_user.csv ; md5sum {{ quota_dir }}/quota_user.csv"
      register: users_repquota_md5sum_after
      changed_when: users_repquota_md5sum_before.stdout != users_repquota_md5sum_after.stdout
      tags:
        - users-update

    - name: Users quotas fetched
      fetch:
        src: "{{ quota_dir }}/quota_user.csv"
        dest: /tmp/
      tags:
        - users-update

  when: quota_dir is defined

- name: Users absent
  block:

    - name: Slay any processes running as the user
      command: "slay {{ item.key }}"
      loop: "{{ users | dict2items }}"
      tags:
        - users-update

    - name: Chroot users absent
      block:

        - name: Include the chroot absent users tasks
          include_tasks: chroot_users_absent.yml
          loop: "{{ users | dict2items }}"
          when: ( item.value.users_state is defined and item.value.users_state == "absent" ) or ( "chroot" not in item.value.users_groups )
          tags:
            - users-chroot
            - users-update

      when: ( users_chroot_dir is defined ) and ( users_chroot_dir.stat.exists )

    - name: Include Apache config tasks absent users
      include_tasks: apache_users_absent.yml
      loop: "{{ users | dict2items }}"
      when:
        - '"apache2" in ansible_facts.packages'
        - ( users_apache is not defined ) or ( users_apache == True )
      tags:
        - users-update
        - apache

    - name: Absent users MariaDB account and databases absent
      include_tasks: mariadb_user_absent.yml
      loop: "{{ users | dict2items }}"
      when: ( users_mariadb is not defined ) or ( users_mariadb == True )
      tags:
        - users-update

    - name: Absent users home directories removed
      file:
        path: "{{ item.value.users_home | default('/home/' + item.key) }}"
        state: absent
      loop: "{{ users | dict2items }}"
      tags:
        - users-update

    - name: Users accounts absent
      user:
        name: "{{ item.key }}"
        state: absent
        remove: true
      loop: "{{ users | dict2items }}"
      tags:
        - users-update

    - name: User groups absent
      group:
        name: "{{ item.key }}"
        state: absent
      loop: "{{ users | dict2items }}"
      tags:
        - users-update

  when: item.value.users_state is defined and item.value.users_state == "absent"

- name: User groups present
  include_tasks: groups.yml
  loop: "{{ users | dict2items }}"
  loop_control:
    loop_var: users_groups_user
  when: ( users_groups_user.value.users_state is undefined or users_groups_user.value.users_state == "present" ) and ( users_groups_user.value.users_groups is defined )
  tags:
    - users-update

- name: Users present
  block:

    - name: User group present
      group:
        name: "{{ item.key }}"
        state: present
      loop: "{{ users | dict2items }}"
      tags:
        - users-update

    - name: Users group members present
      include: group_members.yml
      loop: "{{ users | dict2items }}"
      when: ( item.value.users_group_members is defined ) and ( item.value.users_group_members != [] )
      tags:
        - users-update

    - name: User accounts present
      include_tasks: user.yml
      loop: "{{ users | dict2items }}"
      tags:
        - users-ssh
        - users-update

    - name: Users MariaDB accounts and databases created and passwords read or set
      include_tasks: mariadb_user_present.yml
      vars:
      loop: "{{ users | dict2items }}"
      when:
        - ( users_mariadb is not defined ) or ( users_mariadb == True )
        - ( item.value.users_mariadb_databases is defined ) and ( item.value.users_mariadb_databases != [] )
      tags:
        - users-update

    - name: Quotas set
      include_tasks: quota.yml
      loop: "{{ users | dict2items }}"
      when: ( quota_dir is defined ) and ( item.value.users_quota is defined ) and ( item.value.users_quota != "" )
      tags:
        - users-update

    - name: Set passwds and notify users
      include_tasks: notify_passwd.yml
      loop: "{{ users | dict2items }}"
      when: ( item.value.users_notify_passwd is defined ) and ( item.value.users_notify_passwd == True ) and ( item.value.users_email is defined ) and ( item.value.users_email != "" )
      tags:
        - users-update

  when: ( item.value.users_state is undefined ) or ( item.value.users_state == "present" )

- name: Users quota CSV file updated
  block:

    - name: "Updated users quotas written to {{ quota_dir }}/quota_user.csv and md5sum printed"
      shell: "repquota {{ quota_dir }}  --output=csv > {{ quota_dir }}/quota_user.csv ; chmod 700 {{ quota_dir }}/quota_user.csv ; md5sum {{ quota_dir }}/quota_user.csv"
      register: users_repquota_md5sum_after
      changed_when: users_repquota_md5sum_before.stdout != users_repquota_md5sum_after.stdout
      tags:
        - users-update

    - name: Updated users quotas fetched
      fetch:
        src: "{{ quota_dir }}/quota_user.csv"
        dest: /tmp/
      when: users_repquota_md5sum_after.changed
      tags:
        - users-update

  when: quota_dir is defined

- name: Create or remove a .forward file for each user
  block:

    - name: Email address for user absent so no .forward
      file:
        path: "{{ item.value.users_home | default('/home/' + item.key) }}/.forward"
        state: absent
      loop: "{{ users | dict2items }}"
      when: ( users_forward == False ) or ( item.value.users_state is defined and item.value.users_state == "absent" ) or ( item.value.users_email is not defined or item.value.users_email == "" )
      tags:
        - users-update

    - name: Email address in .forward
      template:
        src: templates/forward.j2
        dest: "{{ item.value.users_home | default('/home/' + item.key) }}/.forward"
        owner: "{{ item.key }}"
        group: "{{ item.key }}"
        mode: 0644
      loop: "{{ users | dict2items }}"
      when: ( users_forward == True ) and ( item.value.users_state is undefined or item.value.users_state == "present" ) and ( item.value.users_email is defined and item.value.users_email != "" )
      tags:
        - users-update

  when: users_forward is defined

- name: Create a .muttrc for each user if it doesn't exist
  template:
    src: templates/muttrc.j2
    dest: "{{ item.value.users_home | default('/home/' + item.key) }}/.muttrc"
    force: false
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
    mode: 0644
  loop: "{{ users | dict2items }}"
  when: ( item.value.users_state is undefined or item.value.users_state == "present" ) and ( users_muttrc is defined ) and ( users_muttrc == True )
  tags:
    - users-update

- name: Chroot users
  block:

    - name: Directory /etc/fstab.d present
      file:
        path: /etc/fstab.d
        state: directory

    - name: Systemd mount unit file in place
      copy:
        src: files/chroot_users_mounts.service
        dest: /lib/systemd/system/chroot_users_mounts.service
      tags:
        - users-chroot

    - name: Chroot mount script in place
      copy:
        src: files/chroot-users-mounts.sh
        dest: /usr/local/bin/chroot-users-mounts
        mode: "0750"
      tags:
        - users-chroot

    - name: Include the chroot present users tasks
      include_tasks: chroot_users_present.yml
      loop: "{{ users | dict2items }}"
      when: ( item.value.users_state is undefined or item.value.users_state == "present" ) and ( "chroot" in item.value.users_groups )
      tags:
        - users-chroot
        - users-update

    - name: PHP-FPM chroot tasks
      block:

        - name: PHP-FPM chroot logrotation config in place
          copy:
            src: files/phpfpm_users_logrotate
            dest: /etc/logrotate.d/phpfpm_users_logrotate
            owner: root
            group: root
            mode: 0644
          tags:
            - logrotate

        - name: Include the PHP FPM chroot tasks
          include_tasks: phpfpm_chroot.yml
          tags:
            - users-update

      when: ( users_phpfpm_status is defined ) and ( users_phpfpm_status.stdout == "installed" )

  when: ( users_chroot_dir is defined ) and ( users_chroot_dir.stat.exists )

- name: Matomo login account tasks
  block:

    - name: "Check if the Matomo {{ matomo_user }} system user account exists"
      shell: "id {{ matomo_user }} && echo true || echo false"
      check_mode: false
      register: user_matomo_user_check
      changed_when: '"no such user" in user_matomo_user_check.stderr'
      tags:
        - matomo
        - users-update

    - name: Matomo user login account tasks
      block:

        - name: Check if Matomo config file exists
          stat:
            path: "{{ matomo_html }}/config/config.ini.php"
          check_mode: false
          register: user_matomo_config
          tags:
            - matomo
            - users-update

        - name: If Matomo is installed
          block:

            - name: Matomo accounts for users absent
              include_tasks: matomo_users_absent.yml
              loop: "{{ users | dict2items }}"
              when: ( matomo_user is defined ) and ( item.value.users_state is defined ) and ( item.value.users_state == "absent" )
              tags:
                - matomo
                - users-update

            - name: Matomo accounts for users present
              include_tasks: matomo_users_present.yml
              loop: "{{ users | dict2items }}"
              when: ( item.value.users_state is not defined ) or ( item.value.users_state == "present" )
              tags:
                - matomo
                - users-update

          when: user_matomo_config.stat.exists

      when: ( user_matomo_user_check is defined ) and ( "no such user" not in user_matomo_user_check.stderr )

  when: ( matomo_user is defined ) and ( matomo_user != "" )

- name: Apache config for users present
  block:

    - name: Include Apache config tasks present users
      include_tasks: apache_users_present.yml
      loop: "{{ users | dict2items }}"
      when: ( item.value.users_apache_virtual_hosts is defined ) and ( item.value.users_state is not defined or item.value.users_state == "present" )
      tags:
        - users-update
        - apache
        - letsencrypt

    - name: Users Apache logrotation config in place
      copy:
        src: files/apache_users_logrotate
        dest: /etc/logrotate.d/apache_users_logrotate
        owner: root
        group: root
        mode: 0644
      tags:
        - logrotate

    - name: Apache configtest
      command: apachectl configtest
      register: users_apachectl_configtest
      changed_when: '"Syntax OK" not in users_apachectl_configtest.stderr'
      check_mode: false
      tags:
        - users-update
        - apache
        - letsencrypt

    - name: Apache restart
      service:
        name: apache2
        state: restarted
      when: '"Syntax OK" in users_apachectl_configtest.stderr'
      tags:
        - users-update
        - apache
        - letsencrypt

  when:
    - '"apache2" in ansible_facts.packages'
    - ( users_apache is not defined ) or ( users_apache == True )

- name: Cron for user accounts
  block:

    - name: Crontab absent for users
      include_tasks: crontab_users_absent.yml
      loop: "{{ users | dict2items }}"
      when: ( item.value.users_state is defined and item.value.users_state == "absent" ) or ( users_crontab is defined or users_crontab == False )
      tags:
        - users-update

    - name: Crontab present for users
      include_tasks: crontab_users_present.yml
      loop: "{{ users | dict2items }}"
      when: ( item.value.users_state is undefined or item.value.users_state == "present" ) and ( users_crontab is not defined or users_crontab == True )
      tags:
        - users-update

  when: ( users_cron is not defined ) or ( users_cron == True )
...
