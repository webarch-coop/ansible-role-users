---
- name: Packages present
  apt:
    pkg:
      - bc
      - mutt
      - python-dns
      - python-dnspython
      - python3-dnspython
      - python-passlib
      - slay
      - vim
      - whois
    state: present

- name: System setup and checks
  include_tasks: system.yml
  tags:
    - users
    - apache
    - phpfpm
    - letsencrypt

- name: Set an empty users_update array
  set_fact:
    users_update: []
  when: users_update is not defined
  tags:
    - users
    - apache
    - phpfpm
    - letsencrypt

- name: Set users to update to all
  block:

    - name: Add all the users to the users_update array as users_update_strategy is not set or set to all
      set_fact:
        users_update: "{{ users_update }} + [ '{{ user.key }}' ]"
      loop: "{{ users | dict2items }}"
      loop_control:
        loop_var: user
        label: "{{ user.key }}"

    - name: Print the users to update if users_update_strategy is not set or set to all
      debug:
        msg: "User to update: {{ users_update }}"

  when:
    - ( users_update_strategy is not defined ) or ( users_update_strategy == "all" )
  tags:
    - users
    - apache
    - phpfpm
    - letsencrypt

- name: Check which users accounts are changed
  block:

    - name: Check users changed
      include_tasks: users_changed.yml

    - name: Print the changed users to update
      debug:
        msg: "User to update: {{ users_update }}"

  when:
    - ( users_update_strategy is defined ) and ( users_update_strategy == "changed" )
  tags:
    - users
    - apache
    - phpfpm
    - letsencrypt

- name: Run checks on users
  include_tasks: user_check.yml
  when:
    - ( users_update_check is defined ) and ( users_update_check == True )
    - ( user.value.users_state is not defined ) or ( user.value.users_state != "absent" )
  loop: "{{ users | dict2items }}"
  loop_control:
    loop_var: user
    label: "{{ user.key }}"

- name: Update users tasks
  block:

    - name: Print users to add or update
      debug:
        msg: "User to update: {{ user }}"
        verbosity: 1
      when:
        - ( user.key is defined ) and ( user.key in users_update )
        - ( user.value.users_state is not defined ) or ( user.value.users_state != "absent" )
      loop: "{{ users | dict2items }}"
      loop_control:
        loop_var: user
        label: "{{ user.key }}"

    - name: User absent loop
      include_tasks: user_absent.yml
      when:
        - ( user.key is defined ) and ( user.key in users_update )
        - ( user.value.users_state is defined ) and ( user.value.users_state == "absent" )
        - ( users_update_check is not defined ) or ( users_update_check != True ) 
      loop: "{{ users | dict2items }}"
      loop_control:
        loop_var: user
        label: "{{ user.key }}"

    - name: Check variables for users to update
      include_tasks: user_check.yml
      when:
        - ( user.key is defined ) and ( user.key in users_update )
        - ( user.value.users_state is not defined ) or ( user.value.users_state != "absent" )
      loop: "{{ users | dict2items }}"
      loop_control:
        loop_var: user
        label: "{{ user.key }}"

    - name: User present loop
      include_tasks: user_present.yml
      when:
        - ( user.key is defined ) and ( user.key in users_update )
        - ( user.value.users_state is not defined ) or ( user.value.users_state == "present" )
        - ( users_update_check is not defined ) or ( users_update_check != True ) 
      loop: "{{ users | dict2items }}"
      loop_control:
        loop_var: user
        label: "{{ user.key }}"

    - name: Munin tasks for servers with a chroot and php-fpm
      block:

        - name: Set a fact for the users who are present and in the phpfpm and chroot groups
          set_fact:
            users_in_phpfpm_and_chroot_group: "{{ users_in_phpfpm_and_chroot_group | default('') }} {{ user.key }}"
          when:
            - ( user.value.users_state is not defined ) or ( user.value.users_state == "present" )
            - ( user.value.users_groups is defined ) and ( user.value.users_groups != [] )
            - ( "phpfpm" in user.value.users_groups ) and ( "chroot" in user.value.users_groups )
            - user.key != "root"
          loop: "{{ users | dict2items }}"
          loop_control:
            loop_var: user
            label: "{{ user.key }}"

        - name: Debug the users who are present and in the phpfpm and chroot groups
          debug:
            msg: "Users in the phpfpm and chroot groups: {{ users_in_phpfpm_and_chroot_group }}"
            verbosity: 1

        - name: Include the munin-node phpfpm-multi tasks
          include_role:
            name: munin-node
            tasks_from: phpfpm_multi.yml
          vars:
            munin_phpfpm_users: "{{ users_in_phpfpm_and_chroot_group }}"
          when: ( users_in_phpfpm_and_chroot_group is defined ) and ( users_in_phpfpm_and_chroot_group != [] )

      when: ( users_phpfpm_version is defined ) and ( "phpfpm" in getent_group and "chroot" in getent_group )

  when:
    - ( users_update is defined ) and ( users_update != [] )
    - ( users_update_check is not defined ) or ( users_update_check != True ) 
  tags:
    - users
    - apache
    - phpfpm
    - letsencrypt

- name: Users quota CSV file updated
  block:

    - name: Updated users quotas written and md5sum printed
      shell: "repquota {{ quota_dir }}  --output=csv > {{ quota_dir }}/quota_user.csv ; chmod 600 {{ quota_dir }}/quota_user.csv ; md5sum {{ quota_dir }}/quota_user.csv"
      register: users_repquota_md5sum_after
      check_mode: false
      changed_when: users_repquota_md5sum_before.stdout != users_repquota_md5sum_after.stdout

    - name: Updated users quotas fetched
      fetch:
        src: "{{ quota_dir }}/quota_user.csv"
        dest: /tmp/
      check_mode: false
      when: users_repquota_md5sum_before.stdout != users_repquota_md5sum_after.stdout

  when:
    - quota_dir is defined
    - ( users_update_check is not defined ) or ( users_update_check != True ) 
  tags:
    - users

# This has been moved so the users state files are updated one at a time
# rather than all at the end.
# - name: Users state files updated
#   include_tasks: user_updated.yml
#   when: user.key in users_update
#   loop: "{{ users | dict2items }}"
#   loop_control:
#     loop_var: user
#     label: "{{ user.key }}"
#   tags:
#     - users
#     - apache
#     - phpfpm
#     - letsencrypt

- name: Firewall tasks included
  include_tasks: firewall.yml
  when:
    - ( users_firewall is defined ) and ( users_firewall == True )
    - ( users_update_check is not defined ) or ( users_update_check != True ) 

- name: List the updated users
  debug:
    msg: "Users updated: {{ users_update }}"
  tags:
    - users
    - apache
    - phpfpm
    - letsencrypt
...
