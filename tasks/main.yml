---
- name: Check /etc/debian_version
  shell: "lsb_release -c | awk '{ print $2 }'"
  register: users_debian_version_check
  changed_when: false

- name: Set a fact for the Debian version
  set_fact:
    users_debian_version: "{{ users_debian_version_check.stdout }}"

- name: Load package information as facts
  package_facts:
    manager: apt
  tags:
    - apache

- name: Check if php-fpm is installed on stretch
  shell: dpkg -s php7.0-fpm | grep ^Status | awk '{ print $4 }'
  register: users_phpfpm_status
  when: users_debian_version == "stretch"
  changed_when: false

- name: Check if php-fpm is installed on buster
  shell: dpkg -s php7.3-fpm | grep ^Status | awk '{ print $4 }'
  register: users_phpfpm_status
  when: users_debian_version == "buster"
  changed_when: false

- name: Check if a chroot exists
  stat:
    path: "{{ chroot_dir | default('/chroot') }}"
  register: users_chroot_dir

- name: Packages present
  apt:
    pkg:
      - vim
    state: present
    update_cache: true

- name: Skel profiles included
  include_tasks: "skel_{{ users_skeleton }}.yml"
  loop:
    - www
  loop_control:
    loop_var: users_skeleton

- name: pam-mysql tasks included
  include_tasks: pam_mysql.yml
  when: ( users_pam_mysql is defined ) and ( users_pam_mysql == True )

# Quota tasks
- block:

    - name: "Touch {{ quota_dir }}/quota_user.csv"
      file:
        path: "{{ quota_dir }}/quota_user.csv"
        state: touch
        access_time: preserve

    - name: "Get the md5sum of {{ quota_dir }}/quota_user.csv"
      command: "md5sum {{ quota_dir }}/quota_user.csv"
      register: users_repquota_md5sum_before
      changed_when: false
      when: quota_dir is defined

    - name: "Users quotas written to {{ quota_dir }}/quota_user.csv and md5sum printed"
      shell: "repquota {{ quota_dir }}  --output=csv > {{ quota_dir }}/quota_user.csv ; chmod 600 {{ quota_dir }}/quota_user.csv ; md5sum {{ quota_dir }}/quota_user.csv"
      register: users_repquota_md5sum_after
      changed_when: users_repquota_md5sum_before.stdout != users_repquota_md5sum_after.stdout

    - name: Users quotas fetched
      fetch:
        src: "{{ quota_dir }}/quota_user.csv"
        dest: /tmp/

  when: quota_dir is defined

# Delete users
- block:

    - name: Absent users home directories removed
      file:
        path: "{{ item.value.users_home | default('/home/' + item.key) }}"
        state: absent
      loop: "{{ users | dict2items }}"

    - name: User accounts absent
      user:
        name: "{{ item.key }}"
        state: absent
        remove: true
      loop: "{{ users | dict2items }}"

    - name: Users MariaDB account absent
      include_tasks: galaxy/roles/mariadb/tasks/user_absent.yml
      vars:
        mariadb_user: "{{ item.key }}"
      loop: "{{ users | dict2items }}"
      when: ( users_pam_mysql is defined ) and ( users_pam_mysql is "True" )

    - name: User groups absent
      group:
        name: "{{ item.key }}"
        state: absent
      loop: "{{ users | dict2items }}"

  when: item.value.users_state is defined and item.value.users_state == "absent"

# Add users
- name: User groups present
  include_tasks: groups.yml
  loop: "{{ users | dict2items }}"
  loop_control:
    loop_var: users_groups_user
  when: ( users_groups_user.value.users_state is undefined or users_groups_user.value.users_state == "present" ) and users_groups_user.value.users_groups is defined

- block:

    - name: User group present
      group:
        name: "{{ item.key }}"
        state: present
      loop: "{{ users | dict2items }}"

    - name: Users group members present
      include: group_members.yml
      loop: "{{ users | dict2items }}"
      when: item.value.users_group_members is defined and item.value.users_group_members != ""

    - name: User accounts present
      include_tasks: user.yml
      loop: "{{ users | dict2items }}"

    - name: Users MariaDB account created and password set
      include_tasks: galaxy/roles/mariadb/tasks/user_present.yml
      vars:
        mariadb_user: "{{ item.key }}"
      loop: "{{ users | dict2items }}"
      when: ( users_pam_mysql is defined ) and ( users_pam_mysql is "True" )

    - name: Quotas set
      include_tasks: quota.yml
      loop: "{{ users | dict2items }}"
      when: quota_dir is defined and item.value.users_quota is defined and item.value.users_quota != ""

  when: item.value.users_state is undefined or item.value.users_state == "present"

# Users quota CSV file updated
- block:

    - name: "Updated users quotas written to {{ quota_dir }}/quota_user.csv and md5sum printed"
      shell: "repquota {{ quota_dir }}  --output=csv > {{ quota_dir }}/quota_user.csv ; chmod 700 {{ quota_dir }}/quota_user.csv ; md5sum {{ quota_dir }}/quota_user.csv"
      register: users_repquota_md5sum_after
      changed_when: users_repquota_md5sum_before.stdout != users_repquota_md5sum_after.stdout

    - name: Updated users quotas fetched
      fetch:
        src: "{{ quota_dir }}/quota_user.csv"
        dest: /tmp/
      when: users_repquota_md5sum_after.changed

  when: quota_dir is defined

- name: Email address in .forward
  template:
    src: templates/forward.j2
    dest: "{{ item.value.users_home | default('/home/' + item.key) }}/.forward"
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
    mode: 0644
  loop: "{{ users | dict2items }}"
  when: item.value.users_email is defined and item.value.users_email != ""

- name: Email address absent so no .forward
  file:
    path: "{{ item.value.users_home | default('/home/' + item.key) }}/.forward"
    state: absent
  loop: "{{ users | dict2items }}"
  when: item.value.users_email is not defined or item.value.users_email == ""

# Chroot users
- block:

    - name: Include the chroot absent users tasks
      include_tasks: chroot_users_absent.yml
      loop: "{{ users | dict2items }}"
      when: ( item.value.users_state is defined and item.value.users_state == "absent" ) or ( "chroot" not in item.value.users_groups )

    - name: Include the chroot present users tasks
      include_tasks: chroot_users_present.yml
      loop: "{{ users | dict2items }}"
      when: ( item.value.users_state is undefined or item.value.users_state == "present" ) and ( "chroot" in item.value.users_groups )

    - name: Include the PHP FPM chroot tasks
      include_tasks: phpfpm_chroot.yml
      when: users_phpfpm_status.stdout == "installed"

  when: users_chroot_dir.stat.exists

# Apache config for users
- block:

    - name: Include Apache config tasks absent users
      include_tasks: apache_users_absent.yml
      loop: "{{ users | dict2items }}"
      when: item.value.users_state is defined and item.value.users_state == "absent"
      tags:
        - apache

    - name: Include Apache config tasks present users
      include_tasks: apache_users_present.yml
      loop: "{{ users | dict2items }}"
      when: ( item.value.users_apache_virtual_hosts is defined ) and ( item.value.users_state is not defined or item.value.users_state == "present" )
      tags:
        - apache

    - name: Apache configtest
      command: apachectl configtest
      register: users_apachectl_configtest
      changed_when: '"Syntax OK" not in users_apachectl_configtest.stderr'
      when: '"apache2" in ansible_facts.packages'
      tags:
        - apache

    - name: Apache restart
      service:
        name: apache2
        state: restarted
      when: '"Syntax OK" in users_apachectl_configtest.stderr'
      tags:
        - apache

  when: '"apache2" in ansible_facts.packages'
