---
- name: "Apache Directory directives checks for the {{ vhost.key }} VirtualHost for {{ user.key }}"
  block:

    - name: "Debug Directory array for {{ vhost.key }} VirtualHost for {{ user.key }} user"
      debug:
        var: dir
        verbosity: 2

    - name: "Check that users_apache_expires is set to medium, strict or forever for {{ vhost.key }} VirtualHost for {{ user.key }} if it is defined"
      assert:
        that:
          - dir.value.users_apache_expires is regex('^medium|strict|forever$')
      when: dir.value.users_apache_expires is defined

    - name: "Check that only valid Options are listed for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      block:

        - name: "Check that the Options for {{ vhost.key }} VirtualHost for {{ user.key }} are a non-empty array"
          assert:
            that:
              - dir.value.users_apache_options | length
              - dir.value.users_apache_options[0] is defined

        - name: "Check that all Options are valid and start with a + or - for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - option is regex("^[+-](?i)All|ExecCGI|FollowSymLinks|Includes|IncludesNOEXEC|Indexes|MultiViews|SymLinksIfOwnerMatch$")
          loop: "{{ dir.value.users_apache_options }}"
          loop_control:
            loop_var: option
            label: "{{ option }}"

      when: dir.value.users_apache_options is defined

    - name: "Check that only valid IndexOptions listed for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      block:

        - name: "Check that the IndexOptions for {{ vhost.key }} VirtualHost for {{ user.key }} are a non-empty array"
          assert:
            that:
              - dir.value.users_apache_index_options | length
              - dir.value.users_apache_index_options[0] is defined

        - name: "Check that all IndexOptions are valid and start with a + or - for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - option is regex("^[+-](?i)AddAltClass|Charset|DescriptionWidth|FancyIndexing|FoldersFirst|HTMLTable|IconsAreLinks|IconHeight|IconWidth|IgnoreCase|IgnoreClient|NameWidth|ScanHTMLTitles|ShowForbidden|SuppressColumnSorting|SuppressDescription|SuppressHTMLPreamble|SuppressIcon|SuppressLastModified|SuppressRules|SuppressSize|TrackModified|UseOldDateFormat|VersionSort|XHTML.*$")
          loop: "{{ dir.value.users_apache_index_options }}"
          loop_control:
            loop_var: option
            label: "{{ option }}"

      when: dir.value.users_apache_index_options is defined

    - name: "Check that the IndexHeadInsert is a string, which doesn't contain single quotes if defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - dir.value.users_apache_index_head_insert | type_debug is regex("str|AnsibleUnicode|AnsibleUnsafeText")
          - dir.value.users_apache_index_head_insert is not regex('[\']')
      when: dir.value.users_apache_index_head_insert is defined

    - name: "Check that the HeaderName is a string if defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - dir.value.users_apache_header_name | type_debug is regex("str|AnsibleUnicode|AnsibleUnsafeText")
      when: dir.value.users_apache_header_name is defined

    - name: "Check that the ReadmeName is a string if defined for {{ vhost.key }} VirtualHost for {{ user.key }}"
      assert:
        that:
          - dir.value.users_apache_readme_name | type_debug is regex("str|AnsibleUnicode|AnsibleUnsafeText")
      when: dir.value.users_apache_readme_name is defined

    - name: "Check that SSILegacyExprParser is true or false for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - dir.value.users_apache_ssi_legacy | type_debug == "bool"
      when: dir.value.users_apache_ssi_legacy is defined

    - name: "Check that SSILastModified is true or false for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - dir.value.users_apache_ssi_modified | type_debug == "bool"
      when: dir.value.users_apache_ssi_modified is defined

    - name: "Check that AddOutputFilter for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array"
      assert:
        that:
          - dir.value.users_apache_add_output_filters | type_debug == "list"
      when: dir.value.users_apache_add_output_filters is defined

    - name: "Check that AddType for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array"
      assert:
        that:
          - dir.value.users_apache_add_type | type_debug == "list"
      when: dir.value.users_apache_add_type is defined

    - name: "Check that only valid AllowOverride directives are listed for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      block:

        - name: "Check that the AllowOverride directives for {{ vhost.key }} VirtualHost for {{ user.key }} are a non-empty array"
          assert:
            that:
              - dir.value.users_apache_override | length
              - dir.value.users_apache_override[0] is defined

        - name: "Check that all AllowOverride directives are valid for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - override is regex("^(?i)All|None|AuthConfig|Indexes|Limit|Nonfatal=Override|Unknown|All|Options=All.|ExecCGI.|FollowSymLinks.|Includes.|IncludesNOEXEC.|Indexes.|MultiViews.|SymLinksIfOwnerMatch.|XBitHack.$")
          loop: "{{ dir.value.users_apache_override }}"
          loop_control:
            loop_var: override
            label: "{{ override }}"

      when: dir.value.users_apache_override is defined

    - name: "Check that file names are listed for the DirectoryIndex directive for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array if defined"
      block:

        - name: "Check that the DirectoryIndex directive for {{ vhost.key }} VirtualHost for {{ user.key }} is a non-empty array"
          assert:
            that:
              - dir.value.users_apache_index | length
              - dir.value.users_apache_index[0] is defined

        - name: "Check that each DirectoryIndex appears to be a filename for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - index is regex("^\w+\.\w+$")
          loop: "{{ dir.value.users_apache_index }}"
          loop_control:
            loop_var: index
            label: "{{ index }}"

      when: dir.value.users_apache_index is defined

    - name: "Check that AuthType is valid for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      assert:
        that:
          - dir.value.users_apache_auth_type | type_debug is regex("str|AnsibleUnicode|AnsibleUnsafeText")
          - dir.value.users_apache_auth_type is regex("None|Basic|Digest|Form")
      when: dir.value.users_apache_auth_type is defined

    - name: "Check that Require is valid for {{ vhost.key }} VirtualHost for {{ user.key }} if defined"
      block:

        - name: "Check that users_apache_require is a list for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - dir.value.users_apache_require | type_debug == "list"

        - name: "Check that that values other than method for the users_apache_require list are valid for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - req is regex("^all granted|^all denied|^env .*|^method [A-Z ]{3,51}|^expr .*|^user .*|^group .*|^valid-user|^ip .*|^forward-dns .*")
          when: req is not regex("method .*")
          loop: "{{ dir.value.users_apache_require }}"
          loop_control:
            loop_var: req
            label: "{{ req }}"

      when: ( dir.value.users_apache_require is defined ) and ( dir.value.users_apache_require != [] )

    - name: "FilesMatch checks for {{ vhost.key }} VirtualHost for {{ user.key }}"
      block:

        - name: "Check that users_apache_filesmatch is an array for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - dir.value.users_apache_filesmatch | type_debug == "list"

        - name: "Check that regex is defined for FilesMatch for {{ vhost.key }} VirtualHost for {{ user.key }}"
          assert:
            that:
              - fm.regex is defined
          loop: "{{ dir.value.users_apache_filesmatch }}"
          loop_control:
            loop_var: fm
            label: "{{ fm }}"

      when: dir.value.users_apache_filesmatch is defined

  tags:
    - users
...
