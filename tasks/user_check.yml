# Copyright 2018-2025 Chris Croome
#
# This file is part of the Webarchitects Users Ansible role.
#
# The Webarchitects Users Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Users Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Users Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Check the user variables
  block:

    - name: Check that the username is not in the users_disallowed_usernames array
      ansible.builtin.assert:
        that:
          - user.key != users_disallowed_username
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      loop: "{{ users_disallowed_usernames }}"
      loop_control:
        loop_var: users_disallowed_username

    - name: "Check state for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - user.value.users_state | length
          - ( user.value.users_state == "present" ) or ( user.value.users_state == "absent" ) or ( user.value.users_state == "ignore" )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_state is defined

    - name: "Check that the group for {{ user.key }} contains only ascii letters, numbers and dashes"
      ansible.builtin.assert:
        that:
          - user.value.users_group is regex("^[a-zA-Z0-9-]*$")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_group is defined

    - name: "Check the groups for {{ user.key }}"
      block:

        - name: "Check that the groups for {{ user.key }} is a non-empty array"
          ansible.builtin.assert:
            that:
              - user.value.users_groups | length
              - user.value.users_groups[0] is defined
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: "Debug users groups for {{ user.key }}"
          ansible.builtin.debug:
            var: user.value.users_groups
            verbosity: 2
          tags:
            - debug

        - name: "Check that the groups for {{ user.key }} contain only ascii letters, numbers and dashes"
          ansible.builtin.assert:
            that:
              - group is regex("^[a-zA-Z0-9-]*$")
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ user.value.users_groups }}"
          loop_control:
            loop_var: group
            label: "{{ group }}"

        - name: Chroot'ed user checks
          block:

            - name: "Check that users_chroot is defined and true when {{ user.key }} is in the chroot group"
              ansible.builtin.assert:
                that:
                  - users_chroot is defined
                  - users_chroot
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

            # NOTE users_chroot_dir_check is defined via a task in system.yml
            - name: "Check that users_chroot_dir is defined and the directory is present when {{ user.key }} is in the chroot group"
              ansible.builtin.assert:
                that:
                  - users_chroot_dir is defined
                  - users_chroot_dir_check.stat.exists
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

            # NOTE users_chroot_users_dir_check is defined via a task in system.yml
            - name: "Check that users_chroot_users_dir is defined and the directory is present when {{ user.key }} is in the chroot group"
              ansible.builtin.assert:
                that:
                  - users_chroot_users_dir is defined
                  - users_chroot_users_dir_check.stat.exists
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

          when: ( "chroot" in user.value.users_groups )

      when: user.value.users_groups is defined

    - name: "Check users that are members of the {{ user.key }} group"
      block:

        - name: "Check that the members of {{ user.key }} group is a non-empty array"
          ansible.builtin.assert:
            that:
              - user.value.users_group_members | length
              - user.value.users_group_members[0] is defined
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: "Debug group members for {{ user.key }}"
          ansible.builtin.debug:
            var: user.value.users_group_members
            verbosity: 2
          tags:
            - debug

        - name: "Check that the group members for {{ user.key }} contain only ascii letters, numbers and dashes"
          ansible.builtin.assert:
            that:
              - group is regex("^[a-zA-Z0-9-]*$")
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ user.value.users_group_members }}"
          loop_control:
            loop_var: group
            label: "{{ group }}"

      when: user.value.users_group_members is defined

    - name: "Check that the home directory for {{ user.key }} starts with a slash"
      ansible.builtin.assert:
        that:
          - user.value.users_home is regex("^\/.*$")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_home is defined

    - name: "Check that the shell for {{ user.key }} is valid"
      ansible.builtin.assert:
        that:
          - user.value.users_shell in users_shells
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: ( users_shells is defined ) and ( user.value.users_shell is defined )

    - name: "Check users_skel is an existing path for {{ user.key }}"
      ansible.builtin.stat:
        path: "{{ user.value.users_skel }}"
      register: user_skel_path
      failed_when:
        - not user_skel_path.stat.exists | bool
        - not user_skel_path.stat.isdir | bool
      when: user.value.users_skel is defined

    - name: "Check system for {{ user.key }} is true or false"
      ansible.builtin.assert:
        that:
          - ( user.value.users_system ) or ( not user.value.users_system )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_system is defined

    # TODO check users_home_owner
    # TODO users_home_mode
    # TODO check users_editor

    - name: "Check generate_ssh_key for {{ user.key }} is true or false"
      ansible.builtin.assert:
        that:
          - ( user.value.users_generate_ssh_key ) or ( not user.value.users_generate_ssh_key )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_generate_ssh_key is defined

    - name: "Check email address for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - user.value.users_email is regex("^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_email is defined

    - name: SSH public key URL checks
      block:

        - name: "Check users_ssh_public_keys is a non-empty array for {{ user.key }}"
          ansible.builtin.assert:
            that:
              - user.value.users_ssh_public_keys | length
              - user.value.users_ssh_public_keys[0] is defined
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: "Check that users_ssh_public_keys array contains valid URLs for {{ user.key }} using a HTTP GET with HTTP_AGENT {{ users_http_agent }}"
          ansible.builtin.uri:
            url: "{{ url }}"
            method: GET
            return_content: true
            http_agent: "{{ users_http_agent }}"
          check_mode: false
          changed_when: false
          register: users_ssh_public_key_headers
          failed_when: users_ssh_public_key_headers.status != 200
          loop: "{{ user.value.users_ssh_public_keys }}"
          loop_control:
            loop_var: url
            label: "{{ url }}"

      when: user.value.users_ssh_public_keys is defined

    - name: "Check that users_quota is a positive number for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - user.value.users_quota | human_to_bytes | int > 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_quota is defined

    - name: "Check that users_quota_block_softlimit is a positive number for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - user.value.users_quota_block_softlimit | human_to_bytes | int > 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_quota_block_softlimit is defined

    - name: "Check that users_quota_block_hardlimit is a positive number for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - user.value.users_quota_block_hardlimit | human_to_bytes | int > 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_quota_block_hardlimit is defined

    - name: "Check that users_quota_inode_softlimit is a positive number for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - user.value.users_quota_inode_softlimit | human_to_bytes | int > 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_quota_inode_softlimit is defined

    - name: "Check that users_quota_inode_hardlimit is a positive number for {{ user.key }}"
      ansible.builtin.assert:
        that:
          - user.value.users_quota_inode_hardlimit | human_to_bytes | int > 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_quota_inode_hardlimit is defined

    - name: "Check that users_notify_passwd for {{ user.key }} is true or false"
      ansible.builtin.assert:
        that:
          - ( user.value.users_notify_passwd ) or ( not user.value.users_notify_passwd )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_notify_passwd is defined

    - name: "Check that users_mariadb_notify_passwd for {{ user.key }} is true or false"
      ansible.builtin.assert:
        that:
          - ( user.value.users_mariadb_notify_passwd ) or ( not user.value.users_mariadb_notify_passwd )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_mariadb_notify_passwd is defined

    - name: "MariaDB users_mariadb_databases array checks for {{ user.key }}"
      block:

        - name: "Check users_mariadb_databases is a non-empty array for {{ user.key }}"
          ansible.builtin.assert:
            that:
              - user.value.users_mariadb_databases | length
              - user.value.users_mariadb_databases[0] is defined
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: "Check that the database names only contain lower case letters, numbers and underscores for {{ user.key }}"
          ansible.builtin.assert:
            that:
              - db is regex("^[a-z0-9_]*$")
            fail_msg: "The database name, {{ db }} must only contain lower case letters, numbers and underscores"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ user.value.users_mariadb_databases }}"
          loop_control:
            loop_var: db
            label: "{{ db }}"

        # Max length is 64 characters https://dev.mysql.com/doc/refman/8.0/en/identifier-length.html
        - name: "Check that the database names for {{ user.key }} are not more that 25 characters each"
          ansible.builtin.assert:
            that:
              - db is regex("^.{2,25}$")
            fail_msg: "The database name, {{ db }} must be more than 2 but less than or equal to 25 characters long"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ user.value.users_mariadb_databases }}"
          loop_control:
            loop_var: db
            label: "{{ db }}"

      when: user.value.users_mariadb_databases is defined

    - name: "Check MariaDB users_mariadb_database_privileges for {{ user.key }}"
      block:

        - name: "Check users_mariadb_database_privileges is a non-empty array for {{ user.key }}"
          ansible.builtin.assert:
            that:
              - user.value.users_mariadb_database_privileges | length
              - user.value.users_mariadb_database_privileges[0] is defined
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        # https://mariadb.com/kb/en/grant/
        - name: "Check that the MariaDB database privileges are valid for {{ user.key }}"
          ansible.builtin.assert:
            that:
              - priv is regex("^ALL|ALTER[ ]{0,1}ROUTINE|ALTER|CREATE[ ]{0,1}VIEW|CREATE[ ]{0,1}ROUTINE|CREATE[ ]{0,1}TEMPORARY[ ]{0,1}TABLES|CREATE[ ]{0,1}VIEW|CREATE|DELETE[ ]{0,1}HISTORY|DELETE|DROP|EXECUTE|EVENT|GRANT[ ]{0,1}OPTION|INDEX|INSERT|LOCK[ ]{0,1}TABLES|REFERENCES|SELECT|SHOW[ ]{0,1}VIEW|TRIGGER|UPDATE$")
            fail_msg: "Privilege, {{ priv }} is not valid"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ user.value.users_mariadb_database_privileges }}"
          loop_control:
            loop_var: priv
            label: "{{ priv }}"

      when: user.value.users_mariadb_database_privileges is defined

    - name: User PHP checks
      block:

        # TODO This doesn't currently allow a PHP CLI only user to exist!
        - name: Don't set users_phpfpm_ variables when a user is not www-data or not in the phpfpm group
          ansible.builtin.assert:
            that:
              - user.value.users_groups is defined
              - ( "phpfpm" in user.value.users_groups )
            quiet: "{% if ansible_check_mode or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"
            fail_msg: "To configure PHP-FPM for {{ user.key }} the phpfpm group needs to be in the users_groups list for the user."
          when: >-
            ( user.key != "www-data" ) and
            ( ( user.value.users_phpfpm_disable_functions is defined ) or
            ( user.value.users_phpfpm_max_children is defined ) or
            ( user.value.users_phpfpm_mysqli_allow_local_infile is defined ) or
            ( user.value.users_phpfpm_open_basedir is defined ) or
            ( user.value.users_phpfpm_pm is defined ) or
            ( user.value.users_phpfpm_pm_max_spare_servers is defined ) or
            ( user.value.users_phpfpm_pm_min_spare_servers is defined ) or
            ( user.value.users_phpfpm_pm_start_servers is defined ) or
            ( user.value.users_phpfpm_request_terminate_timeout is defined ) or
            ( user.value.users_phpfpm_sendmail_from is defined ) or
            ( user.value.users_phpfpm_sendmail_path is defined ) or
            ( user.value.users_phpfpm_version is defined ) )

        - name: Debug users_phpfpm_versions
          ansible.builtin.debug:
            var: users_phpfpm_versions
            verbosity: 2
          tags:
            - debug

        - name: Debug user.value.users_phpfpm_version
          ansible.builtin.debug:
            var: user.value.users_phpfpm_version
            verbosity: 2
          when: user.value.users_phpfpm_version is defined
          tags:
            - debug

        - name: Check that user.value.users_phpfpm_version is a string or integer and a number followed by a dot and another number and is in users_phpfpm_versions when defined
          ansible.builtin.assert:
            that:
              - ( user.value.users_phpfpm_version | type_debug == "str" ) or ( user.value.users_phpfpm_version | type_debug != "int" )
              - user.value.users_phpfpm_version is ansible.builtin.regex('^[0-9]{1,2}[.][0-9]{1,2}$')
              - user.value.users_phpfpm_version is in users_phpfpm_versions
            fail_msg: >-
              There is a problem with PHP version for the user {{ user.key }}
              {% if user.value.users_phpfpm_version | type_debug == "int" %}the users_phpfpm_version variable, {{ user.value.users_phpfpm_version }} must be quoted to ensure it is a string not a {{ user.value.users_phpfpm_version | type_debug }}{% endif %}
              {% if user.value.users_phpfpm_version is not ansible.builtin.regex('^[0-9]{1,2}[.][0-9]{1,2}$') %}the users_phpfpm_version variable must be a number, followed by a dot and anotyher number{% endif %}
              {% if user.value.users_phpfpm_version not in users_phpfpm_versions %}the users_phpfpm_version variable, {{ user.value.users_phpfpm_version }} must be installed, the version(s) present are {{ users_phpfpm_versions | join(', ') }}{% endif %}
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when:
            - ( "phpfpm" in ansible_facts.getent_group )
            - ( user.value.users_groups is defined ) and ( "phpfpm" in user.value.users_groups )
            - user.value.users_phpfpm_version is defined

        - name: "Check that users_phpfpm_log_level is set to a valid value if defined if {{ user.key }} is in the phpfpm group"
          ansible.builtin.assert:
            that:
              - user.value.users_phpfpm_log_level is regex("^alert|error|warning|notice|debug$")
          when:
            - ( "phpfpm" in ansible_facts.getent_group )
            - ( user.value.users_groups is defined ) and ( "phpfpm" in user.value.users_groups )
            - ( user.value.users_phpfpm_log_level is defined )

        - name: "Check that PHP-FPM pm.max_children is greater than 1 for {{ user.key }} if defined"
          ansible.builtin.assert:
            that:
              - user.value.users_phpfpm_pm_max_children | int >= 1
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: user.value.users_phpfpm_pm_max_children is defined

        - name: "Check the PHP-FPM pm dynamic pool settings for {{ user.key }} if defined"
          block:

            - name: "Check PHP-FPM pm.start_servers for {{ user.key }} if defined"
              ansible.builtin.assert:
                that:
                  - user.value.users_phpfpm_pm_start_servers | int >= 1
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
              when: user.value.users_phpfpm_pm_start_servers is defined

            - name: "Check the PHP-FPM pm.min_spare_servers for {{ user.key }} if defined"
              ansible.builtin.assert:
                that:
                  - user.value.users_phpfpm_pm_min_spare_servers | int >= 1
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
              when: user.value.users_phpfpm_pm_min_spare_servers is defined

            - name: "Check the PHP-FPM pm.max_spare_servers for {{ user.key }} if defined"
              ansible.builtin.assert:
                that:
                  - user.value.users_phpfpm_pm_max_spare_servers | int >= 1
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
              when: user.value.users_phpfpm_pm_max_spare_servers is defined

            - name: "Check the PHP-FPM users_phpfpm_pm_max_children for {{ user.key }} if defined"
              ansible.builtin.assert:
                that:
                  - user.value.users_phpfpm_pm_max_children | int >= 1
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
              when: user.value.users_phpfpm_pm_max_children is defined

            - name: "Check the PHP-FPM pm.max_children must be greater than or equal to pm.start_servers for {{ user.key }} if defined"
              ansible.builtin.assert:
                that:
                  - user.value.users_phpfpm_pm_max_children | int >= user.value.users_phpfpm_pm_start_servers | int
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
              when:
                - user.value.users_phpfpm_pm_max_children is defined
                - user.value.users_phpfpm_pm_start_servers is defined

            - name: "Check the PHP-FPM pm.max_children must be greater than or equal to pm.min_spare_servers for {{ user.key }} if defined"
              ansible.builtin.assert:
                that:
                  - user.value.users_phpfpm_pm_max_children | int >= user.value.users_phpfpm_pm_min_spare_servers | int
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
              when:
                - user.value.users_phpfpm_pm_max_children is defined
                - user.value.users_phpfpm_pm_min_spare_servers is defined

            - name: "Check the PHP-FPM pm.max_children must be greater than or equal to pm.max_spare_servers for {{ user.key }} if defined"
              ansible.builtin.assert:
                that:
                  - user.value.users_phpfpm_pm_max_children | int >= user.value.users_phpfpm_pm_max_spare_servers | int
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
              when:
                - user.value.users_phpfpm_pm_max_children is defined
                - user.value.users_phpfpm_pm_max_spare_servers is defined

            - name: "Check the PHP-FPM pm.start_servers is greater than pm.min_spare_servers for {{ user.key }} if defined"
              ansible.builtin.assert:
                that:
                  - user.value.users_phpfpm_pm_start_servers | int >= user.value.users_phpfpm_pm_min_spare_servers | int
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
              when:
                - user.value.users_phpfpm_pm_start_servers is defined
                - user.value.users_phpfpm_pm_min_spare_servers is defined

            - name: "Check the PHP-FPM pm.start_servers must less than or equal to pm.max_spare_servers for {{ user.key }} if defined"
              ansible.builtin.assert:
                that:
                  - user.value.users_phpfpm_pm_start_servers | int <= user.value.users_phpfpm_pm_max_spare_servers | int
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
              when:
                - user.value.users_phpfpm_pm_start_servers is defined
                - user.value.users_phpfpm_pm_max_spare_servers is defined

            - name: "Check the PHP-FPM pm.max_spare_servers must be greater than pm.min_spare_servers for {{ user.key }} if defined"
              ansible.builtin.assert:
                that:
                  - user.value.users_phpfpm_pm_max_spare_servers | int >= user.value.users_phpfpm_pm_min_spare_servers | int
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
              when:
                - user.value.users_phpfpm_pm_max_spare_servers is defined
                - user.value.users_phpfpm_pm_min_spare_servers is defined

          when: ( user.value.users_phpfpm_pm is defined ) and ( user.value.users_phpfpm_pm == "dynamic" )

        - name: Check that users_phpfpm_mysqli_allow_local_infile is a boolean if defined
          ansible.builtin.assert:
            that:
              - user.value.users_phpfpm_mysqli_allow_local_infile | type_debug == "bool"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: user.value.users_phpfpm_mysqli_allow_local_infile is defined

        - name: Check that users_phpfpm_disable_functions is a list if defined
          ansible.builtin.assert:
            that:
              - user.value.users_phpfpm_enable_disable_functions | type_debug == "list"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: user.value.users_phpfpm_enable_disable_functions is defined

        - name: Check that users_phpfpm_open_basedir is a list if defined
          ansible.builtin.assert:
            that:
              - user.value.users_phpfpm_open_basedir | type_debug == "list"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: user.value.users_phpfpm_open_basedir is defined

        - name: Checks for users_phpfpm_extensions
          block:

            - name: "Check that users_phpfpm_extensions for {{ user.key }} is an array if defined"
              ansible.builtin.assert:
                that:
                  - user.value.users_phpfpm_extensions | type_debug == "list"
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

            - name: "Check that users_phpfpm_extensions for {{ user.key }} is an array if defined"
              ansible.builtin.assert:
                that:
                  - ext is regex('^[a-zA-Z0-9_-]{1,6}$')
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
              loop: "{{ user.value.users_phpfpm_extensions }}"
              loop_control:
                loop_var: ext

          when: user.value.users_phpfpm_extensions is defined

      when: >-
        ( user.key == "www-data" ) or
        ( ( users_phpfpm is defined ) and ( users_phpfpm ) )

    - name: "Check that the users_daily_scripts array for {{ user.key }} is a non-empty list if defined"
      ansible.builtin.assert:
        that:
          - user.value.users_daily_scripts | type_debug == "list"
          - user.value.users_daily_scripts | length > 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_daily_scripts is defined

    - name: "Check that the users_hourly_scripts array for {{ user.key }} is a non-empty list if defined"
      ansible.builtin.assert:
        that:
          - user.value.users_hourly_scripts | type_debug == "list"
          - user.value.users_hourly_scripts | length > 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_hourly_scripts is defined

    - name: "Check that the users_minutely_scripts array for {{ user.key }} is a non-empty list if defined"
      ansible.builtin.assert:
        that:
          - user.value.users_minutely_scripts | type_debug == "list"
          - user.value.users_minutely_scripts | length > 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: user.value.users_minutely_scripts is defined

    - name: Check the entries in the users_cron_jobs array if defined
      ansible.builtin.include_tasks: user_check_cron.yml
      loop: "{{ user.value.users_cron_jobs }}"
      loop_control:
        loop_var: job
      when: user.value.users_cron_jobs is defined

    - name: Apache VirtualHost config check when enabled
      block:

        - name: "Check that www-data is a member of the primary group for user {{ user.key }} when Apache VirtualHosts are defined"
          ansible.builtin.assert:
            that:
              - ( "www-data" in user.value.users_group_members )
            quiet: "{% if ansible_check_mode or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"
          when:
            - user.value.users_group_members is defined
            - user.value.users_group_members != []

        # An additional include (user_check_vhosts.yml including a loop through user_check_vhost.yml)
        # is needed here because of this issue
        # https://github.com/ansible/ansible/issues/19391#issuecomment-282196876
        - name: "Include the loop for Apache VirtualHosts for {{ user.key }}"
          ansible.builtin.include_tasks: user_check_vhosts.yml

      when:
        - user.value.users_apache_virtual_hosts is defined
        - >-
          ( user.value.users_apache_virtual_hosts_enabled is defined and user.value.users_apache_virtual_hosts_enabled | bool ) or
          ( users_apache_virtual_hosts_enabled is not defined )

  tags:
    - users
...
