---
- name: "Check state for {{ user.key }}"
  assert:
    that:
      - user.value.state | length
      - ( user.value.state == "present" ) or ( user.value.state == "absent" )
  when: user.value.state is defined

- name: SSH public key URL checks
  block:

    - name: "Check users_ssh_public_keys is a non-empty array for {{ user.key }}"
      assert:
        that:
          - user.value.users_ssh_public_keys | length
          - user.value.users_ssh_public_keys[0] is defined

    - name: "Check that users_ssh_public_keys array contains valid URLs for {{ user.key }}"
      uri:
        url: "{{ url }}"
        method: HEAD
        return_content: true 
      register: users_ssh_public_key_headers
      check_mode: false
      failed_when: users_ssh_public_key_headers.status != 200
      loop: "{{ user.value.users_ssh_public_keys }}"
      loop_control:
        loop_var: url
        label: "{{ url }}" 

  when: user.value.users_ssh_public_keys is defined

- name: "Check users_skel is an existing path for {{ user.key }}"
  stat:
    path: "{{ user.value.users_skel }}"
  register: user_skell_path
  failed_when: user_skell_path.stat.isdir == False
  when: user.value.users_skel is defined
...
